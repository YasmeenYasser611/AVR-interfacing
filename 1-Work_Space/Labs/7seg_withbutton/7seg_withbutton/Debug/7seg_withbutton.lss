
7seg_withbutton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000692  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000692  00000706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bc4  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b90  00000000  00000000  00002488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aa2  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c4  00000000  00000000  00003abc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000015ca  00000000  00000000  00003c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f15  00000000  00000000  0000524a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  0000615f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 13 02 	call	0x426	; 0x426 <main>
  8a:	0c 94 47 03 	jmp	0x68e	; 0x68e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HSEVENSEG_vInit>:
#define IS_INVALID_SEVENSEG_NAME(X)			((((u8)X) > Num_of_SEVENSEG) || (((u8)X) < 0))
#define IS_INVALID_SEVENSEG_VALUE(X)			((((u8)X) > 9) || (((u8)X) < 0))


void HSEVENSEG_vInit(void)
{
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
	
	u8 Local_u8_LED1PinPort=0 ,Local_u8_LED2PinPort=0 ,Local_u8_LED3PinPort=0 ,Local_u8_LED4PinPort=0 ,Local_u8_LED5PinPort=0 ,Local_u8_LED6PinPort=0 ,Local_u8_LED7PinPort=0 ,Local_u8_DOTPinPort=0 ,Local_u8_CONPinPort=0  ;
	u8 Local_u8_i=0;
	for(Local_u8_i =0 ; Local_u8_i < Num_of_SEVENSEG ; Local_u8_i++)
  98:	10 e0       	ldi	r17, 0x00	; 0
  9a:	58 c0       	rjmp	.+176    	; 0x14c <HSEVENSEG_vInit+0xba>
	{
		Local_u8_LED1PinPort = ((HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].LED1_Port<<4) + HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].LED1_Pin);
  9c:	23 e1       	ldi	r18, 0x13	; 19
  9e:	12 9f       	mul	r17, r18
  a0:	e0 01       	movw	r28, r0
  a2:	11 24       	eor	r1, r1
  a4:	cc 58       	subi	r28, 0x8C	; 140
  a6:	df 4f       	sbci	r29, 0xFF	; 255
  a8:	98 81       	ld	r25, Y
  aa:	89 81       	ldd	r24, Y+1	; 0x01
		MPORT_enuSetPinDirection(Local_u8_LED1PinPort , MPORT_enuPINOUTPUT);
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	20 e1       	ldi	r18, 0x10	; 16
  b0:	92 9f       	mul	r25, r18
  b2:	80 0d       	add	r24, r0
  b4:	11 24       	eor	r1, r1
  b6:	0e 94 af 02 	call	0x55e	; 0x55e <MPORT_enuSetPinDirection>
		Local_u8_LED2PinPort = ((HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].LED2_Port<<4) + HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].LED2_Pin);
  ba:	9a 81       	ldd	r25, Y+2	; 0x02
  bc:	8b 81       	ldd	r24, Y+3	; 0x03
		MPORT_enuSetPinDirection(Local_u8_LED2PinPort , MPORT_enuPINOUTPUT);
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	20 e1       	ldi	r18, 0x10	; 16
  c2:	92 9f       	mul	r25, r18
  c4:	80 0d       	add	r24, r0
  c6:	11 24       	eor	r1, r1
  c8:	0e 94 af 02 	call	0x55e	; 0x55e <MPORT_enuSetPinDirection>
		Local_u8_LED3PinPort = ((HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].LED3_Port<<4) + HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].LED3_Pin);
  cc:	9c 81       	ldd	r25, Y+4	; 0x04
  ce:	8d 81       	ldd	r24, Y+5	; 0x05
		MPORT_enuSetPinDirection(Local_u8_LED3PinPort , MPORT_enuPINOUTPUT);
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	20 e1       	ldi	r18, 0x10	; 16
  d4:	92 9f       	mul	r25, r18
  d6:	80 0d       	add	r24, r0
  d8:	11 24       	eor	r1, r1
  da:	0e 94 af 02 	call	0x55e	; 0x55e <MPORT_enuSetPinDirection>
		Local_u8_LED4PinPort = ((HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].LED4_Port<<4) + HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].LED4_Pin);
  de:	9e 81       	ldd	r25, Y+6	; 0x06
  e0:	8f 81       	ldd	r24, Y+7	; 0x07
		MPORT_enuSetPinDirection(Local_u8_LED4PinPort , MPORT_enuPINOUTPUT);
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	20 e1       	ldi	r18, 0x10	; 16
  e6:	92 9f       	mul	r25, r18
  e8:	80 0d       	add	r24, r0
  ea:	11 24       	eor	r1, r1
  ec:	0e 94 af 02 	call	0x55e	; 0x55e <MPORT_enuSetPinDirection>
		Local_u8_LED5PinPort = ((HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].LED5_Port<<4) + HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].LED5_Pin);
  f0:	98 85       	ldd	r25, Y+8	; 0x08
  f2:	89 85       	ldd	r24, Y+9	; 0x09
		MPORT_enuSetPinDirection(Local_u8_LED5PinPort , MPORT_enuPINOUTPUT);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	20 e1       	ldi	r18, 0x10	; 16
  f8:	92 9f       	mul	r25, r18
  fa:	80 0d       	add	r24, r0
  fc:	11 24       	eor	r1, r1
  fe:	0e 94 af 02 	call	0x55e	; 0x55e <MPORT_enuSetPinDirection>
		Local_u8_LED6PinPort = ((HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].LED6_Port<<4) + HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].LED6_Pin);
 102:	9a 85       	ldd	r25, Y+10	; 0x0a
 104:	8b 85       	ldd	r24, Y+11	; 0x0b
		MPORT_enuSetPinDirection(Local_u8_LED6PinPort , MPORT_enuPINOUTPUT);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	20 e1       	ldi	r18, 0x10	; 16
 10a:	92 9f       	mul	r25, r18
 10c:	80 0d       	add	r24, r0
 10e:	11 24       	eor	r1, r1
 110:	0e 94 af 02 	call	0x55e	; 0x55e <MPORT_enuSetPinDirection>
		Local_u8_LED7PinPort = ((HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].LED7_Port<<4) + HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].LED7_Pin);
 114:	9c 85       	ldd	r25, Y+12	; 0x0c
 116:	8d 85       	ldd	r24, Y+13	; 0x0d
		MPORT_enuSetPinDirection(Local_u8_LED7PinPort , MPORT_enuPINOUTPUT);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	20 e1       	ldi	r18, 0x10	; 16
 11c:	92 9f       	mul	r25, r18
 11e:	80 0d       	add	r24, r0
 120:	11 24       	eor	r1, r1
 122:	0e 94 af 02 	call	0x55e	; 0x55e <MPORT_enuSetPinDirection>
		Local_u8_DOTPinPort = ((HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].DOT_Port<<4) + HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].DOT_Pin);
 126:	9e 85       	ldd	r25, Y+14	; 0x0e
 128:	8f 85       	ldd	r24, Y+15	; 0x0f
		MPORT_enuSetPinDirection(Local_u8_DOTPinPort , MPORT_enuPINOUTPUT);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	20 e1       	ldi	r18, 0x10	; 16
 12e:	92 9f       	mul	r25, r18
 130:	80 0d       	add	r24, r0
 132:	11 24       	eor	r1, r1
 134:	0e 94 af 02 	call	0x55e	; 0x55e <MPORT_enuSetPinDirection>
		Local_u8_CONPinPort = ((HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].CONN_Port<<4) + HSEVENSEG_enuArrHEVENSEGCongf[Local_u8_i].CONN_Pin);
 138:	98 89       	ldd	r25, Y+16	; 0x10
 13a:	89 89       	ldd	r24, Y+17	; 0x11
		MPORT_enuSetPinDirection(Local_u8_CONPinPort , MPORT_enuPINOUTPUT);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	20 e1       	ldi	r18, 0x10	; 16
 140:	92 9f       	mul	r25, r18
 142:	80 0d       	add	r24, r0
 144:	11 24       	eor	r1, r1
 146:	0e 94 af 02 	call	0x55e	; 0x55e <MPORT_enuSetPinDirection>
void HSEVENSEG_vInit(void)
{
	
	u8 Local_u8_LED1PinPort=0 ,Local_u8_LED2PinPort=0 ,Local_u8_LED3PinPort=0 ,Local_u8_LED4PinPort=0 ,Local_u8_LED5PinPort=0 ,Local_u8_LED6PinPort=0 ,Local_u8_LED7PinPort=0 ,Local_u8_DOTPinPort=0 ,Local_u8_CONPinPort=0  ;
	u8 Local_u8_i=0;
	for(Local_u8_i =0 ; Local_u8_i < Num_of_SEVENSEG ; Local_u8_i++)
 14a:	1f 5f       	subi	r17, 0xFF	; 255
 14c:	12 30       	cpi	r17, 0x02	; 2
 14e:	08 f4       	brcc	.+2      	; 0x152 <HSEVENSEG_vInit+0xc0>
 150:	a5 cf       	rjmp	.-182    	; 0x9c <HSEVENSEG_vInit+0xa>
		MPORT_enuSetPinDirection(Local_u8_CONPinPort , MPORT_enuPINOUTPUT);

	}

	
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	08 95       	ret

0000015a <HSEVENSEG_vSetValue>:


HSEVENSEG_enuErrorStatus_t HSEVENSEG_vSetValue(u8 Copy_enuSevenSegNum , u8 Copy_u8Value)
{
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
	HSEVENSEG_enuErrorStatus_t Ret_enuError = HSEVENSEG_enuNOK;
	if(IS_INVALID_SEVENSEG_NAME(Copy_enuSevenSegNum) )
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	08 f0       	brcs	.+2      	; 0x168 <HSEVENSEG_vSetValue+0xe>
 166:	7f c0       	rjmp	.+254    	; 0x266 <HSEVENSEG_vSetValue+0x10c>
	{
		Ret_enuError = HSEVENSEG_enuINVALID_SEGNAME;

		
	}
	else if(IS_INVALID_SEVENSEG_VALUE(Copy_u8Value))
 168:	6a 30       	cpi	r22, 0x0A	; 10
 16a:	08 f0       	brcs	.+2      	; 0x16e <HSEVENSEG_vSetValue+0x14>
 16c:	7e c0       	rjmp	.+252    	; 0x26a <HSEVENSEG_vSetValue+0x110>
 16e:	16 2f       	mov	r17, r22
	}
	else
	{
		Ret_enuError = HSEVENSEG_enuOK ;
		u8 Local_u8_segmentPattern =0 ;
		if(HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].CONNECTION == HSEVENSEG_enuSEVENSEG_CA)
 170:	c8 2f       	mov	r28, r24
 172:	d0 e0       	ldi	r29, 0x00	; 0
 174:	83 e1       	ldi	r24, 0x13	; 19
 176:	8c 9f       	mul	r24, r28
 178:	f0 01       	movw	r30, r0
 17a:	8d 9f       	mul	r24, r29
 17c:	f0 0d       	add	r31, r0
 17e:	11 24       	eor	r1, r1
 180:	ec 58       	subi	r30, 0x8C	; 140
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	82 89       	ldd	r24, Z+18	; 0x12
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	a1 f4       	brne	.+40     	; 0x1b2 <HSEVENSEG_vSetValue+0x58>
		{
			MDIO_enuSetPinValue(HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].CONN_Port , HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].CONN_Pin, MDIO_enuHIGH);
 18a:	83 e1       	ldi	r24, 0x13	; 19
 18c:	8c 9f       	mul	r24, r28
 18e:	f0 01       	movw	r30, r0
 190:	8d 9f       	mul	r24, r29
 192:	f0 0d       	add	r31, r0
 194:	11 24       	eor	r1, r1
 196:	ec 58       	subi	r30, 0x8C	; 140
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	61 89       	ldd	r22, Z+17	; 0x11
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	80 89       	ldd	r24, Z+16	; 0x10
 1a0:	0e 94 56 02 	call	0x4ac	; 0x4ac <MDIO_enuSetPinValue>
			Local_u8_segmentPattern = HSEVENSEG_enuCA_Patterns[Copy_u8Value] ;
 1a4:	e1 2f       	mov	r30, r17
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	e0 5a       	subi	r30, 0xA0	; 160
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	00 81       	ld	r16, Z
	{
		Ret_enuError = HSEVENSEG_enuINVALID_SEGVALUE ;
	}
	else
	{
		Ret_enuError = HSEVENSEG_enuOK ;
 1ae:	10 e0       	ldi	r17, 0x00	; 0
 1b0:	18 c0       	rjmp	.+48     	; 0x1e2 <HSEVENSEG_vSetValue+0x88>
		{
			MDIO_enuSetPinValue(HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].CONN_Port , HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].CONN_Pin, MDIO_enuHIGH);
			Local_u8_segmentPattern = HSEVENSEG_enuCA_Patterns[Copy_u8Value] ;
			
		}
		else if(HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].CONNECTION == HSEVENSEG_enuSEVENSEG_CC)
 1b2:	81 11       	cpse	r24, r1
 1b4:	14 c0       	rjmp	.+40     	; 0x1de <HSEVENSEG_vSetValue+0x84>
		{
			
			MDIO_enuSetPinValue(HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].CONN_Port , HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].CONN_Pin, MDIO_enuLOW);
 1b6:	83 e1       	ldi	r24, 0x13	; 19
 1b8:	8c 9f       	mul	r24, r28
 1ba:	f0 01       	movw	r30, r0
 1bc:	8d 9f       	mul	r24, r29
 1be:	f0 0d       	add	r31, r0
 1c0:	11 24       	eor	r1, r1
 1c2:	ec 58       	subi	r30, 0x8C	; 140
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	61 89       	ldd	r22, Z+17	; 0x11
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	80 89       	ldd	r24, Z+16	; 0x10
 1cc:	0e 94 56 02 	call	0x4ac	; 0x4ac <MDIO_enuSetPinValue>
			Local_u8_segmentPattern = HSEVENSEG_enuCC_Patterns[Copy_u8Value] ;
 1d0:	e1 2f       	mov	r30, r17
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	e6 59       	subi	r30, 0x96	; 150
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	00 81       	ld	r16, Z
	{
		Ret_enuError = HSEVENSEG_enuINVALID_SEGVALUE ;
	}
	else
	{
		Ret_enuError = HSEVENSEG_enuOK ;
 1da:	10 e0       	ldi	r17, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <HSEVENSEG_vSetValue+0x88>
		u8 Local_u8_segmentPattern =0 ;
 1de:	00 e0       	ldi	r16, 0x00	; 0
			MDIO_enuSetPinValue(HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].CONN_Port , HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].CONN_Pin, MDIO_enuLOW);
			Local_u8_segmentPattern = HSEVENSEG_enuCC_Patterns[Copy_u8Value] ;
		}
		else
		{
			Ret_enuError =HSEVENSEG_enuINVALID_Connection ;
 1e0:	14 e0       	ldi	r17, 0x04	; 4
		}
		
		MDIO_enuSetPinValue(HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].LED1_Port , HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].LED1_Pin,(Local_u8_segmentPattern >> 0) & 0x01 );
 1e2:	23 e1       	ldi	r18, 0x13	; 19
 1e4:	2c 9f       	mul	r18, r28
 1e6:	c0 01       	movw	r24, r0
 1e8:	2d 9f       	mul	r18, r29
 1ea:	90 0d       	add	r25, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	ec 01       	movw	r28, r24
 1f0:	cc 58       	subi	r28, 0x8C	; 140
 1f2:	df 4f       	sbci	r29, 0xFF	; 255
 1f4:	69 81       	ldd	r22, Y+1	; 0x01
 1f6:	40 2f       	mov	r20, r16
 1f8:	41 70       	andi	r20, 0x01	; 1
 1fa:	88 81       	ld	r24, Y
 1fc:	0e 94 56 02 	call	0x4ac	; 0x4ac <MDIO_enuSetPinValue>
		MDIO_enuSetPinValue(HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].LED2_Port , HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].LED2_Pin,(Local_u8_segmentPattern >> 1) & 0x01 );
 200:	6b 81       	ldd	r22, Y+3	; 0x03
 202:	01 fb       	bst	r16, 1
 204:	44 27       	eor	r20, r20
 206:	40 f9       	bld	r20, 0
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	0e 94 56 02 	call	0x4ac	; 0x4ac <MDIO_enuSetPinValue>
		MDIO_enuSetPinValue(HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].LED3_Port , HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].LED3_Pin,(Local_u8_segmentPattern >> 2) & 0x01 );
 20e:	6d 81       	ldd	r22, Y+5	; 0x05
 210:	02 fb       	bst	r16, 2
 212:	44 27       	eor	r20, r20
 214:	40 f9       	bld	r20, 0
 216:	8c 81       	ldd	r24, Y+4	; 0x04
 218:	0e 94 56 02 	call	0x4ac	; 0x4ac <MDIO_enuSetPinValue>
		MDIO_enuSetPinValue(HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].LED4_Port , HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].LED4_Pin,(Local_u8_segmentPattern >> 3) & 0x01 );
 21c:	6f 81       	ldd	r22, Y+7	; 0x07
 21e:	03 fb       	bst	r16, 3
 220:	44 27       	eor	r20, r20
 222:	40 f9       	bld	r20, 0
 224:	8e 81       	ldd	r24, Y+6	; 0x06
 226:	0e 94 56 02 	call	0x4ac	; 0x4ac <MDIO_enuSetPinValue>
		MDIO_enuSetPinValue(HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].LED5_Port , HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].LED5_Pin,(Local_u8_segmentPattern >> 4) & 0x01 );
 22a:	69 85       	ldd	r22, Y+9	; 0x09
 22c:	04 fb       	bst	r16, 4
 22e:	44 27       	eor	r20, r20
 230:	40 f9       	bld	r20, 0
 232:	88 85       	ldd	r24, Y+8	; 0x08
 234:	0e 94 56 02 	call	0x4ac	; 0x4ac <MDIO_enuSetPinValue>
		MDIO_enuSetPinValue(HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].LED6_Port , HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].LED6_Pin,(Local_u8_segmentPattern >> 5) & 0x01 );
 238:	6b 85       	ldd	r22, Y+11	; 0x0b
 23a:	05 fb       	bst	r16, 5
 23c:	44 27       	eor	r20, r20
 23e:	40 f9       	bld	r20, 0
 240:	8a 85       	ldd	r24, Y+10	; 0x0a
 242:	0e 94 56 02 	call	0x4ac	; 0x4ac <MDIO_enuSetPinValue>
		MDIO_enuSetPinValue(HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].LED7_Port , HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].LED7_Pin,(Local_u8_segmentPattern >> 6) & 0x01 );
 246:	6d 85       	ldd	r22, Y+13	; 0x0d
 248:	06 fb       	bst	r16, 6
 24a:	44 27       	eor	r20, r20
 24c:	40 f9       	bld	r20, 0
 24e:	8c 85       	ldd	r24, Y+12	; 0x0c
 250:	0e 94 56 02 	call	0x4ac	; 0x4ac <MDIO_enuSetPinValue>
		MDIO_enuSetPinValue(HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].DOT_Port , HSEVENSEG_enuArrHEVENSEGCongf[Copy_enuSevenSegNum].DOT_Pin,(Local_u8_segmentPattern >> 7) & 0x01 );
 254:	6f 85       	ldd	r22, Y+15	; 0x0f
 256:	40 2f       	mov	r20, r16
 258:	44 1f       	adc	r20, r20
 25a:	44 27       	eor	r20, r20
 25c:	44 1f       	adc	r20, r20
 25e:	8e 85       	ldd	r24, Y+14	; 0x0e
 260:	0e 94 56 02 	call	0x4ac	; 0x4ac <MDIO_enuSetPinValue>
 264:	03 c0       	rjmp	.+6      	; 0x26c <HSEVENSEG_vSetValue+0x112>
HSEVENSEG_enuErrorStatus_t HSEVENSEG_vSetValue(u8 Copy_enuSevenSegNum , u8 Copy_u8Value)
{
	HSEVENSEG_enuErrorStatus_t Ret_enuError = HSEVENSEG_enuNOK;
	if(IS_INVALID_SEVENSEG_NAME(Copy_enuSevenSegNum) )
	{
		Ret_enuError = HSEVENSEG_enuINVALID_SEGNAME;
 266:	15 e0       	ldi	r17, 0x05	; 5
 268:	01 c0       	rjmp	.+2      	; 0x26c <HSEVENSEG_vSetValue+0x112>

		
	}
	else if(IS_INVALID_SEVENSEG_VALUE(Copy_u8Value))
	{
		Ret_enuError = HSEVENSEG_enuINVALID_SEGVALUE ;
 26a:	16 e0       	ldi	r17, 0x06	; 6
		
	}
	
	return Ret_enuError;

}
 26c:	81 2f       	mov	r24, r17
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	08 95       	ret

00000278 <HSEVENSEG_enuSetMultiDigitValue>:


HSEVENSEG_enuErrorStatus_t HSEVENSEG_enuSetMultiDigitValue(u16 Copy_u16Value)
{
 278:	8f 92       	push	r8
 27a:	9f 92       	push	r9
 27c:	af 92       	push	r10
 27e:	bf 92       	push	r11
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	ac 01       	movw	r20, r24
			HSEVENSEG_vSetValue(Local_u8_i, Local_u8_digits[Local_u8_count - 1 - Local_u8_i]);
		}
	}

	return Ret_enuError;
}
 296:	cd b6       	in	r12, 0x3d	; 61
 298:	de b6       	in	r13, 0x3e	; 62

HSEVENSEG_enuErrorStatus_t HSEVENSEG_enuSetMultiDigitValue(u16 Copy_u16Value)
{
	u8 Local_u8_count = 0;
	HSEVENSEG_enuErrorStatus_t Ret_enuError = HSEVENSEG_enuNOK;
	u16 Local_u16_value = Copy_u16Value;  // Store the original value for later use
 29a:	9c 01       	movw	r18, r24
}


HSEVENSEG_enuErrorStatus_t HSEVENSEG_enuSetMultiDigitValue(u16 Copy_u16Value)
{
	u8 Local_u8_count = 0;
 29c:	10 e0       	ldi	r17, 0x00	; 0
	HSEVENSEG_enuErrorStatus_t Ret_enuError = HSEVENSEG_enuNOK;
	u16 Local_u16_value = Copy_u16Value;  // Store the original value for later use

	// Count the digits
	while (Local_u16_value > 0) 
 29e:	0c c0       	rjmp	.+24     	; 0x2b8 <HSEVENSEG_enuSetMultiDigitValue+0x40>
	{
		Local_u8_count++;
 2a0:	1f 5f       	subi	r17, 0xFF	; 255
		Local_u16_value /= 10;
 2a2:	ad ec       	ldi	r26, 0xCD	; 205
 2a4:	bc ec       	ldi	r27, 0xCC	; 204
 2a6:	0e 94 38 03 	call	0x670	; 0x670 <__umulhisi3>
 2aa:	9c 01       	movw	r18, r24
 2ac:	36 95       	lsr	r19
 2ae:	27 95       	ror	r18
 2b0:	36 95       	lsr	r19
 2b2:	27 95       	ror	r18
 2b4:	36 95       	lsr	r19
 2b6:	27 95       	ror	r18
	u8 Local_u8_count = 0;
	HSEVENSEG_enuErrorStatus_t Ret_enuError = HSEVENSEG_enuNOK;
	u16 Local_u16_value = Copy_u16Value;  // Store the original value for later use

	// Count the digits
	while (Local_u16_value > 0) 
 2b8:	21 15       	cp	r18, r1
 2ba:	31 05       	cpc	r19, r1
 2bc:	89 f7       	brne	.-30     	; 0x2a0 <HSEVENSEG_enuSetMultiDigitValue+0x28>
	{
		Local_u8_count++;
		Local_u16_value /= 10;
	}

	if (IS_INVALID_SEVENSEG_NAME(Local_u8_count)) 
 2be:	13 30       	cpi	r17, 0x03	; 3
 2c0:	08 f0       	brcs	.+2      	; 0x2c4 <HSEVENSEG_enuSetMultiDigitValue+0x4c>
 2c2:	58 c0       	rjmp	.+176    	; 0x374 <HSEVENSEG_enuSetMultiDigitValue+0xfc>
	{
		Ret_enuError = HSEVENSEG_enuINVALID_SEGNUMS;
	} 
	else 
	{
 2c4:	8d b6       	in	r8, 0x3d	; 61
 2c6:	9e b6       	in	r9, 0x3e	; 62
		Ret_enuError = HSEVENSEG_enuOK;

		u8 Local_u8_digits[Local_u8_count];  
 2c8:	81 2f       	mov	r24, r17
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	5c 01       	movw	r10, r24
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	a2 1a       	sub	r10, r18
 2d2:	b1 08       	sbc	r11, r1
 2d4:	2d b7       	in	r18, 0x3d	; 61
 2d6:	3e b7       	in	r19, 0x3e	; 62
 2d8:	28 1b       	sub	r18, r24
 2da:	39 0b       	sbc	r19, r25
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	3e bf       	out	0x3e, r19	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	2d bf       	out	0x3d, r18	; 61
 2e6:	8d b7       	in	r24, 0x3d	; 61
 2e8:	9e b7       	in	r25, 0x3e	; 62
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	7c 01       	movw	r14, r24

		// Reuse the original value to extract digits and store them in reverse order
		for (u8 Local_u8_i = 0; Local_u8_i < Local_u8_count; Local_u8_i++) 
 2ee:	e0 e0       	ldi	r30, 0x00	; 0
 2f0:	2a c0       	rjmp	.+84     	; 0x346 <HSEVENSEG_enuSetMultiDigitValue+0xce>
		{
			Local_u8_digits[Local_u8_i] = Copy_u16Value % 10;
 2f2:	9a 01       	movw	r18, r20
 2f4:	ad ec       	ldi	r26, 0xCD	; 205
 2f6:	bc ec       	ldi	r27, 0xCC	; 204
 2f8:	0e 94 38 03 	call	0x670	; 0x670 <__umulhisi3>
 2fc:	96 95       	lsr	r25
 2fe:	87 95       	ror	r24
 300:	96 95       	lsr	r25
 302:	87 95       	ror	r24
 304:	96 95       	lsr	r25
 306:	87 95       	ror	r24
 308:	9c 01       	movw	r18, r24
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	82 0f       	add	r24, r18
 31c:	93 1f       	adc	r25, r19
 31e:	9a 01       	movw	r18, r20
 320:	28 1b       	sub	r18, r24
 322:	39 0b       	sbc	r19, r25
 324:	d7 01       	movw	r26, r14
 326:	ae 0f       	add	r26, r30
 328:	b1 1d       	adc	r27, r1
 32a:	2c 93       	st	X, r18
			Copy_u16Value /= 10;
 32c:	9a 01       	movw	r18, r20
 32e:	ad ec       	ldi	r26, 0xCD	; 205
 330:	bc ec       	ldi	r27, 0xCC	; 204
 332:	0e 94 38 03 	call	0x670	; 0x670 <__umulhisi3>
 336:	ac 01       	movw	r20, r24
 338:	56 95       	lsr	r21
 33a:	47 95       	ror	r20
 33c:	56 95       	lsr	r21
 33e:	47 95       	ror	r20
 340:	56 95       	lsr	r21
 342:	47 95       	ror	r20
		Ret_enuError = HSEVENSEG_enuOK;

		u8 Local_u8_digits[Local_u8_count];  

		// Reuse the original value to extract digits and store them in reverse order
		for (u8 Local_u8_i = 0; Local_u8_i < Local_u8_count; Local_u8_i++) 
 344:	ef 5f       	subi	r30, 0xFF	; 255
 346:	e1 17       	cp	r30, r17
 348:	a0 f2       	brcs	.-88     	; 0x2f2 <HSEVENSEG_enuSetMultiDigitValue+0x7a>
 34a:	00 e0       	ldi	r16, 0x00	; 0
 34c:	0a c0       	rjmp	.+20     	; 0x362 <HSEVENSEG_enuSetMultiDigitValue+0xea>
		}

		// Now display digits in reverse order (most significant to least significant)
		for (u8 Local_u8_i = 0; Local_u8_i < Local_u8_count; Local_u8_i++) 
		{
			HSEVENSEG_vSetValue(Local_u8_i, Local_u8_digits[Local_u8_count - 1 - Local_u8_i]);
 34e:	f5 01       	movw	r30, r10
 350:	e0 1b       	sub	r30, r16
 352:	f1 09       	sbc	r31, r1
 354:	ee 0d       	add	r30, r14
 356:	ff 1d       	adc	r31, r15
 358:	60 81       	ld	r22, Z
 35a:	80 2f       	mov	r24, r16
 35c:	0e 94 ad 00 	call	0x15a	; 0x15a <HSEVENSEG_vSetValue>
			Local_u8_digits[Local_u8_i] = Copy_u16Value % 10;
			Copy_u16Value /= 10;
		}

		// Now display digits in reverse order (most significant to least significant)
		for (u8 Local_u8_i = 0; Local_u8_i < Local_u8_count; Local_u8_i++) 
 360:	0f 5f       	subi	r16, 0xFF	; 255
 362:	01 17       	cp	r16, r17
 364:	a0 f3       	brcs	.-24     	; 0x34e <HSEVENSEG_enuSetMultiDigitValue+0xd6>
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	9e be       	out	0x3e, r9	; 62
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	8d be       	out	0x3d, r8	; 61
	{
		Ret_enuError = HSEVENSEG_enuINVALID_SEGNUMS;
	} 
	else 
	{
		Ret_enuError = HSEVENSEG_enuOK;
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	01 c0       	rjmp	.+2      	; 0x376 <HSEVENSEG_enuSetMultiDigitValue+0xfe>
		Local_u16_value /= 10;
	}

	if (IS_INVALID_SEVENSEG_NAME(Local_u8_count)) 
	{
		Ret_enuError = HSEVENSEG_enuINVALID_SEGNUMS;
 374:	87 e0       	ldi	r24, 0x07	; 7
			HSEVENSEG_vSetValue(Local_u8_i, Local_u8_digits[Local_u8_count - 1 - Local_u8_i]);
		}
	}

	return Ret_enuError;
}
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	f8 94       	cli
 37a:	de be       	out	0x3e, r13	; 62
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	cd be       	out	0x3d, r12	; 61
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	ff 90       	pop	r15
 38a:	ef 90       	pop	r14
 38c:	df 90       	pop	r13
 38e:	cf 90       	pop	r12
 390:	bf 90       	pop	r11
 392:	af 90       	pop	r10
 394:	9f 90       	pop	r9
 396:	8f 90       	pop	r8
 398:	08 95       	ret

0000039a <HSWITCH_vSWITCH_init>:

extern HSWITCH_strSWITCHCONFG_t HSWITCH_enuArrSwitchCongf[Num_of_SWITCH];


void HSWITCH_vSWITCH_init(void)
{
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
	HSWITCH_enuErrorStatus_t Ret_enuError = HSWITCH_enuNOK;
	u8 Local_u8_currentPinPort=0;
	u8 Local_u8_i=0;
	for(Local_u8_i =0 ; Local_u8_i < Num_of_SWITCH ; Local_u8_i++)
 3a2:	10 e0       	ldi	r17, 0x00	; 0
 3a4:	22 c0       	rjmp	.+68     	; 0x3ea <HSWITCH_vSWITCH_init+0x50>
	{
		Local_u8_currentPinPort = ((HSWITCH_enuArrSwitchCongf[Local_u8_i].PORT<<4) + HSWITCH_enuArrSwitchCongf[Local_u8_i].PIN);
 3a6:	c1 2f       	mov	r28, r17
 3a8:	d0 e0       	ldi	r29, 0x00	; 0
 3aa:	ce 01       	movw	r24, r28
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	c8 0f       	add	r28, r24
 3b2:	d9 1f       	adc	r29, r25
 3b4:	c6 56       	subi	r28, 0x66	; 102
 3b6:	df 4f       	sbci	r29, 0xFF	; 255
 3b8:	88 81       	ld	r24, Y
 3ba:	09 81       	ldd	r16, Y+1	; 0x01
 3bc:	90 e1       	ldi	r25, 0x10	; 16
 3be:	89 9f       	mul	r24, r25
 3c0:	00 0d       	add	r16, r0
 3c2:	11 24       	eor	r1, r1
		MPORT_enuSetPinDirection(Local_u8_currentPinPort , MPORT_enuPININPUT);
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	80 2f       	mov	r24, r16
 3c8:	0e 94 af 02 	call	0x55e	; 0x55e <MPORT_enuSetPinDirection>
		if(HSWITCH_enuArrSwitchCongf[Local_u8_i].CONNECTION == HSWITCH_enuPullUP)
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	81 11       	cpse	r24, r1
 3d0:	05 c0       	rjmp	.+10     	; 0x3dc <HSWITCH_vSWITCH_init+0x42>
		{
			 Ret_enuError = MPORT_enuSetPinMode(Local_u8_currentPinPort ,MPORT_enuINPUT_PULL_UP);
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	80 2f       	mov	r24, r16
 3d6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <MPORT_enuSetPinMode>
 3da:	06 c0       	rjmp	.+12     	; 0x3e8 <HSWITCH_vSWITCH_init+0x4e>
		}
		else if(HSWITCH_enuArrSwitchCongf[Local_u8_i].CONNECTION == HSWITCH_enuPullDown)
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	21 f4       	brne	.+8      	; 0x3e8 <HSWITCH_vSWITCH_init+0x4e>
		{
			 Ret_enuError = MPORT_enuSetPinMode(Local_u8_currentPinPort ,MPORT_enuINPUT_PULL_DOWN);
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	80 2f       	mov	r24, r16
 3e4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <MPORT_enuSetPinMode>
void HSWITCH_vSWITCH_init(void)
{
	HSWITCH_enuErrorStatus_t Ret_enuError = HSWITCH_enuNOK;
	u8 Local_u8_currentPinPort=0;
	u8 Local_u8_i=0;
	for(Local_u8_i =0 ; Local_u8_i < Num_of_SWITCH ; Local_u8_i++)
 3e8:	1f 5f       	subi	r17, 0xFF	; 255
 3ea:	12 30       	cpi	r17, 0x02	; 2
 3ec:	e0 f2       	brcs	.-72     	; 0x3a6 <HSWITCH_vSWITCH_init+0xc>
			Ret_enuError = HSWITCH_enuINVALID_SWITCHConnection;
		}
		
		
	}
}
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	0f 91       	pop	r16
 3f6:	08 95       	ret

000003f8 <HSWITCH_enuGetSwitchState>:
HSWITCH_enuErrorStatus_t HSWITCH_enuGetSwitchState(u8 Copy_u8SwitchName, u8* Add_pu8State)
{
	HSWITCH_enuErrorStatus_t Ret_enuError = HSWITCH_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_SWITCH_NAME(Copy_u8SwitchName))
 3f8:	83 30       	cpi	r24, 0x03	; 3
 3fa:	88 f4       	brcc	.+34     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
	{
		Ret_enuError = HSWITCH_enuINVALID_SwitchName;
		
	}
	else if (IS_INVALID_PTR(Add_pu8State))
 3fc:	61 15       	cp	r22, r1
 3fe:	71 05       	cpc	r23, r1
 400:	81 f0       	breq	.+32     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 402:	ab 01       	movw	r20, r22
		Ret_enuError = HSWITCH_enuNULL_PTR;
	}
	else
	{
		Ret_enuError = HSWITCH_enuOK;
		Ret_enuError =MDIO_enuGetPinValue(HSWITCH_enuArrSwitchCongf[Copy_u8SwitchName].PORT,HSWITCH_enuArrSwitchCongf[Copy_u8SwitchName].PIN,Add_pu8State);
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	fc 01       	movw	r30, r24
 408:	ee 0f       	add	r30, r30
 40a:	ff 1f       	adc	r31, r31
 40c:	e8 0f       	add	r30, r24
 40e:	f9 1f       	adc	r31, r25
 410:	e6 56       	subi	r30, 0x66	; 102
 412:	ff 4f       	sbci	r31, 0xFF	; 255
 414:	61 81       	ldd	r22, Z+1	; 0x01
 416:	80 81       	ld	r24, Z
 418:	0e 94 8c 02 	call	0x518	; 0x518 <MDIO_enuGetPinValue>
 41c:	08 95       	ret
	HSWITCH_enuErrorStatus_t Ret_enuError = HSWITCH_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_SWITCH_NAME(Copy_u8SwitchName))
	{
		Ret_enuError = HSWITCH_enuINVALID_SwitchName;
 41e:	85 e0       	ldi	r24, 0x05	; 5
 420:	08 95       	ret
		
	}
	else if (IS_INVALID_PTR(Add_pu8State))
	{
		Ret_enuError = HSWITCH_enuNULL_PTR;
 422:	86 e0       	ldi	r24, 0x06	; 6
		Ret_enuError =MDIO_enuGetPinValue(HSWITCH_enuArrSwitchCongf[Copy_u8SwitchName].PORT,HSWITCH_enuArrSwitchCongf[Copy_u8SwitchName].PIN,Add_pu8State);

	}
	return Ret_enuError;
	
 424:	08 95       	ret

00000426 <main>:
#include "HSWITCH.h"
#define F_CPU 8000000UL
#include <util/delay.h>
#include "STD_TYPES.h"
int main(void)
{
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	00 d0       	rcall	.+0      	; 0x42c <main+0x6>
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
	HSEVENSEG_vInit();
 430:	0e 94 49 00 	call	0x92	; 0x92 <HSEVENSEG_vInit>
	HSWITCH_vSWITCH_init();
 434:	0e 94 cd 01 	call	0x39a	; 0x39a <HSWITCH_vSWITCH_init>
	u8 counter = 0;      // Counter value to display
	u8 direction = 5;    
	u8 sw1_state = 1;    // Store state of SWITCH1
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	89 83       	std	Y+1, r24	; 0x01
	u8 sw2_state = 0;    // Store state of SWITCH2
 43c:	1a 82       	std	Y+2, r1	; 0x02
int main(void)
{
	HSEVENSEG_vInit();
	HSWITCH_vSWITCH_init();
	u8 counter = 0;      // Counter value to display
	u8 direction = 5;    
 43e:	15 e0       	ldi	r17, 0x05	; 5
#include "STD_TYPES.h"
int main(void)
{
	HSEVENSEG_vInit();
	HSWITCH_vSWITCH_init();
	u8 counter = 0;      // Counter value to display
 440:	00 e0       	ldi	r16, 0x00	; 0
 442:	03 c0       	rjmp	.+6      	; 0x44a <main+0x24>

			if (direction == 0)
			{
				counter++; // Increment counter
				if (counter > 99)
				counter = 0; // Reset to 0 after reaching 99
 444:	00 e0       	ldi	r16, 0x00	; 0
 446:	01 c0       	rjmp	.+2      	; 0x44a <main+0x24>
			}
			else
			{
				if (counter == 0)
				counter = 99; // Reset to 99 after reaching 0
 448:	03 e6       	ldi	r16, 0x63	; 99
	u8 sw2_state = 0;    // Store state of SWITCH2

	while (1)
	{
		// Check the state of SWITCH1 (pull-up button for count up)
		if (HSWITCH_enuGetSwitchState(SWITCH1, &sw1_state) == 0 && sw1_state == 0)
 44a:	be 01       	movw	r22, r28
 44c:	6f 5f       	subi	r22, 0xFF	; 255
 44e:	7f 4f       	sbci	r23, 0xFF	; 255
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <HSWITCH_enuGetSwitchState>
 456:	81 11       	cpse	r24, r1
 458:	04 c0       	rjmp	.+8      	; 0x462 <main+0x3c>
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	81 11       	cpse	r24, r1
 45e:	01 c0       	rjmp	.+2      	; 0x462 <main+0x3c>
		{
			direction = 0; // Set direction to counting up
 460:	10 e0       	ldi	r17, 0x00	; 0
		}

		// Check the state of SWITCH2 (pull-down button for count down)
		if (HSWITCH_enuGetSwitchState(SWITCH2, &sw2_state) == 0 && sw2_state == 1)
 462:	be 01       	movw	r22, r28
 464:	6e 5f       	subi	r22, 0xFE	; 254
 466:	7f 4f       	sbci	r23, 0xFF	; 255
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <HSWITCH_enuGetSwitchState>
 46e:	81 11       	cpse	r24, r1
 470:	04 c0       	rjmp	.+8      	; 0x47a <main+0x54>
 472:	8a 81       	ldd	r24, Y+2	; 0x02
 474:	81 30       	cpi	r24, 0x01	; 1
 476:	09 f4       	brne	.+2      	; 0x47a <main+0x54>
		{
			direction = 1; // Set direction to counting down
 478:	11 e0       	ldi	r17, 0x01	; 1
		}
		if(direction == 1 ||direction == 0 )
 47a:	12 30       	cpi	r17, 0x02	; 2
 47c:	30 f7       	brcc	.-52     	; 0x44a <main+0x24>
		{
			
			// Update the seven-segment display based on the direction
			HSEVENSEG_enuSetMultiDigitValue(counter);
 47e:	80 2f       	mov	r24, r16
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 3c 01 	call	0x278	; 0x278 <HSEVENSEG_enuSetMultiDigitValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 486:	2f ef       	ldi	r18, 0xFF	; 255
 488:	84 e3       	ldi	r24, 0x34	; 52
 48a:	9c e0       	ldi	r25, 0x0C	; 12
 48c:	21 50       	subi	r18, 0x01	; 1
 48e:	80 40       	sbci	r24, 0x00	; 0
 490:	90 40       	sbci	r25, 0x00	; 0
 492:	e1 f7       	brne	.-8      	; 0x48c <main+0x66>
 494:	00 c0       	rjmp	.+0      	; 0x496 <main+0x70>
 496:	00 00       	nop
			_delay_ms(500);

			if (direction == 0)
 498:	11 11       	cpse	r17, r1
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <main+0x7e>
			{
				counter++; // Increment counter
 49c:	0f 5f       	subi	r16, 0xFF	; 255
				if (counter > 99)
 49e:	04 36       	cpi	r16, 0x64	; 100
 4a0:	88 f6       	brcc	.-94     	; 0x444 <main+0x1e>
 4a2:	d3 cf       	rjmp	.-90     	; 0x44a <main+0x24>
				counter = 0; // Reset to 0 after reaching 99
			}
			else
			{
				if (counter == 0)
 4a4:	00 23       	and	r16, r16
 4a6:	81 f2       	breq	.-96     	; 0x448 <main+0x22>
				counter = 99; // Reset to 99 after reaching 0
				else
				counter--; // Decrement counter
 4a8:	01 50       	subi	r16, 0x01	; 1
 4aa:	cf cf       	rjmp	.-98     	; 0x44a <main+0x24>

000004ac <MDIO_enuSetPinValue>:
		Local_strPtrCurrPort->PORT = (u8)Copy_enuPortState;
	
	}
	return Ret_enuError;
	
}
 4ac:	85 30       	cpi	r24, 0x05	; 5
 4ae:	60 f5       	brcc	.+88     	; 0x508 <MDIO_enuSetPinValue+0x5c>
 4b0:	69 30       	cpi	r22, 0x09	; 9
 4b2:	60 f5       	brcc	.+88     	; 0x50c <MDIO_enuSetPinValue+0x60>
 4b4:	42 30       	cpi	r20, 0x02	; 2
 4b6:	60 f5       	brcc	.+88     	; 0x510 <MDIO_enuSetPinValue+0x64>
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	fc 01       	movw	r30, r24
 4bc:	ee 0f       	add	r30, r30
 4be:	ff 1f       	adc	r31, r31
 4c0:	8e 0f       	add	r24, r30
 4c2:	9f 1f       	adc	r25, r31
 4c4:	ee 27       	eor	r30, r30
 4c6:	ff 27       	eor	r31, r31
 4c8:	e8 1b       	sub	r30, r24
 4ca:	f9 0b       	sbc	r31, r25
 4cc:	f9 96       	adiw	r30, 0x39	; 57
 4ce:	41 11       	cpse	r20, r1
 4d0:	0d c0       	rjmp	.+26     	; 0x4ec <MDIO_enuSetPinValue+0x40>
 4d2:	22 81       	ldd	r18, Z+2	; 0x02
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <MDIO_enuSetPinValue+0x32>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	6a 95       	dec	r22
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <MDIO_enuSetPinValue+0x2e>
 4e2:	80 95       	com	r24
 4e4:	82 23       	and	r24, r18
 4e6:	82 83       	std	Z+2, r24	; 0x02
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	08 95       	ret
 4ec:	41 30       	cpi	r20, 0x01	; 1
 4ee:	91 f4       	brne	.+36     	; 0x514 <MDIO_enuSetPinValue+0x68>
 4f0:	22 81       	ldd	r18, Z+2	; 0x02
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <MDIO_enuSetPinValue+0x50>
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	6a 95       	dec	r22
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <MDIO_enuSetPinValue+0x4c>
 500:	82 2b       	or	r24, r18
 502:	82 83       	std	Z+2, r24	; 0x02
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	08 95       	ret
 508:	82 e0       	ldi	r24, 0x02	; 2
 50a:	08 95       	ret
 50c:	83 e0       	ldi	r24, 0x03	; 3
 50e:	08 95       	ret
 510:	84 e0       	ldi	r24, 0x04	; 4
 512:	08 95       	ret
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	08 95       	ret

00000518 <MDIO_enuGetPinValue>:
{
	
	MDIO_enuErrorStatus_t Ret_enuError = MDIO_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
 518:	85 30       	cpi	r24, 0x05	; 5
 51a:	d8 f4       	brcc	.+54     	; 0x552 <MDIO_enuGetPinValue+0x3a>
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
 51c:	69 30       	cpi	r22, 0x09	; 9
 51e:	d8 f4       	brcc	.+54     	; 0x556 <MDIO_enuGetPinValue+0x3e>
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PTR(Add_pu8PinValue))
 520:	41 15       	cp	r20, r1
 522:	51 05       	cpc	r21, r1
 524:	d1 f0       	breq	.+52     	; 0x55a <MDIO_enuGetPinValue+0x42>
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
		// Get the address of the port registers
		MDIO_strPortRegElement_t* Local_strPtrCurrPort =(((MDIO_PORT_REG_BASE_ADD) - (((u8)Copy_enuPortNum) * 3)));
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	fc 01       	movw	r30, r24
 52a:	ee 0f       	add	r30, r30
 52c:	ff 1f       	adc	r31, r31
 52e:	8e 0f       	add	r24, r30
 530:	9f 1f       	adc	r25, r31
 532:	ee 27       	eor	r30, r30
 534:	ff 27       	eor	r31, r31
 536:	e8 1b       	sub	r30, r24
 538:	f9 0b       	sbc	r31, r25
		// Read the pin value and store it in the provided pointer
		*Add_pu8PinValue = GET_BIT(Local_strPtrCurrPort->PIN, Copy_enuPinNum);
 53a:	81 ad       	ldd	r24, Z+57	; 0x39
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	02 c0       	rjmp	.+4      	; 0x544 <MDIO_enuGetPinValue+0x2c>
 540:	95 95       	asr	r25
 542:	87 95       	ror	r24
 544:	6a 95       	dec	r22
 546:	e2 f7       	brpl	.-8      	; 0x540 <MDIO_enuGetPinValue+0x28>
 548:	81 70       	andi	r24, 0x01	; 1
 54a:	fa 01       	movw	r30, r20
 54c:	80 83       	st	Z, r24
	{
		Ret_enuError = MDIO_enuNULL_PTR;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	08 95       	ret
	MDIO_enuErrorStatus_t Ret_enuError = MDIO_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
 556:	83 e0       	ldi	r24, 0x03	; 3
 558:	08 95       	ret
	}
	else if (IS_INVALID_PTR(Add_pu8PinValue))
	{
		Ret_enuError = MDIO_enuNULL_PTR;
 55a:	86 e0       	ldi	r24, 0x06	; 6
		*Add_pu8PinValue = GET_BIT(Local_strPtrCurrPort->PIN, Copy_enuPinNum);

	}
	return Ret_enuError;
	
}
 55c:	08 95       	ret

0000055e <MPORT_enuSetPinDirection>:
// Function: MPORT_enuSetPinDirection
// Sets the direction of any pin after the initialization.
MPORT_enuErrorStatus_t MPORT_enuSetPinDirection( MPORT_enuPinNums_t Copy_enuPinNum  ,  MPORT_enuPinDirection_t  Copy_enuPinDirection  )
{
	MPORT_enuErrorStatus_t Ret_enuError= MPORT_enuOK;
	u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
 55e:	28 2f       	mov	r18, r24
 560:	22 95       	swap	r18
 562:	2f 70       	andi	r18, 0x0F	; 15
	u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
 564:	8f 70       	andi	r24, 0x0F	; 15
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
 566:	24 30       	cpi	r18, 0x04	; 4
 568:	a0 f5       	brcc	.+104    	; 0x5d2 <MPORT_enuSetPinDirection+0x74>
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
 56a:	88 30       	cpi	r24, 0x08	; 8
 56c:	a0 f5       	brcc	.+104    	; 0x5d6 <MPORT_enuSetPinDirection+0x78>
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PIN_Direction(Copy_enuPinDirection))
 56e:	62 30       	cpi	r22, 0x02	; 2
 570:	a0 f5       	brcc	.+104    	; 0x5da <MPORT_enuSetPinDirection+0x7c>
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
		// Get the address of the port registers
		MPORT_strPortRegElement_t* Local_strPtrCurrPort =(((MPORT_PORT_REG_BASE_ADD) - (((u8)LOC_u8portNumber) * 3)));
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	f9 01       	movw	r30, r18
 576:	ee 0f       	add	r30, r30
 578:	ff 1f       	adc	r31, r31
 57a:	2e 0f       	add	r18, r30
 57c:	3f 1f       	adc	r19, r31
 57e:	ee 27       	eor	r30, r30
 580:	ff 27       	eor	r31, r31
 582:	e2 1b       	sub	r30, r18
 584:	f3 0b       	sbc	r31, r19
 586:	f9 96       	adiw	r30, 0x39	; 57
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuPinDirection == MPORT_enuPINOUTPUT)// Output 
 588:	61 11       	cpse	r22, r1
 58a:	0e c0       	rjmp	.+28     	; 0x5a8 <MPORT_enuSetPinDirection+0x4a>
		{
			SET_BIT(Local_strPtrCurrPort->DDR,LOC_u8pinNumber);
 58c:	41 81       	ldd	r20, Z+1	; 0x01
 58e:	21 e0       	ldi	r18, 0x01	; 1
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	b9 01       	movw	r22, r18
 594:	02 c0       	rjmp	.+4      	; 0x59a <MPORT_enuSetPinDirection+0x3c>
 596:	66 0f       	add	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	8a 95       	dec	r24
 59c:	e2 f7       	brpl	.-8      	; 0x596 <MPORT_enuSetPinDirection+0x38>
 59e:	cb 01       	movw	r24, r22
 5a0:	84 2b       	or	r24, r20
 5a2:	81 83       	std	Z+1, r24	; 0x01
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	08 95       	ret
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuPinDirection == MPORT_enuPINOUTPUT)// Output 
		{
			SET_BIT(Local_strPtrCurrPort->DDR,LOC_u8pinNumber);
		}
		else if(Copy_enuPinDirection == MPORT_enuPININPUT) // Input 
 5a8:	61 30       	cpi	r22, 0x01	; 1
 5aa:	c9 f4       	brne	.+50     	; 0x5de <MPORT_enuSetPinDirection+0x80>
		{
			CLR_BIT(Local_strPtrCurrPort->DDR ,LOC_u8pinNumber );
 5ac:	41 81       	ldd	r20, Z+1	; 0x01
 5ae:	21 e0       	ldi	r18, 0x01	; 1
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	b9 01       	movw	r22, r18
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <MPORT_enuSetPinDirection+0x5c>
 5b6:	66 0f       	add	r22, r22
 5b8:	77 1f       	adc	r23, r23
 5ba:	8a 95       	dec	r24
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <MPORT_enuSetPinDirection+0x58>
 5be:	cb 01       	movw	r24, r22
 5c0:	80 95       	com	r24
 5c2:	94 2f       	mov	r25, r20
 5c4:	98 23       	and	r25, r24
 5c6:	91 83       	std	Z+1, r25	; 0x01
			CLR_BIT(Local_strPtrCurrPort->PORT,LOC_u8pinNumber);
 5c8:	92 81       	ldd	r25, Z+2	; 0x02
 5ca:	89 23       	and	r24, r25
 5cc:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	08 95       	ret
	u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
	u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
 5d6:	83 e0       	ldi	r24, 0x03	; 3
 5d8:	08 95       	ret
	}
	else if (IS_INVALID_PIN_Direction(Copy_enuPinDirection))
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
 5da:	84 e0       	ldi	r24, 0x04	; 4
 5dc:	08 95       	ret
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 5de:	80 e0       	ldi	r24, 0x00	; 0
	
	}
	return Ret_enuError;
		
		
}
 5e0:	08 95       	ret

000005e2 <MPORT_enuSetPinMode>:
// Function: MPORT_enuSetPinMode
// set alternative mode to the pin.
MPORT_enuErrorStatus_t MPORT_enuSetPinMode( MPORT_enuPinNums_t Copy_enuPinNum  ,  MPORT_enuPinMode_t Copy_enuPinMode )
{
		MPORT_enuErrorStatus_t Ret_enuError= MPORT_enuOK;
		u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
 5e2:	28 2f       	mov	r18, r24
 5e4:	22 95       	swap	r18
 5e6:	2f 70       	andi	r18, 0x0F	; 15
		u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
 5e8:	8f 70       	andi	r24, 0x0F	; 15
		// Validate input parameters
		if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
 5ea:	24 30       	cpi	r18, 0x04	; 4
 5ec:	c8 f5       	brcc	.+114    	; 0x660 <MPORT_enuSetPinMode+0x7e>
		{
			Ret_enuError = MPORT_enuINVALID_PortNum;
			
		}
		else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
 5ee:	88 30       	cpi	r24, 0x08	; 8
 5f0:	c8 f5       	brcc	.+114    	; 0x664 <MPORT_enuSetPinMode+0x82>
		{
			Ret_enuError = MPORT_enuINVALID_PinNum;
		}
		else if (IS_INVALID_PIN_MODE(Copy_enuPinMode))
 5f2:	63 30       	cpi	r22, 0x03	; 3
 5f4:	c8 f5       	brcc	.+114    	; 0x668 <MPORT_enuSetPinMode+0x86>
		}
		else
		{
			Ret_enuError = MPORT_enuOK;
			// Get the address of the port registers
			MPORT_strPortRegElement_t* Local_strPtrCurrPort =(((MPORT_PORT_REG_BASE_ADD) - (((u8)LOC_u8portNumber) * 3)));
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	f9 01       	movw	r30, r18
 5fa:	ee 0f       	add	r30, r30
 5fc:	ff 1f       	adc	r31, r31
 5fe:	2e 0f       	add	r18, r30
 600:	3f 1f       	adc	r19, r31
 602:	ee 27       	eor	r30, r30
 604:	ff 27       	eor	r31, r31
 606:	e2 1b       	sub	r30, r18
 608:	f3 0b       	sbc	r31, r19
 60a:	f9 96       	adiw	r30, 0x39	; 57
			// Configure pin direction and state based on the requested configuration
			if(Copy_enuPinMode == MPORT_enuINPUT_PULL_UP)// pull up
 60c:	61 11       	cpse	r22, r1
 60e:	13 c0       	rjmp	.+38     	; 0x636 <MPORT_enuSetPinMode+0x54>
			{
			    CLR_BIT(Local_strPtrCurrPort->DDR ,LOC_u8pinNumber );
 610:	41 81       	ldd	r20, Z+1	; 0x01
 612:	21 e0       	ldi	r18, 0x01	; 1
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	b9 01       	movw	r22, r18
 618:	02 c0       	rjmp	.+4      	; 0x61e <MPORT_enuSetPinMode+0x3c>
 61a:	66 0f       	add	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	8a 95       	dec	r24
 620:	e2 f7       	brpl	.-8      	; 0x61a <MPORT_enuSetPinMode+0x38>
 622:	cb 01       	movw	r24, r22
 624:	96 2f       	mov	r25, r22
 626:	90 95       	com	r25
 628:	94 23       	and	r25, r20
 62a:	91 83       	std	Z+1, r25	; 0x01
				SET_BIT(Local_strPtrCurrPort->PORT,LOC_u8pinNumber);
 62c:	92 81       	ldd	r25, Z+2	; 0x02
 62e:	89 2b       	or	r24, r25
 630:	82 83       	std	Z+2, r24	; 0x02
		{
			Ret_enuError = MPORT_enuINVALID_PinMode;
		}
		else
		{
			Ret_enuError = MPORT_enuOK;
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	08 95       	ret
			if(Copy_enuPinMode == MPORT_enuINPUT_PULL_UP)// pull up
			{
			    CLR_BIT(Local_strPtrCurrPort->DDR ,LOC_u8pinNumber );
				SET_BIT(Local_strPtrCurrPort->PORT,LOC_u8pinNumber);
			}
			else if(Copy_enuPinMode == MPORT_enuINPUT_PULL_DOWN) // Input with pull-down
 636:	61 30       	cpi	r22, 0x01	; 1
 638:	c9 f4       	brne	.+50     	; 0x66c <MPORT_enuSetPinMode+0x8a>
			{
				CLR_BIT(Local_strPtrCurrPort->DDR ,LOC_u8pinNumber );
 63a:	41 81       	ldd	r20, Z+1	; 0x01
 63c:	21 e0       	ldi	r18, 0x01	; 1
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	b9 01       	movw	r22, r18
 642:	02 c0       	rjmp	.+4      	; 0x648 <MPORT_enuSetPinMode+0x66>
 644:	66 0f       	add	r22, r22
 646:	77 1f       	adc	r23, r23
 648:	8a 95       	dec	r24
 64a:	e2 f7       	brpl	.-8      	; 0x644 <MPORT_enuSetPinMode+0x62>
 64c:	cb 01       	movw	r24, r22
 64e:	80 95       	com	r24
 650:	94 2f       	mov	r25, r20
 652:	98 23       	and	r25, r24
 654:	91 83       	std	Z+1, r25	; 0x01
				CLR_BIT(Local_strPtrCurrPort->PORT,LOC_u8pinNumber);
 656:	92 81       	ldd	r25, Z+2	; 0x02
 658:	89 23       	and	r24, r25
 65a:	82 83       	std	Z+2, r24	; 0x02
		{
			Ret_enuError = MPORT_enuINVALID_PinMode;
		}
		else
		{
			Ret_enuError = MPORT_enuOK;
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	08 95       	ret
		u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
		u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
		// Validate input parameters
		if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
		{
			Ret_enuError = MPORT_enuINVALID_PortNum;
 660:	82 e0       	ldi	r24, 0x02	; 2
 662:	08 95       	ret
			
		}
		else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
		{
			Ret_enuError = MPORT_enuINVALID_PinNum;
 664:	83 e0       	ldi	r24, 0x03	; 3
 666:	08 95       	ret
		}
		else if (IS_INVALID_PIN_MODE(Copy_enuPinMode))
		{
			Ret_enuError = MPORT_enuINVALID_PinMode;
 668:	85 e0       	ldi	r24, 0x05	; 5
 66a:	08 95       	ret
		}
		else
		{
			Ret_enuError = MPORT_enuOK;
 66c:	80 e0       	ldi	r24, 0x00	; 0
			}
			
		}
		return Ret_enuError;
	
}
 66e:	08 95       	ret

00000670 <__umulhisi3>:
 670:	a2 9f       	mul	r26, r18
 672:	b0 01       	movw	r22, r0
 674:	b3 9f       	mul	r27, r19
 676:	c0 01       	movw	r24, r0
 678:	a3 9f       	mul	r26, r19
 67a:	70 0d       	add	r23, r0
 67c:	81 1d       	adc	r24, r1
 67e:	11 24       	eor	r1, r1
 680:	91 1d       	adc	r25, r1
 682:	b2 9f       	mul	r27, r18
 684:	70 0d       	add	r23, r0
 686:	81 1d       	adc	r24, r1
 688:	11 24       	eor	r1, r1
 68a:	91 1d       	adc	r25, r1
 68c:	08 95       	ret

0000068e <_exit>:
 68e:	f8 94       	cli

00000690 <__stop_program>:
 690:	ff cf       	rjmp	.-2      	; 0x690 <__stop_program>
