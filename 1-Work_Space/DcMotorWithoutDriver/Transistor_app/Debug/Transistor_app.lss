
Transistor_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000003fc  00000470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001381  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000992  00000000  00000000  00001965  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006c1  00000000  00000000  000022f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  000029b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e2d  00000000  00000000  00002ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008c0  00000000  00000000  00003901  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000041c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  7a:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <HSWITCH_vSWITCH_init>:

extern HSWITCH_strSWITCHCONFG_t HSWITCH_enuArrSwitchCongf[Num_of_SWITCH];


void HSWITCH_vSWITCH_init(void)
{
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
	HSWITCH_enuErrorStatus_t Ret_enuError = HSWITCH_enuNOK;
	u8 Local_u8_currentPinPort=0;
	u8 Local_u8_i=0;
	for(Local_u8_i =0 ; Local_u8_i < Num_of_SWITCH ; Local_u8_i++)
  8a:	10 e0       	ldi	r17, 0x00	; 0
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <HSWITCH_vSWITCH_init+0x50>
	{
		Local_u8_currentPinPort = ((HSWITCH_enuArrSwitchCongf[Local_u8_i].PORT<<4) + HSWITCH_enuArrSwitchCongf[Local_u8_i].PIN);
  8e:	c1 2f       	mov	r28, r17
  90:	d0 e0       	ldi	r29, 0x00	; 0
  92:	ce 01       	movw	r24, r28
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	c8 0f       	add	r28, r24
  9a:	d9 1f       	adc	r29, r25
  9c:	c0 5a       	subi	r28, 0xA0	; 160
  9e:	df 4f       	sbci	r29, 0xFF	; 255
  a0:	88 81       	ld	r24, Y
  a2:	09 81       	ldd	r16, Y+1	; 0x01
  a4:	90 e1       	ldi	r25, 0x10	; 16
  a6:	89 9f       	mul	r24, r25
  a8:	00 0d       	add	r16, r0
  aa:	11 24       	eor	r1, r1
		MPORT_enuSetPinDirection(Local_u8_currentPinPort , MPORT_enuPININPUT);
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	80 2f       	mov	r24, r16
  b0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <MPORT_enuSetPinDirection>
		if(HSWITCH_enuArrSwitchCongf[Local_u8_i].CONNECTION == HSWITCH_enuPullUP)
  b4:	8a 81       	ldd	r24, Y+2	; 0x02
  b6:	81 11       	cpse	r24, r1
  b8:	05 c0       	rjmp	.+10     	; 0xc4 <HSWITCH_vSWITCH_init+0x42>
		{
			 Ret_enuError = MPORT_enuSetPinMode(Local_u8_currentPinPort ,MPORT_enuINPUT_PULL_UP);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	80 2f       	mov	r24, r16
  be:	0e 94 b5 01 	call	0x36a	; 0x36a <MPORT_enuSetPinMode>
  c2:	06 c0       	rjmp	.+12     	; 0xd0 <HSWITCH_vSWITCH_init+0x4e>
		}
		else if(HSWITCH_enuArrSwitchCongf[Local_u8_i].CONNECTION == HSWITCH_enuPullDown)
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	21 f4       	brne	.+8      	; 0xd0 <HSWITCH_vSWITCH_init+0x4e>
		{
			 Ret_enuError = MPORT_enuSetPinMode(Local_u8_currentPinPort ,MPORT_enuINPUT_PULL_DOWN);
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	80 2f       	mov	r24, r16
  cc:	0e 94 b5 01 	call	0x36a	; 0x36a <MPORT_enuSetPinMode>
void HSWITCH_vSWITCH_init(void)
{
	HSWITCH_enuErrorStatus_t Ret_enuError = HSWITCH_enuNOK;
	u8 Local_u8_currentPinPort=0;
	u8 Local_u8_i=0;
	for(Local_u8_i =0 ; Local_u8_i < Num_of_SWITCH ; Local_u8_i++)
  d0:	1f 5f       	subi	r17, 0xFF	; 255
  d2:	12 30       	cpi	r17, 0x02	; 2
  d4:	e0 f2       	brcs	.-72     	; 0x8e <HSWITCH_vSWITCH_init+0xc>
			Ret_enuError = HSWITCH_enuINVALID_SWITCHConnection;
		}
		
		
	}
}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	0f 91       	pop	r16
  de:	08 95       	ret

000000e0 <HSWITCH_enuGetSwitchState>:
HSWITCH_enuErrorStatus_t HSWITCH_enuGetSwitchState(u8 Copy_u8SwitchName, u8* Add_pu8State)
{
	HSWITCH_enuErrorStatus_t Ret_enuError = HSWITCH_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_SWITCH_NAME(Copy_u8SwitchName))
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	88 f4       	brcc	.+34     	; 0x106 <HSWITCH_enuGetSwitchState+0x26>
	{
		Ret_enuError = HSWITCH_enuINVALID_SwitchName;
		
	}
	else if (IS_INVALID_PTR(Add_pu8State))
  e4:	61 15       	cp	r22, r1
  e6:	71 05       	cpc	r23, r1
  e8:	81 f0       	breq	.+32     	; 0x10a <HSWITCH_enuGetSwitchState+0x2a>
  ea:	ab 01       	movw	r20, r22
		Ret_enuError = HSWITCH_enuNULL_PTR;
	}
	else
	{
		Ret_enuError = HSWITCH_enuOK;
		Ret_enuError =MDIO_enuGetPinValue(HSWITCH_enuArrSwitchCongf[Copy_u8SwitchName].PORT,HSWITCH_enuArrSwitchCongf[Copy_u8SwitchName].PIN,Add_pu8State);
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	ee 0f       	add	r30, r30
  f2:	ff 1f       	adc	r31, r31
  f4:	e8 0f       	add	r30, r24
  f6:	f9 1f       	adc	r31, r25
  f8:	e0 5a       	subi	r30, 0xA0	; 160
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	61 81       	ldd	r22, Z+1	; 0x01
  fe:	80 81       	ld	r24, Z
 100:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <MDIO_enuGetPinValue>
 104:	08 95       	ret
	HSWITCH_enuErrorStatus_t Ret_enuError = HSWITCH_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_SWITCH_NAME(Copy_u8SwitchName))
	{
		Ret_enuError = HSWITCH_enuINVALID_SwitchName;
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	08 95       	ret
		
	}
	else if (IS_INVALID_PTR(Add_pu8State))
	{
		Ret_enuError = HSWITCH_enuNULL_PTR;
 10a:	86 e0       	ldi	r24, 0x06	; 6
		Ret_enuError =MDIO_enuGetPinValue(HSWITCH_enuArrSwitchCongf[Copy_u8SwitchName].PORT,HSWITCH_enuArrSwitchCongf[Copy_u8SwitchName].PIN,Add_pu8State);

	}
	return Ret_enuError;
	
 10c:	08 95       	ret

0000010e <main>:
#include "MPORT.h"
#include "HSWITCH.h"


int main(void)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	00 d0       	rcall	.+0      	; 0x114 <main+0x6>
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
    MPORT_vPortInit(); 
 118:	0e 94 5e 01 	call	0x2bc	; 0x2bc <MPORT_vPortInit>
	HSWITCH_vSWITCH_init();
 11c:	0e 94 41 00 	call	0x82	; 0x82 <HSWITCH_vSWITCH_init>
	
	u8 state1 ,state2 ;
	
    while (1) 
    {
		HSWITCH_enuGetSwitchState(SWITCH1 ,&state1);
 120:	be 01       	movw	r22, r28
 122:	6f 5f       	subi	r22, 0xFF	; 255
 124:	7f 4f       	sbci	r23, 0xFF	; 255
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 70 00 	call	0xe0	; 0xe0 <HSWITCH_enuGetSwitchState>
		HSWITCH_enuGetSwitchState(SWITCH2 ,&state2);
 12c:	be 01       	movw	r22, r28
 12e:	6e 5f       	subi	r22, 0xFE	; 254
 130:	7f 4f       	sbci	r23, 0xFF	; 255
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 70 00 	call	0xe0	; 0xe0 <HSWITCH_enuGetSwitchState>
		if(state1 == 0)
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	81 11       	cpse	r24, r1
 13c:	09 c0       	rjmp	.+18     	; 0x150 <main+0x42>
		{
			MDIO_enuSetPinValue(MDIO_enuPORTA , MDIO_enuPIN0 , MDIO_enuHIGH);
 13e:	41 e0       	ldi	r20, 0x01	; 1
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	0e 94 b5 00 	call	0x16a	; 0x16a <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(MDIO_enuPORTA , MDIO_enuPIN1 , MDIO_enuLOW);
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 b5 00 	call	0x16a	; 0x16a <MDIO_enuSetPinValue>
			
			
		}
		if(state2==0)
 150:	8a 81       	ldd	r24, Y+2	; 0x02
 152:	81 11       	cpse	r24, r1
 154:	e5 cf       	rjmp	.-54     	; 0x120 <main+0x12>
		{
			MDIO_enuSetPinValue(MDIO_enuPORTA , MDIO_enuPIN1 , MDIO_enuHIGH);
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	0e 94 b5 00 	call	0x16a	; 0x16a <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(MDIO_enuPORTA , MDIO_enuPIN0 , MDIO_enuLOW);
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 b5 00 	call	0x16a	; 0x16a <MDIO_enuSetPinValue>
 168:	db cf       	rjmp	.-74     	; 0x120 <main+0x12>

0000016a <MDIO_enuSetPinValue>:
		Local_strPtrCurrPort->PORT = (u8)Copy_enuPortState;
	
	}
	return Ret_enuError;
	
}
 16a:	85 30       	cpi	r24, 0x05	; 5
 16c:	60 f5       	brcc	.+88     	; 0x1c6 <MDIO_enuSetPinValue+0x5c>
 16e:	69 30       	cpi	r22, 0x09	; 9
 170:	60 f5       	brcc	.+88     	; 0x1ca <MDIO_enuSetPinValue+0x60>
 172:	42 30       	cpi	r20, 0x02	; 2
 174:	60 f5       	brcc	.+88     	; 0x1ce <MDIO_enuSetPinValue+0x64>
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	8e 0f       	add	r24, r30
 180:	9f 1f       	adc	r25, r31
 182:	ee 27       	eor	r30, r30
 184:	ff 27       	eor	r31, r31
 186:	e8 1b       	sub	r30, r24
 188:	f9 0b       	sbc	r31, r25
 18a:	f9 96       	adiw	r30, 0x39	; 57
 18c:	41 11       	cpse	r20, r1
 18e:	0d c0       	rjmp	.+26     	; 0x1aa <MDIO_enuSetPinValue+0x40>
 190:	22 81       	ldd	r18, Z+2	; 0x02
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <MDIO_enuSetPinValue+0x32>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <MDIO_enuSetPinValue+0x2e>
 1a0:	80 95       	com	r24
 1a2:	82 23       	and	r24, r18
 1a4:	82 83       	std	Z+2, r24	; 0x02
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	08 95       	ret
 1aa:	41 30       	cpi	r20, 0x01	; 1
 1ac:	91 f4       	brne	.+36     	; 0x1d2 <MDIO_enuSetPinValue+0x68>
 1ae:	22 81       	ldd	r18, Z+2	; 0x02
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <MDIO_enuSetPinValue+0x50>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <MDIO_enuSetPinValue+0x4c>
 1be:	82 2b       	or	r24, r18
 1c0:	82 83       	std	Z+2, r24	; 0x02
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 95       	ret
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	08 95       	ret
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	08 95       	ret
 1ce:	84 e0       	ldi	r24, 0x04	; 4
 1d0:	08 95       	ret
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	08 95       	ret

000001d6 <MDIO_enuGetPinValue>:
{
	
	MDIO_enuErrorStatus_t Ret_enuError = MDIO_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
 1d6:	85 30       	cpi	r24, 0x05	; 5
 1d8:	d8 f4       	brcc	.+54     	; 0x210 <MDIO_enuGetPinValue+0x3a>
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
 1da:	69 30       	cpi	r22, 0x09	; 9
 1dc:	d8 f4       	brcc	.+54     	; 0x214 <MDIO_enuGetPinValue+0x3e>
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PTR(Add_pu8PinValue))
 1de:	41 15       	cp	r20, r1
 1e0:	51 05       	cpc	r21, r1
 1e2:	d1 f0       	breq	.+52     	; 0x218 <MDIO_enuGetPinValue+0x42>
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
		// Get the address of the port registers
		MDIO_strPortRegElement_t* Local_strPtrCurrPort =(((MDIO_PORT_REG_BASE_ADD) - (((u8)Copy_enuPortNum) * 3)));
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	fc 01       	movw	r30, r24
 1e8:	ee 0f       	add	r30, r30
 1ea:	ff 1f       	adc	r31, r31
 1ec:	8e 0f       	add	r24, r30
 1ee:	9f 1f       	adc	r25, r31
 1f0:	ee 27       	eor	r30, r30
 1f2:	ff 27       	eor	r31, r31
 1f4:	e8 1b       	sub	r30, r24
 1f6:	f9 0b       	sbc	r31, r25
		// Read the pin value and store it in the provided pointer
		*Add_pu8PinValue = GET_BIT(Local_strPtrCurrPort->PIN, Copy_enuPinNum);
 1f8:	81 ad       	ldd	r24, Z+57	; 0x39
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <MDIO_enuGetPinValue+0x2c>
 1fe:	95 95       	asr	r25
 200:	87 95       	ror	r24
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <MDIO_enuGetPinValue+0x28>
 206:	81 70       	andi	r24, 0x01	; 1
 208:	fa 01       	movw	r30, r20
 20a:	80 83       	st	Z, r24
	{
		Ret_enuError = MDIO_enuNULL_PTR;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret
	MDIO_enuErrorStatus_t Ret_enuError = MDIO_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
 214:	83 e0       	ldi	r24, 0x03	; 3
 216:	08 95       	ret
	}
	else if (IS_INVALID_PTR(Add_pu8PinValue))
	{
		Ret_enuError = MDIO_enuNULL_PTR;
 218:	86 e0       	ldi	r24, 0x06	; 6
		*Add_pu8PinValue = GET_BIT(Local_strPtrCurrPort->PIN, Copy_enuPinNum);

	}
	return Ret_enuError;
	
}
 21a:	08 95       	ret

0000021c <MPORT_enuSetPinConfigrationHelp>:
MPORT_enuErrorStatus_t MPORT_enuSetPinConfigrationHelp(MPORT_enuPortNum_t Copy_enuPortNum,MPORT_enuPinNum_t Copy_enuPinNum,MPORT_enuConfigration_t Copy_enuConfigration)
{
	
	MPORT_enuErrorStatus_t Ret_enuError= MPORT_enuOK;
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
 21c:	84 30       	cpi	r24, 0x04	; 4
 21e:	08 f0       	brcs	.+2      	; 0x222 <MPORT_enuSetPinConfigrationHelp+0x6>
 220:	45 c0       	rjmp	.+138    	; 0x2ac <MPORT_enuSetPinConfigrationHelp+0x90>
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
 222:	68 30       	cpi	r22, 0x08	; 8
 224:	08 f0       	brcs	.+2      	; 0x228 <MPORT_enuSetPinConfigrationHelp+0xc>
 226:	44 c0       	rjmp	.+136    	; 0x2b0 <MPORT_enuSetPinConfigrationHelp+0x94>
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PIN_CONFIG(Copy_enuConfigration))
 228:	43 30       	cpi	r20, 0x03	; 3
 22a:	08 f0       	brcs	.+2      	; 0x22e <MPORT_enuSetPinConfigrationHelp+0x12>
 22c:	43 c0       	rjmp	.+134    	; 0x2b4 <MPORT_enuSetPinConfigrationHelp+0x98>
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
		// Get the address of the port registers
		MPORT_strPortRegElement_t* Local_strPtrCurrPort =(((MPORT_PORT_REG_BASE_ADD) - (((u8)Copy_enuPortNum) * 3)));
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	fc 01       	movw	r30, r24
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	8e 0f       	add	r24, r30
 238:	9f 1f       	adc	r25, r31
 23a:	ee 27       	eor	r30, r30
 23c:	ff 27       	eor	r31, r31
 23e:	e8 1b       	sub	r30, r24
 240:	f9 0b       	sbc	r31, r25
 242:	f9 96       	adiw	r30, 0x39	; 57
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuConfigration == MPORT_enuOUTPUT)// Output mode
 244:	41 11       	cpse	r20, r1
 246:	0c c0       	rjmp	.+24     	; 0x260 <MPORT_enuSetPinConfigrationHelp+0x44>
		{
			SET_BIT(Local_strPtrCurrPort->DDR,Copy_enuPinNum);
 248:	21 81       	ldd	r18, Z+1	; 0x01
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <MPORT_enuSetPinConfigrationHelp+0x38>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <MPORT_enuSetPinConfigrationHelp+0x34>
 258:	82 2b       	or	r24, r18
 25a:	81 83       	std	Z+1, r24	; 0x01
	{
		Ret_enuError = MPORT_enuINVALID_PinConf;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	08 95       	ret
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuConfigration == MPORT_enuOUTPUT)// Output mode
		{
			SET_BIT(Local_strPtrCurrPort->DDR,Copy_enuPinNum);
		}
		else if(Copy_enuConfigration == MPORT_enuINPUT_PULLUP) // Input with pull-up
 260:	41 30       	cpi	r20, 0x01	; 1
 262:	89 f4       	brne	.+34     	; 0x286 <MPORT_enuSetPinConfigrationHelp+0x6a>
		{
			CLR_BIT(Local_strPtrCurrPort->DDR ,Copy_enuPinNum );
 264:	21 81       	ldd	r18, Z+1	; 0x01
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <MPORT_enuSetPinConfigrationHelp+0x54>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <MPORT_enuSetPinConfigrationHelp+0x50>
 274:	98 2f       	mov	r25, r24
 276:	90 95       	com	r25
 278:	92 23       	and	r25, r18
 27a:	91 83       	std	Z+1, r25	; 0x01
			SET_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
 27c:	92 81       	ldd	r25, Z+2	; 0x02
 27e:	89 2b       	or	r24, r25
 280:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MPORT_enuINVALID_PinConf;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	08 95       	ret
		{
			CLR_BIT(Local_strPtrCurrPort->DDR ,Copy_enuPinNum );
			SET_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
			
		}
		else if(Copy_enuConfigration == MPORT_enuINPUT_PULLDOWN) // Input with pull-down
 286:	42 30       	cpi	r20, 0x02	; 2
 288:	b9 f4       	brne	.+46     	; 0x2b8 <MPORT_enuSetPinConfigrationHelp+0x9c>
		{
			CLR_BIT(Local_strPtrCurrPort->DDR ,Copy_enuPinNum );
 28a:	21 81       	ldd	r18, Z+1	; 0x01
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <MPORT_enuSetPinConfigrationHelp+0x7a>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <MPORT_enuSetPinConfigrationHelp+0x76>
 29a:	80 95       	com	r24
 29c:	92 2f       	mov	r25, r18
 29e:	98 23       	and	r25, r24
 2a0:	91 83       	std	Z+1, r25	; 0x01
			CLR_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum );
 2a2:	92 81       	ldd	r25, Z+2	; 0x02
 2a4:	89 23       	and	r24, r25
 2a6:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MPORT_enuINVALID_PinConf;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	08 95       	ret
	
	MPORT_enuErrorStatus_t Ret_enuError= MPORT_enuOK;
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	08 95       	ret
	}
	else if (IS_INVALID_PIN_CONFIG(Copy_enuConfigration))
	{
		Ret_enuError = MPORT_enuINVALID_PinConf;
 2b4:	86 e0       	ldi	r24, 0x06	; 6
 2b6:	08 95       	ret
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
		}

	}
	return Ret_enuError;
	
}
 2ba:	08 95       	ret

000002bc <MPORT_vPortInit>:


// Function: MPORT_vPortInit
// Initializes all pins in all ports with their configuration based on MPORT_enuArrPinConfig array.
void MPORT_vPortInit(void)
{
 2bc:	cf 93       	push	r28
	u8 Local_u8_i=0;
	MPORT_enuPortNum_t Local_enuCurrentPort = MPORT_enuPORTA ;
	MPORT_enuPinNum_t Local_enuCurrentPin = MPORT_enuPIN0;

	// Loop through all pins in all ports and set their configurations
	for (Local_u8_i = 0; Local_u8_i < (MPORT_NUM_OF_PORTS * MPORT_NUM_OF_PINS); Local_u8_i++)
 2be:	c0 e0       	ldi	r28, 0x00	; 0
 2c0:	0e c0       	rjmp	.+28     	; 0x2de <MPORT_vPortInit+0x22>
	{
		Local_enuCurrentPort = Local_u8_i / MPORT_NUM_OF_PINS ;  // Determine port number
		Local_enuCurrentPin = Local_u8_i % MPORT_NUM_OF_PINS; // Determine pin number
 2c2:	6c 2f       	mov	r22, r28
 2c4:	67 70       	andi	r22, 0x07	; 7
		MPORT_enuSetPinConfigrationHelp(Local_enuCurrentPort ,Local_enuCurrentPin , MPORT_enuArrPinConfig[Local_u8_i] );
 2c6:	ec 2f       	mov	r30, r28
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	ea 59       	subi	r30, 0x9A	; 154
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	40 81       	ld	r20, Z
 2d0:	8c 2f       	mov	r24, r28
 2d2:	86 95       	lsr	r24
 2d4:	86 95       	lsr	r24
 2d6:	86 95       	lsr	r24
 2d8:	0e 94 0e 01 	call	0x21c	; 0x21c <MPORT_enuSetPinConfigrationHelp>
	u8 Local_u8_i=0;
	MPORT_enuPortNum_t Local_enuCurrentPort = MPORT_enuPORTA ;
	MPORT_enuPinNum_t Local_enuCurrentPin = MPORT_enuPIN0;

	// Loop through all pins in all ports and set their configurations
	for (Local_u8_i = 0; Local_u8_i < (MPORT_NUM_OF_PORTS * MPORT_NUM_OF_PINS); Local_u8_i++)
 2dc:	cf 5f       	subi	r28, 0xFF	; 255
 2de:	c0 32       	cpi	r28, 0x20	; 32
 2e0:	80 f3       	brcs	.-32     	; 0x2c2 <MPORT_vPortInit+0x6>
		Local_enuCurrentPin = Local_u8_i % MPORT_NUM_OF_PINS; // Determine pin number
		MPORT_enuSetPinConfigrationHelp(Local_enuCurrentPort ,Local_enuCurrentPin , MPORT_enuArrPinConfig[Local_u8_i] );
		
	}

}
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <MPORT_enuSetPinDirection>:
// Function: MPORT_enuSetPinDirection
// Sets the direction of any pin after the initialization.
MPORT_enuErrorStatus_t MPORT_enuSetPinDirection( MPORT_enuPinNums_t Copy_enuPinNum  ,  MPORT_enuPinDirection_t  Copy_enuPinDirection  )
{
	MPORT_enuErrorStatus_t Ret_enuError= MPORT_enuOK;
	u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
 2e6:	28 2f       	mov	r18, r24
 2e8:	22 95       	swap	r18
 2ea:	2f 70       	andi	r18, 0x0F	; 15
	u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
 2ec:	8f 70       	andi	r24, 0x0F	; 15
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
 2ee:	24 30       	cpi	r18, 0x04	; 4
 2f0:	a0 f5       	brcc	.+104    	; 0x35a <MPORT_enuSetPinDirection+0x74>
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
 2f2:	88 30       	cpi	r24, 0x08	; 8
 2f4:	a0 f5       	brcc	.+104    	; 0x35e <MPORT_enuSetPinDirection+0x78>
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PIN_Direction(Copy_enuPinDirection))
 2f6:	62 30       	cpi	r22, 0x02	; 2
 2f8:	a0 f5       	brcc	.+104    	; 0x362 <MPORT_enuSetPinDirection+0x7c>
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
		// Get the address of the port registers
		MPORT_strPortRegElement_t* Local_strPtrCurrPort =(((MPORT_PORT_REG_BASE_ADD) - (((u8)LOC_u8portNumber) * 3)));
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	f9 01       	movw	r30, r18
 2fe:	ee 0f       	add	r30, r30
 300:	ff 1f       	adc	r31, r31
 302:	2e 0f       	add	r18, r30
 304:	3f 1f       	adc	r19, r31
 306:	ee 27       	eor	r30, r30
 308:	ff 27       	eor	r31, r31
 30a:	e2 1b       	sub	r30, r18
 30c:	f3 0b       	sbc	r31, r19
 30e:	f9 96       	adiw	r30, 0x39	; 57
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuPinDirection == MPORT_enuPINOUTPUT)// Output 
 310:	61 11       	cpse	r22, r1
 312:	0e c0       	rjmp	.+28     	; 0x330 <MPORT_enuSetPinDirection+0x4a>
		{
			SET_BIT(Local_strPtrCurrPort->DDR,LOC_u8pinNumber);
 314:	41 81       	ldd	r20, Z+1	; 0x01
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	b9 01       	movw	r22, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <MPORT_enuSetPinDirection+0x3c>
 31e:	66 0f       	add	r22, r22
 320:	77 1f       	adc	r23, r23
 322:	8a 95       	dec	r24
 324:	e2 f7       	brpl	.-8      	; 0x31e <MPORT_enuSetPinDirection+0x38>
 326:	cb 01       	movw	r24, r22
 328:	84 2b       	or	r24, r20
 32a:	81 83       	std	Z+1, r24	; 0x01
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	08 95       	ret
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuPinDirection == MPORT_enuPINOUTPUT)// Output 
		{
			SET_BIT(Local_strPtrCurrPort->DDR,LOC_u8pinNumber);
		}
		else if(Copy_enuPinDirection == MPORT_enuPININPUT) // Input 
 330:	61 30       	cpi	r22, 0x01	; 1
 332:	c9 f4       	brne	.+50     	; 0x366 <MPORT_enuSetPinDirection+0x80>
		{
			CLR_BIT(Local_strPtrCurrPort->DDR ,LOC_u8pinNumber );
 334:	41 81       	ldd	r20, Z+1	; 0x01
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	b9 01       	movw	r22, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <MPORT_enuSetPinDirection+0x5c>
 33e:	66 0f       	add	r22, r22
 340:	77 1f       	adc	r23, r23
 342:	8a 95       	dec	r24
 344:	e2 f7       	brpl	.-8      	; 0x33e <MPORT_enuSetPinDirection+0x58>
 346:	cb 01       	movw	r24, r22
 348:	80 95       	com	r24
 34a:	94 2f       	mov	r25, r20
 34c:	98 23       	and	r25, r24
 34e:	91 83       	std	Z+1, r25	; 0x01
			CLR_BIT(Local_strPtrCurrPort->PORT,LOC_u8pinNumber);
 350:	92 81       	ldd	r25, Z+2	; 0x02
 352:	89 23       	and	r24, r25
 354:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret
	u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
	u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	08 95       	ret
	}
	else if (IS_INVALID_PIN_Direction(Copy_enuPinDirection))
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
 362:	84 e0       	ldi	r24, 0x04	; 4
 364:	08 95       	ret
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 366:	80 e0       	ldi	r24, 0x00	; 0
	
	}
	return Ret_enuError;
		
		
}
 368:	08 95       	ret

0000036a <MPORT_enuSetPinMode>:
// Function: MPORT_enuSetPinMode
// set alternative mode to the pin.
MPORT_enuErrorStatus_t MPORT_enuSetPinMode( MPORT_enuPinNums_t Copy_enuPinNum  ,  MPORT_enuPinMode_t Copy_enuPinMode )
{
		MPORT_enuErrorStatus_t Ret_enuError= MPORT_enuOK;
		u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
 36a:	28 2f       	mov	r18, r24
 36c:	22 95       	swap	r18
 36e:	2f 70       	andi	r18, 0x0F	; 15
		u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
 370:	8f 70       	andi	r24, 0x0F	; 15
		// Validate input parameters
		if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
 372:	24 30       	cpi	r18, 0x04	; 4
 374:	c8 f5       	brcc	.+114    	; 0x3e8 <MPORT_enuSetPinMode+0x7e>
		{
			Ret_enuError = MPORT_enuINVALID_PortNum;
			
		}
		else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
 376:	88 30       	cpi	r24, 0x08	; 8
 378:	c8 f5       	brcc	.+114    	; 0x3ec <MPORT_enuSetPinMode+0x82>
		{
			Ret_enuError = MPORT_enuINVALID_PinNum;
		}
		else if (IS_INVALID_PIN_MODE(Copy_enuPinMode))
 37a:	63 30       	cpi	r22, 0x03	; 3
 37c:	c8 f5       	brcc	.+114    	; 0x3f0 <MPORT_enuSetPinMode+0x86>
		}
		else
		{
			Ret_enuError = MPORT_enuOK;
			// Get the address of the port registers
			MPORT_strPortRegElement_t* Local_strPtrCurrPort =(((MPORT_PORT_REG_BASE_ADD) - (((u8)LOC_u8portNumber) * 3)));
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	f9 01       	movw	r30, r18
 382:	ee 0f       	add	r30, r30
 384:	ff 1f       	adc	r31, r31
 386:	2e 0f       	add	r18, r30
 388:	3f 1f       	adc	r19, r31
 38a:	ee 27       	eor	r30, r30
 38c:	ff 27       	eor	r31, r31
 38e:	e2 1b       	sub	r30, r18
 390:	f3 0b       	sbc	r31, r19
 392:	f9 96       	adiw	r30, 0x39	; 57
			// Configure pin direction and state based on the requested configuration
			if(Copy_enuPinMode == MPORT_enuINPUT_PULL_UP)// pull up
 394:	61 11       	cpse	r22, r1
 396:	13 c0       	rjmp	.+38     	; 0x3be <MPORT_enuSetPinMode+0x54>
			{
			    CLR_BIT(Local_strPtrCurrPort->DDR ,LOC_u8pinNumber );
 398:	41 81       	ldd	r20, Z+1	; 0x01
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	b9 01       	movw	r22, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <MPORT_enuSetPinMode+0x3c>
 3a2:	66 0f       	add	r22, r22
 3a4:	77 1f       	adc	r23, r23
 3a6:	8a 95       	dec	r24
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <MPORT_enuSetPinMode+0x38>
 3aa:	cb 01       	movw	r24, r22
 3ac:	96 2f       	mov	r25, r22
 3ae:	90 95       	com	r25
 3b0:	94 23       	and	r25, r20
 3b2:	91 83       	std	Z+1, r25	; 0x01
				SET_BIT(Local_strPtrCurrPort->PORT,LOC_u8pinNumber);
 3b4:	92 81       	ldd	r25, Z+2	; 0x02
 3b6:	89 2b       	or	r24, r25
 3b8:	82 83       	std	Z+2, r24	; 0x02
		{
			Ret_enuError = MPORT_enuINVALID_PinMode;
		}
		else
		{
			Ret_enuError = MPORT_enuOK;
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	08 95       	ret
			if(Copy_enuPinMode == MPORT_enuINPUT_PULL_UP)// pull up
			{
			    CLR_BIT(Local_strPtrCurrPort->DDR ,LOC_u8pinNumber );
				SET_BIT(Local_strPtrCurrPort->PORT,LOC_u8pinNumber);
			}
			else if(Copy_enuPinMode == MPORT_enuINPUT_PULL_DOWN) // Input with pull-down
 3be:	61 30       	cpi	r22, 0x01	; 1
 3c0:	c9 f4       	brne	.+50     	; 0x3f4 <MPORT_enuSetPinMode+0x8a>
			{
				CLR_BIT(Local_strPtrCurrPort->DDR ,LOC_u8pinNumber );
 3c2:	41 81       	ldd	r20, Z+1	; 0x01
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	b9 01       	movw	r22, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <MPORT_enuSetPinMode+0x66>
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	8a 95       	dec	r24
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <MPORT_enuSetPinMode+0x62>
 3d4:	cb 01       	movw	r24, r22
 3d6:	80 95       	com	r24
 3d8:	94 2f       	mov	r25, r20
 3da:	98 23       	and	r25, r24
 3dc:	91 83       	std	Z+1, r25	; 0x01
				CLR_BIT(Local_strPtrCurrPort->PORT,LOC_u8pinNumber);
 3de:	92 81       	ldd	r25, Z+2	; 0x02
 3e0:	89 23       	and	r24, r25
 3e2:	82 83       	std	Z+2, r24	; 0x02
		{
			Ret_enuError = MPORT_enuINVALID_PinMode;
		}
		else
		{
			Ret_enuError = MPORT_enuOK;
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	08 95       	ret
		u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
		u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
		// Validate input parameters
		if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
		{
			Ret_enuError = MPORT_enuINVALID_PortNum;
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	08 95       	ret
			
		}
		else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
		{
			Ret_enuError = MPORT_enuINVALID_PinNum;
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	08 95       	ret
		}
		else if (IS_INVALID_PIN_MODE(Copy_enuPinMode))
		{
			Ret_enuError = MPORT_enuINVALID_PinMode;
 3f0:	85 e0       	ldi	r24, 0x05	; 5
 3f2:	08 95       	ret
		}
		else
		{
			Ret_enuError = MPORT_enuOK;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
			}
			
		}
		return Ret_enuError;
	
}
 3f6:	08 95       	ret

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
