
SWITCH_DRIVER_BUILD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000003b2  00000426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016af  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b32  00000000  00000000  00001c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007d4  00000000  00000000  00002789  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00002f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000107d  00000000  00000000  000030b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a7b  00000000  00000000  00004135  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00004bb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
  7a:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <HLED_vLED_init>:

extern HLED_strLedCONFG_t HLED_enuArrLedCongf[Num_of_Led];


void HLED_vLED_init(void)
{
  82:	cf 93       	push	r28
	u8 Local_u8_currentPinPort=0;
	u8 Local_u8_i=0;
	for(Local_u8_i =0 ; Local_u8_i < Num_of_Led ; Local_u8_i++)
  84:	c0 e0       	ldi	r28, 0x00	; 0
  86:	13 c0       	rjmp	.+38     	; 0xae <HLED_vLED_init+0x2c>
	{
		Local_u8_currentPinPort = ((HLED_enuArrLedCongf[Local_u8_i].PORT<<4) + HLED_enuArrLedCongf[Local_u8_i].PIN);
  88:	ec 2f       	mov	r30, r28
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	cf 01       	movw	r24, r30
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	e8 0f       	add	r30, r24
  94:	f9 1f       	adc	r31, r25
  96:	e0 5a       	subi	r30, 0xA0	; 160
  98:	ff 4f       	sbci	r31, 0xFF	; 255
  9a:	90 81       	ld	r25, Z
  9c:	81 81       	ldd	r24, Z+1	; 0x01
		MPORT_enuSetPinDirection(Local_u8_currentPinPort , MPORT_enuPINOUTPUT);
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	20 e1       	ldi	r18, 0x10	; 16
  a2:	92 9f       	mul	r25, r18
  a4:	80 0d       	add	r24, r0
  a6:	11 24       	eor	r1, r1
  a8:	0e 94 85 01 	call	0x30a	; 0x30a <MPORT_enuSetPinDirection>

void HLED_vLED_init(void)
{
	u8 Local_u8_currentPinPort=0;
	u8 Local_u8_i=0;
	for(Local_u8_i =0 ; Local_u8_i < Num_of_Led ; Local_u8_i++)
  ac:	cf 5f       	subi	r28, 0xFF	; 255
  ae:	c2 30       	cpi	r28, 0x02	; 2
  b0:	58 f3       	brcs	.-42     	; 0x88 <HLED_vLED_init+0x6>
		Local_u8_currentPinPort = ((HLED_enuArrLedCongf[Local_u8_i].PORT<<4) + HLED_enuArrLedCongf[Local_u8_i].PIN);
		MPORT_enuSetPinDirection(Local_u8_currentPinPort , MPORT_enuPINOUTPUT);
		
		
	}
}
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <HLED_enuSetLedState>:
HLED_enuErrorStatus_t HLED_enuSetLedState( u8 Copy_u8LedName, HLED_enuState_t Copy_enuState)
{
	MDIO_enuErrorStatus_t Ret_enuError = HLED_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_LED_NAME(Copy_u8LedName))
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	08 f0       	brcs	.+2      	; 0xbc <HLED_enuSetLedState+0x6>
  ba:	50 c0       	rjmp	.+160    	; 0x15c <HLED_enuSetLedState+0xa6>
	{
		Ret_enuError =HLED_enuINVALID_LEDName ;
		
	}
	else if (IS_INVALID_LED_VALUE(Copy_enuState))
  bc:	62 30       	cpi	r22, 0x02	; 2
  be:	08 f0       	brcs	.+2      	; 0xc2 <HLED_enuSetLedState+0xc>
  c0:	4f c0       	rjmp	.+158    	; 0x160 <HLED_enuSetLedState+0xaa>
		Ret_enuError = HLED_enuINVALID_LEDValue;
	}
	else
	{
		Ret_enuError = HLED_enuOK;
		if(HLED_enuArrLedCongf[Copy_u8LedName].CONNECTION == HLED_enuForward)
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	fc 01       	movw	r30, r24
  c6:	ee 0f       	add	r30, r30
  c8:	ff 1f       	adc	r31, r31
  ca:	e8 0f       	add	r30, r24
  cc:	f9 1f       	adc	r31, r25
  ce:	e0 5a       	subi	r30, 0xA0	; 160
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	22 81       	ldd	r18, Z+2	; 0x02
  d4:	21 11       	cpse	r18, r1
  d6:	20 c0       	rjmp	.+64     	; 0x118 <HLED_enuSetLedState+0x62>
		{
			if(Copy_enuState == HLED_enuON)
  d8:	61 11       	cpse	r22, r1
  da:	0e c0       	rjmp	.+28     	; 0xf8 <HLED_enuSetLedState+0x42>
			{
				 Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuHIGH);
  dc:	fc 01       	movw	r30, r24
  de:	ee 0f       	add	r30, r30
  e0:	ff 1f       	adc	r31, r31
  e2:	8e 0f       	add	r24, r30
  e4:	9f 1f       	adc	r25, r31
  e6:	fc 01       	movw	r30, r24
  e8:	e0 5a       	subi	r30, 0xA0	; 160
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	61 81       	ldd	r22, Z+1	; 0x01
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	80 81       	ld	r24, Z
  f2:	0e 94 2c 01 	call	0x258	; 0x258 <MDIO_enuSetPinValue>
  f6:	08 95       	ret
			}
			else if(Copy_enuState == HLED_enuOFF)
  f8:	61 30       	cpi	r22, 0x01	; 1
  fa:	a1 f5       	brne	.+104    	; 0x164 <HLED_enuSetLedState+0xae>
			{
				Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuLOW);
  fc:	fc 01       	movw	r30, r24
  fe:	ee 0f       	add	r30, r30
 100:	ff 1f       	adc	r31, r31
 102:	8e 0f       	add	r24, r30
 104:	9f 1f       	adc	r25, r31
 106:	fc 01       	movw	r30, r24
 108:	e0 5a       	subi	r30, 0xA0	; 160
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	61 81       	ldd	r22, Z+1	; 0x01
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	0e 94 2c 01 	call	0x258	; 0x258 <MDIO_enuSetPinValue>
 116:	08 95       	ret
			}
		}
		else if(HLED_enuArrLedCongf[Copy_u8LedName].CONNECTION == HLED_enuReverse)
 118:	21 30       	cpi	r18, 0x01	; 1
 11a:	31 f5       	brne	.+76     	; 0x168 <HLED_enuSetLedState+0xb2>
		{
			if(Copy_enuState == HLED_enuON)
 11c:	61 11       	cpse	r22, r1
 11e:	0e c0       	rjmp	.+28     	; 0x13c <HLED_enuSetLedState+0x86>
			{
				Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuLOW);
 120:	fc 01       	movw	r30, r24
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	8e 0f       	add	r24, r30
 128:	9f 1f       	adc	r25, r31
 12a:	fc 01       	movw	r30, r24
 12c:	e0 5a       	subi	r30, 0xA0	; 160
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	61 81       	ldd	r22, Z+1	; 0x01
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	0e 94 2c 01 	call	0x258	; 0x258 <MDIO_enuSetPinValue>
 13a:	08 95       	ret
			}
			else if(Copy_enuState == HLED_enuOFF)
 13c:	61 30       	cpi	r22, 0x01	; 1
 13e:	b1 f4       	brne	.+44     	; 0x16c <HLED_enuSetLedState+0xb6>
			{
				Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuHIGH);
 140:	fc 01       	movw	r30, r24
 142:	ee 0f       	add	r30, r30
 144:	ff 1f       	adc	r31, r31
 146:	8e 0f       	add	r24, r30
 148:	9f 1f       	adc	r25, r31
 14a:	fc 01       	movw	r30, r24
 14c:	e0 5a       	subi	r30, 0xA0	; 160
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	61 81       	ldd	r22, Z+1	; 0x01
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	80 81       	ld	r24, Z
 156:	0e 94 2c 01 	call	0x258	; 0x258 <MDIO_enuSetPinValue>
 15a:	08 95       	ret
	MDIO_enuErrorStatus_t Ret_enuError = HLED_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_LED_NAME(Copy_u8LedName))
	{
		Ret_enuError =HLED_enuINVALID_LEDName ;
 15c:	85 e0       	ldi	r24, 0x05	; 5
 15e:	08 95       	ret
		
	}
	else if (IS_INVALID_LED_VALUE(Copy_enuState))
	{
		Ret_enuError = HLED_enuINVALID_LEDValue;
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	08 95       	ret
	}
	else
	{
		Ret_enuError = HLED_enuOK;
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	08 95       	ret
				Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuHIGH);
			}
		}
		else
		{
			Ret_enuError = HLED_enuINVALID_LEDConnection;
 168:	87 e0       	ldi	r24, 0x07	; 7
 16a:	08 95       	ret
	{
		Ret_enuError = HLED_enuINVALID_LEDValue;
	}
	else
	{
		Ret_enuError = HLED_enuOK;
 16c:	80 e0       	ldi	r24, 0x00	; 0
		
	   

	}
	return Ret_enuError;
 16e:	08 95       	ret

00000170 <HSWITCH_vSWITCH_init>:

extern HSWITCH_strSWITCHCONFG_t HSWITCH_enuArrSwitchCongf[Num_of_SWITCH];


void HSWITCH_vSWITCH_init(void)
{
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
	HSWITCH_enuErrorStatus_t Ret_enuError = HSWITCH_enuNOK;
	u8 Local_u8_currentPinPort=0;
	u8 Local_u8_i=0;
	for(Local_u8_i =0 ; Local_u8_i < Num_of_SWITCH ; Local_u8_i++)
 178:	10 e0       	ldi	r17, 0x00	; 0
 17a:	22 c0       	rjmp	.+68     	; 0x1c0 <HSWITCH_vSWITCH_init+0x50>
	{
		Local_u8_currentPinPort = ((HSWITCH_enuArrSwitchCongf[Local_u8_i].PORT<<4) + HSWITCH_enuArrSwitchCongf[Local_u8_i].PIN);
 17c:	c1 2f       	mov	r28, r17
 17e:	d0 e0       	ldi	r29, 0x00	; 0
 180:	ce 01       	movw	r24, r28
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	c8 0f       	add	r28, r24
 188:	d9 1f       	adc	r29, r25
 18a:	ca 59       	subi	r28, 0x9A	; 154
 18c:	df 4f       	sbci	r29, 0xFF	; 255
 18e:	88 81       	ld	r24, Y
 190:	09 81       	ldd	r16, Y+1	; 0x01
 192:	90 e1       	ldi	r25, 0x10	; 16
 194:	89 9f       	mul	r24, r25
 196:	00 0d       	add	r16, r0
 198:	11 24       	eor	r1, r1
		MPORT_enuSetPinDirection(Local_u8_currentPinPort , MPORT_enuPININPUT);
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	80 2f       	mov	r24, r16
 19e:	0e 94 85 01 	call	0x30a	; 0x30a <MPORT_enuSetPinDirection>
		if(HSWITCH_enuArrSwitchCongf[Local_u8_i].CONNECTION == HSWITCH_enuPullUP)
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	81 11       	cpse	r24, r1
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <HSWITCH_vSWITCH_init+0x42>
		{
			 Ret_enuError = MPORT_enuSetPinMode(Local_u8_currentPinPort ,MPORT_enuINPUT_PULL_UP);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	80 2f       	mov	r24, r16
 1ac:	0e 94 c7 01 	call	0x38e	; 0x38e <MPORT_enuSetPinMode>
 1b0:	06 c0       	rjmp	.+12     	; 0x1be <HSWITCH_vSWITCH_init+0x4e>
		}
		else if(HSWITCH_enuArrSwitchCongf[Local_u8_i].CONNECTION == HSWITCH_enuPullDown)
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	21 f4       	brne	.+8      	; 0x1be <HSWITCH_vSWITCH_init+0x4e>
		{
			 Ret_enuError = MPORT_enuSetPinMode(Local_u8_currentPinPort ,MPORT_enuINPUT_PULL_DOWN);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	80 2f       	mov	r24, r16
 1ba:	0e 94 c7 01 	call	0x38e	; 0x38e <MPORT_enuSetPinMode>
void HSWITCH_vSWITCH_init(void)
{
	HSWITCH_enuErrorStatus_t Ret_enuError = HSWITCH_enuNOK;
	u8 Local_u8_currentPinPort=0;
	u8 Local_u8_i=0;
	for(Local_u8_i =0 ; Local_u8_i < Num_of_SWITCH ; Local_u8_i++)
 1be:	1f 5f       	subi	r17, 0xFF	; 255
 1c0:	12 30       	cpi	r17, 0x02	; 2
 1c2:	e0 f2       	brcs	.-72     	; 0x17c <HSWITCH_vSWITCH_init+0xc>
			Ret_enuError = HSWITCH_enuINVALID_SWITCHConnection;
		}
		
		
	}
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	08 95       	ret

000001ce <HSWITCH_enuGetSwitchState>:
HSWITCH_enuErrorStatus_t HSWITCH_enuGetSwitchState(u8 Copy_u8SwitchName, u8* Add_pu8State)
{
	HSWITCH_enuErrorStatus_t Ret_enuError = HSWITCH_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_SWITCH_NAME(Copy_u8SwitchName))
 1ce:	83 30       	cpi	r24, 0x03	; 3
 1d0:	88 f4       	brcc	.+34     	; 0x1f4 <HSWITCH_enuGetSwitchState+0x26>
	{
		Ret_enuError = HSWITCH_enuINVALID_SwitchName;
		
	}
	else if (IS_INVALID_PTR(Add_pu8State))
 1d2:	61 15       	cp	r22, r1
 1d4:	71 05       	cpc	r23, r1
 1d6:	81 f0       	breq	.+32     	; 0x1f8 <HSWITCH_enuGetSwitchState+0x2a>
 1d8:	ab 01       	movw	r20, r22
		Ret_enuError = HSWITCH_enuNULL_PTR;
	}
	else
	{
		Ret_enuError = HSWITCH_enuOK;
		Ret_enuError =MDIO_enuGetPinValue(HSWITCH_enuArrSwitchCongf[Copy_u8SwitchName].PORT,HSWITCH_enuArrSwitchCongf[Copy_u8SwitchName].PIN,Add_pu8State);
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	e8 0f       	add	r30, r24
 1e4:	f9 1f       	adc	r31, r25
 1e6:	ea 59       	subi	r30, 0x9A	; 154
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	61 81       	ldd	r22, Z+1	; 0x01
 1ec:	80 81       	ld	r24, Z
 1ee:	0e 94 62 01 	call	0x2c4	; 0x2c4 <MDIO_enuGetPinValue>
 1f2:	08 95       	ret
	HSWITCH_enuErrorStatus_t Ret_enuError = HSWITCH_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_SWITCH_NAME(Copy_u8SwitchName))
	{
		Ret_enuError = HSWITCH_enuINVALID_SwitchName;
 1f4:	85 e0       	ldi	r24, 0x05	; 5
 1f6:	08 95       	ret
		
	}
	else if (IS_INVALID_PTR(Add_pu8State))
	{
		Ret_enuError = HSWITCH_enuNULL_PTR;
 1f8:	86 e0       	ldi	r24, 0x06	; 6
		Ret_enuError =MDIO_enuGetPinValue(HSWITCH_enuArrSwitchCongf[Copy_u8SwitchName].PORT,HSWITCH_enuArrSwitchCongf[Copy_u8SwitchName].PIN,Add_pu8State);

	}
	return Ret_enuError;
	
 1fa:	08 95       	ret

000001fc <main>:
#define F_CPU 8000000UL
#include <util/delay.h>


int main(void)
{
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	00 d0       	rcall	.+0      	; 0x202 <main+0x6>
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
	HSWITCH_vSWITCH_init();
 206:	0e 94 b8 00 	call	0x170	; 0x170 <HSWITCH_vSWITCH_init>
	HLED_vLED_init();
 20a:	0e 94 41 00 	call	0x82	; 0x82 <HLED_vLED_init>
	u8 result1 =0 , result2 =0 ;
 20e:	19 82       	std	Y+1, r1	; 0x01
 210:	1a 82       	std	Y+2, r1	; 0x02
	while(1)
	{
		HSWITCH_enuGetSwitchState(SWITCH1, &result1);
 212:	be 01       	movw	r22, r28
 214:	6f 5f       	subi	r22, 0xFF	; 255
 216:	7f 4f       	sbci	r23, 0xFF	; 255
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <HSWITCH_enuGetSwitchState>
		HSWITCH_enuGetSwitchState(SWITCH2, &result2);
 21e:	be 01       	movw	r22, r28
 220:	6e 5f       	subi	r22, 0xFE	; 254
 222:	7f 4f       	sbci	r23, 0xFF	; 255
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 e7 00 	call	0x1ce	; 0x1ce <HSWITCH_enuGetSwitchState>
		if(result1 == 0)
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	81 11       	cpse	r24, r1
 22e:	04 c0       	rjmp	.+8      	; 0x238 <main+0x3c>
		{
			HLED_enuSetLedState(Led_start , HLED_enuON);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	0e 94 5b 00 	call	0xb6	; 0xb6 <HLED_enuSetLedState>
 236:	04 c0       	rjmp	.+8      	; 0x240 <main+0x44>
		}
		else
		{
			HLED_enuSetLedState(Led_start , HLED_enuOFF);
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 5b 00 	call	0xb6	; 0xb6 <HLED_enuSetLedState>
		}
		if(result2 == 1)
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	21 f4       	brne	.+8      	; 0x24e <main+0x52>
		{
			HLED_enuSetLedState(Led_stop , HLED_enuON);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	0e 94 5b 00 	call	0xb6	; 0xb6 <HLED_enuSetLedState>
 24c:	e2 cf       	rjmp	.-60     	; 0x212 <main+0x16>
		}
		else
		{
			HLED_enuSetLedState(Led_stop , HLED_enuOFF);
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 5b 00 	call	0xb6	; 0xb6 <HLED_enuSetLedState>
 256:	dd cf       	rjmp	.-70     	; 0x212 <main+0x16>

00000258 <MDIO_enuSetPinValue>:
		Local_strPtrCurrPort->PORT = (u8)Copy_enuPortState;
	
	}
	return Ret_enuError;
	
}
 258:	85 30       	cpi	r24, 0x05	; 5
 25a:	60 f5       	brcc	.+88     	; 0x2b4 <MDIO_enuSetPinValue+0x5c>
 25c:	69 30       	cpi	r22, 0x09	; 9
 25e:	60 f5       	brcc	.+88     	; 0x2b8 <MDIO_enuSetPinValue+0x60>
 260:	42 30       	cpi	r20, 0x02	; 2
 262:	60 f5       	brcc	.+88     	; 0x2bc <MDIO_enuSetPinValue+0x64>
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	fc 01       	movw	r30, r24
 268:	ee 0f       	add	r30, r30
 26a:	ff 1f       	adc	r31, r31
 26c:	8e 0f       	add	r24, r30
 26e:	9f 1f       	adc	r25, r31
 270:	ee 27       	eor	r30, r30
 272:	ff 27       	eor	r31, r31
 274:	e8 1b       	sub	r30, r24
 276:	f9 0b       	sbc	r31, r25
 278:	f9 96       	adiw	r30, 0x39	; 57
 27a:	41 11       	cpse	r20, r1
 27c:	0d c0       	rjmp	.+26     	; 0x298 <MDIO_enuSetPinValue+0x40>
 27e:	22 81       	ldd	r18, Z+2	; 0x02
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <MDIO_enuSetPinValue+0x32>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <MDIO_enuSetPinValue+0x2e>
 28e:	80 95       	com	r24
 290:	82 23       	and	r24, r18
 292:	82 83       	std	Z+2, r24	; 0x02
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	08 95       	ret
 298:	41 30       	cpi	r20, 0x01	; 1
 29a:	91 f4       	brne	.+36     	; 0x2c0 <MDIO_enuSetPinValue+0x68>
 29c:	22 81       	ldd	r18, Z+2	; 0x02
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <MDIO_enuSetPinValue+0x50>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <MDIO_enuSetPinValue+0x4c>
 2ac:	82 2b       	or	r24, r18
 2ae:	82 83       	std	Z+2, r24	; 0x02
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	08 95       	ret
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	08 95       	ret
 2b8:	83 e0       	ldi	r24, 0x03	; 3
 2ba:	08 95       	ret
 2bc:	84 e0       	ldi	r24, 0x04	; 4
 2be:	08 95       	ret
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret

000002c4 <MDIO_enuGetPinValue>:
{
	
	MDIO_enuErrorStatus_t Ret_enuError = MDIO_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
 2c4:	85 30       	cpi	r24, 0x05	; 5
 2c6:	d8 f4       	brcc	.+54     	; 0x2fe <MDIO_enuGetPinValue+0x3a>
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
 2c8:	69 30       	cpi	r22, 0x09	; 9
 2ca:	d8 f4       	brcc	.+54     	; 0x302 <MDIO_enuGetPinValue+0x3e>
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PTR(Add_pu8PinValue))
 2cc:	41 15       	cp	r20, r1
 2ce:	51 05       	cpc	r21, r1
 2d0:	d1 f0       	breq	.+52     	; 0x306 <MDIO_enuGetPinValue+0x42>
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
		// Get the address of the port registers
		MDIO_strPortRegElement_t* Local_strPtrCurrPort =(((MDIO_PORT_REG_BASE_ADD) - (((u8)Copy_enuPortNum) * 3)));
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	fc 01       	movw	r30, r24
 2d6:	ee 0f       	add	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	8e 0f       	add	r24, r30
 2dc:	9f 1f       	adc	r25, r31
 2de:	ee 27       	eor	r30, r30
 2e0:	ff 27       	eor	r31, r31
 2e2:	e8 1b       	sub	r30, r24
 2e4:	f9 0b       	sbc	r31, r25
		// Read the pin value and store it in the provided pointer
		*Add_pu8PinValue = GET_BIT(Local_strPtrCurrPort->PIN, Copy_enuPinNum);
 2e6:	81 ad       	ldd	r24, Z+57	; 0x39
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <MDIO_enuGetPinValue+0x2c>
 2ec:	95 95       	asr	r25
 2ee:	87 95       	ror	r24
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <MDIO_enuGetPinValue+0x28>
 2f4:	81 70       	andi	r24, 0x01	; 1
 2f6:	fa 01       	movw	r30, r20
 2f8:	80 83       	st	Z, r24
	{
		Ret_enuError = MDIO_enuNULL_PTR;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	08 95       	ret
	MDIO_enuErrorStatus_t Ret_enuError = MDIO_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
 302:	83 e0       	ldi	r24, 0x03	; 3
 304:	08 95       	ret
	}
	else if (IS_INVALID_PTR(Add_pu8PinValue))
	{
		Ret_enuError = MDIO_enuNULL_PTR;
 306:	86 e0       	ldi	r24, 0x06	; 6
		*Add_pu8PinValue = GET_BIT(Local_strPtrCurrPort->PIN, Copy_enuPinNum);

	}
	return Ret_enuError;
	
}
 308:	08 95       	ret

0000030a <MPORT_enuSetPinDirection>:
// Function: MPORT_enuSetPinDirection
// Sets the direction of any pin after the initialization.
MPORT_enuErrorStatus_t MPORT_enuSetPinDirection( MPORT_enuPinNums_t Copy_enuPinNum  ,  MPORT_enuPinDirection_t  Copy_enuPinDirection  )
{
	MPORT_enuErrorStatus_t Ret_enuError= MPORT_enuOK;
	u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
 30a:	28 2f       	mov	r18, r24
 30c:	22 95       	swap	r18
 30e:	2f 70       	andi	r18, 0x0F	; 15
	u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
 310:	8f 70       	andi	r24, 0x0F	; 15
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
 312:	24 30       	cpi	r18, 0x04	; 4
 314:	a0 f5       	brcc	.+104    	; 0x37e <MPORT_enuSetPinDirection+0x74>
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
 316:	88 30       	cpi	r24, 0x08	; 8
 318:	a0 f5       	brcc	.+104    	; 0x382 <MPORT_enuSetPinDirection+0x78>
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PIN_Direction(Copy_enuPinDirection))
 31a:	62 30       	cpi	r22, 0x02	; 2
 31c:	a0 f5       	brcc	.+104    	; 0x386 <MPORT_enuSetPinDirection+0x7c>
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
		// Get the address of the port registers
		MPORT_strPortRegElement_t* Local_strPtrCurrPort =(((MPORT_PORT_REG_BASE_ADD) - (((u8)LOC_u8portNumber) * 3)));
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	f9 01       	movw	r30, r18
 322:	ee 0f       	add	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	2e 0f       	add	r18, r30
 328:	3f 1f       	adc	r19, r31
 32a:	ee 27       	eor	r30, r30
 32c:	ff 27       	eor	r31, r31
 32e:	e2 1b       	sub	r30, r18
 330:	f3 0b       	sbc	r31, r19
 332:	f9 96       	adiw	r30, 0x39	; 57
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuPinDirection == MPORT_enuPINOUTPUT)// Output 
 334:	61 11       	cpse	r22, r1
 336:	0e c0       	rjmp	.+28     	; 0x354 <MPORT_enuSetPinDirection+0x4a>
		{
			SET_BIT(Local_strPtrCurrPort->DDR,LOC_u8pinNumber);
 338:	41 81       	ldd	r20, Z+1	; 0x01
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	b9 01       	movw	r22, r18
 340:	02 c0       	rjmp	.+4      	; 0x346 <MPORT_enuSetPinDirection+0x3c>
 342:	66 0f       	add	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	8a 95       	dec	r24
 348:	e2 f7       	brpl	.-8      	; 0x342 <MPORT_enuSetPinDirection+0x38>
 34a:	cb 01       	movw	r24, r22
 34c:	84 2b       	or	r24, r20
 34e:	81 83       	std	Z+1, r24	; 0x01
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	08 95       	ret
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuPinDirection == MPORT_enuPINOUTPUT)// Output 
		{
			SET_BIT(Local_strPtrCurrPort->DDR,LOC_u8pinNumber);
		}
		else if(Copy_enuPinDirection == MPORT_enuPININPUT) // Input 
 354:	61 30       	cpi	r22, 0x01	; 1
 356:	c9 f4       	brne	.+50     	; 0x38a <MPORT_enuSetPinDirection+0x80>
		{
			CLR_BIT(Local_strPtrCurrPort->DDR ,LOC_u8pinNumber );
 358:	41 81       	ldd	r20, Z+1	; 0x01
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	b9 01       	movw	r22, r18
 360:	02 c0       	rjmp	.+4      	; 0x366 <MPORT_enuSetPinDirection+0x5c>
 362:	66 0f       	add	r22, r22
 364:	77 1f       	adc	r23, r23
 366:	8a 95       	dec	r24
 368:	e2 f7       	brpl	.-8      	; 0x362 <MPORT_enuSetPinDirection+0x58>
 36a:	cb 01       	movw	r24, r22
 36c:	80 95       	com	r24
 36e:	94 2f       	mov	r25, r20
 370:	98 23       	and	r25, r24
 372:	91 83       	std	Z+1, r25	; 0x01
			CLR_BIT(Local_strPtrCurrPort->PORT,LOC_u8pinNumber);
 374:	92 81       	ldd	r25, Z+2	; 0x02
 376:	89 23       	and	r24, r25
 378:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	08 95       	ret
	u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
	u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	08 95       	ret
	}
	else if (IS_INVALID_PIN_Direction(Copy_enuPinDirection))
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
 386:	84 e0       	ldi	r24, 0x04	; 4
 388:	08 95       	ret
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 38a:	80 e0       	ldi	r24, 0x00	; 0
	
	}
	return Ret_enuError;
		
		
}
 38c:	08 95       	ret

0000038e <MPORT_enuSetPinMode>:
// set alternative mode to the pin.
MPORT_enuErrorStatus_t MPORT_enuSetPinMode( MPORT_enuPinNums_t Copy_enuPinNum  ,  MPORT_enuPinMode_t Copy_enuPinMode )
{
		MPORT_enuErrorStatus_t Ret_enuError= MPORT_enuOK;
		u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
		u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
 38e:	98 2f       	mov	r25, r24
 390:	9f 70       	andi	r25, 0x0F	; 15
		// Validate input parameters
		if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
 392:	80 34       	cpi	r24, 0x40	; 64
 394:	30 f4       	brcc	.+12     	; 0x3a2 <MPORT_enuSetPinMode+0x14>
		{
			Ret_enuError = MPORT_enuINVALID_PortNum;
			
		}
		else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
 396:	98 30       	cpi	r25, 0x08	; 8
 398:	30 f4       	brcc	.+12     	; 0x3a6 <MPORT_enuSetPinMode+0x18>
		{
			Ret_enuError = MPORT_enuINVALID_PinNum;
		}
		else if (IS_INVALID_PIN_MODE(Copy_enuPinMode))
 39a:	63 30       	cpi	r22, 0x03	; 3
 39c:	30 f0       	brcs	.+12     	; 0x3aa <MPORT_enuSetPinMode+0x1c>
		{
			Ret_enuError = MPORT_enuINVALID_PinMode;
 39e:	85 e0       	ldi	r24, 0x05	; 5
 3a0:	08 95       	ret
		u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
		u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
		// Validate input parameters
		if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
		{
			Ret_enuError = MPORT_enuINVALID_PortNum;
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	08 95       	ret
			
		}
		else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
		{
			Ret_enuError = MPORT_enuINVALID_PinNum;
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	08 95       	ret
		{
			Ret_enuError = MPORT_enuINVALID_PinMode;
		}
		else
		{
			Ret_enuError = MPORT_enuOK;
 3aa:	80 e0       	ldi	r24, 0x00	; 0
			}
			
		}
		return Ret_enuError;
	
}
 3ac:	08 95       	ret

000003ae <_exit>:
 3ae:	f8 94       	cli

000003b0 <__stop_program>:
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <__stop_program>
