
Timer1_Driver_Build.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  000014e8  0000157c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000a8  008000a8  000015c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003400  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ed5  00000000  00000000  00004c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013b4  00000000  00000000  00005b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c0  00000000  00000000  00006eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001923  00000000  00000000  000074ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002676  00000000  00000000  00008dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000b445  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__vector_7>
      20:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__vector_8>
      24:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3c       	cpi	r26, 0xC2	; 194
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 58 04 	call	0x8b0	; 0x8b0 <main>
      8a:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GIE_VoidEnable>:
#include "GIE_private.h"
#include "GIE.h"

void GIE_VoidEnable(void)
{
	SET_BIT(SREG , I_bit);
      92:	8f b7       	in	r24, 0x3f	; 63
      94:	80 68       	ori	r24, 0x80	; 128
      96:	8f bf       	out	0x3f, r24	; 63
      98:	08 95       	ret

0000009a <HLCD_enuLCD_WriteCommand>:
		}
	}
	return Ret_enuError ;


}
      9a:	ff 92       	push	r15
      9c:	0f 93       	push	r16
      9e:	1f 93       	push	r17
      a0:	cf 93       	push	r28
      a2:	df 93       	push	r29
      a4:	83 30       	cpi	r24, 0x03	; 3
      a6:	08 f0       	brcs	.+2      	; 0xaa <HLCD_enuLCD_WriteCommand+0x10>
      a8:	d8 c0       	rjmp	.+432    	; 0x25a <HLCD_enuLCD_WriteCommand+0x1c0>
      aa:	f6 2e       	mov	r15, r22
      ac:	c8 2f       	mov	r28, r24
      ae:	d0 e0       	ldi	r29, 0x00	; 0
      b0:	8e e1       	ldi	r24, 0x1E	; 30
      b2:	8c 9f       	mul	r24, r28
      b4:	80 01       	movw	r16, r0
      b6:	8d 9f       	mul	r24, r29
      b8:	10 0d       	add	r17, r0
      ba:	11 24       	eor	r1, r1
      bc:	00 5a       	subi	r16, 0xA0	; 160
      be:	1f 4f       	sbci	r17, 0xFF	; 255
      c0:	f8 01       	movw	r30, r16
      c2:	63 8d       	ldd	r22, Z+27	; 0x1b
      c4:	40 e0       	ldi	r20, 0x00	; 0
      c6:	82 8d       	ldd	r24, Z+26	; 0x1a
      c8:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
      cc:	f8 01       	movw	r30, r16
      ce:	61 8d       	ldd	r22, Z+25	; 0x19
      d0:	40 e0       	ldi	r20, 0x00	; 0
      d2:	80 8d       	ldd	r24, Z+24	; 0x18
      d4:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
      d8:	f8 01       	movw	r30, r16
      da:	80 81       	ld	r24, Z
      dc:	81 30       	cpi	r24, 0x01	; 1
      de:	09 f0       	breq	.+2      	; 0xe2 <HLCD_enuLCD_WriteCommand+0x48>
      e0:	41 c0       	rjmp	.+130    	; 0x164 <HLCD_enuLCD_WriteCommand+0xca>
      e2:	8f 01       	movw	r16, r30
      e4:	61 85       	ldd	r22, Z+9	; 0x09
      e6:	4f 2d       	mov	r20, r15
      e8:	41 70       	andi	r20, 0x01	; 1
      ea:	80 85       	ldd	r24, Z+8	; 0x08
      ec:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
      f0:	f8 01       	movw	r30, r16
      f2:	63 85       	ldd	r22, Z+11	; 0x0b
      f4:	f1 fa       	bst	r15, 1
      f6:	44 27       	eor	r20, r20
      f8:	40 f9       	bld	r20, 0
      fa:	82 85       	ldd	r24, Z+10	; 0x0a
      fc:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     100:	f8 01       	movw	r30, r16
     102:	65 85       	ldd	r22, Z+13	; 0x0d
     104:	f2 fa       	bst	r15, 2
     106:	44 27       	eor	r20, r20
     108:	40 f9       	bld	r20, 0
     10a:	84 85       	ldd	r24, Z+12	; 0x0c
     10c:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     110:	f8 01       	movw	r30, r16
     112:	67 85       	ldd	r22, Z+15	; 0x0f
     114:	f3 fa       	bst	r15, 3
     116:	44 27       	eor	r20, r20
     118:	40 f9       	bld	r20, 0
     11a:	86 85       	ldd	r24, Z+14	; 0x0e
     11c:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     120:	f8 01       	movw	r30, r16
     122:	61 89       	ldd	r22, Z+17	; 0x11
     124:	f4 fa       	bst	r15, 4
     126:	44 27       	eor	r20, r20
     128:	40 f9       	bld	r20, 0
     12a:	80 89       	ldd	r24, Z+16	; 0x10
     12c:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     130:	f8 01       	movw	r30, r16
     132:	63 89       	ldd	r22, Z+19	; 0x13
     134:	f5 fa       	bst	r15, 5
     136:	44 27       	eor	r20, r20
     138:	40 f9       	bld	r20, 0
     13a:	82 89       	ldd	r24, Z+18	; 0x12
     13c:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     140:	f8 01       	movw	r30, r16
     142:	65 89       	ldd	r22, Z+21	; 0x15
     144:	f6 fa       	bst	r15, 6
     146:	44 27       	eor	r20, r20
     148:	40 f9       	bld	r20, 0
     14a:	84 89       	ldd	r24, Z+20	; 0x14
     14c:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     150:	f8 01       	movw	r30, r16
     152:	67 89       	ldd	r22, Z+23	; 0x17
     154:	4f 2d       	mov	r20, r15
     156:	44 1f       	adc	r20, r20
     158:	44 27       	eor	r20, r20
     15a:	44 1f       	adc	r20, r20
     15c:	86 89       	ldd	r24, Z+22	; 0x16
     15e:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     162:	5e c0       	rjmp	.+188    	; 0x220 <HLCD_enuLCD_WriteCommand+0x186>
     164:	81 11       	cpse	r24, r1
     166:	5c c0       	rjmp	.+184    	; 0x220 <HLCD_enuLCD_WriteCommand+0x186>
     168:	8e e1       	ldi	r24, 0x1E	; 30
     16a:	8c 9f       	mul	r24, r28
     16c:	80 01       	movw	r16, r0
     16e:	8d 9f       	mul	r24, r29
     170:	10 0d       	add	r17, r0
     172:	11 24       	eor	r1, r1
     174:	00 5a       	subi	r16, 0xA0	; 160
     176:	1f 4f       	sbci	r17, 0xFF	; 255
     178:	f8 01       	movw	r30, r16
     17a:	61 89       	ldd	r22, Z+17	; 0x11
     17c:	f4 fa       	bst	r15, 4
     17e:	44 27       	eor	r20, r20
     180:	40 f9       	bld	r20, 0
     182:	80 89       	ldd	r24, Z+16	; 0x10
     184:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     188:	f8 01       	movw	r30, r16
     18a:	63 89       	ldd	r22, Z+19	; 0x13
     18c:	f5 fa       	bst	r15, 5
     18e:	44 27       	eor	r20, r20
     190:	40 f9       	bld	r20, 0
     192:	82 89       	ldd	r24, Z+18	; 0x12
     194:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     198:	f8 01       	movw	r30, r16
     19a:	65 89       	ldd	r22, Z+21	; 0x15
     19c:	f6 fa       	bst	r15, 6
     19e:	44 27       	eor	r20, r20
     1a0:	40 f9       	bld	r20, 0
     1a2:	84 89       	ldd	r24, Z+20	; 0x14
     1a4:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     1a8:	f8 01       	movw	r30, r16
     1aa:	67 89       	ldd	r22, Z+23	; 0x17
     1ac:	4f 2d       	mov	r20, r15
     1ae:	44 1f       	adc	r20, r20
     1b0:	44 27       	eor	r20, r20
     1b2:	44 1f       	adc	r20, r20
     1b4:	86 89       	ldd	r24, Z+22	; 0x16
     1b6:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     1ba:	f8 01       	movw	r30, r16
     1bc:	65 8d       	ldd	r22, Z+29	; 0x1d
     1be:	41 e0       	ldi	r20, 0x01	; 1
     1c0:	84 8d       	ldd	r24, Z+28	; 0x1c
     1c2:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     1c6:	f2 e0       	ldi	r31, 0x02	; 2
     1c8:	fa 95       	dec	r31
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <HLCD_enuLCD_WriteCommand+0x12e>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <HLCD_enuLCD_WriteCommand+0x134>
     1ce:	f8 01       	movw	r30, r16
     1d0:	65 8d       	ldd	r22, Z+29	; 0x1d
     1d2:	40 e0       	ldi	r20, 0x00	; 0
     1d4:	84 8d       	ldd	r24, Z+28	; 0x1c
     1d6:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     1da:	f2 e0       	ldi	r31, 0x02	; 2
     1dc:	fa 95       	dec	r31
     1de:	f1 f7       	brne	.-4      	; 0x1dc <HLCD_enuLCD_WriteCommand+0x142>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <HLCD_enuLCD_WriteCommand+0x148>
     1e2:	f8 01       	movw	r30, r16
     1e4:	61 89       	ldd	r22, Z+17	; 0x11
     1e6:	4f 2d       	mov	r20, r15
     1e8:	41 70       	andi	r20, 0x01	; 1
     1ea:	80 89       	ldd	r24, Z+16	; 0x10
     1ec:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     1f0:	f8 01       	movw	r30, r16
     1f2:	63 89       	ldd	r22, Z+19	; 0x13
     1f4:	f1 fa       	bst	r15, 1
     1f6:	44 27       	eor	r20, r20
     1f8:	40 f9       	bld	r20, 0
     1fa:	82 89       	ldd	r24, Z+18	; 0x12
     1fc:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     200:	f8 01       	movw	r30, r16
     202:	65 89       	ldd	r22, Z+21	; 0x15
     204:	f2 fa       	bst	r15, 2
     206:	44 27       	eor	r20, r20
     208:	40 f9       	bld	r20, 0
     20a:	84 89       	ldd	r24, Z+20	; 0x14
     20c:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     210:	f8 01       	movw	r30, r16
     212:	67 89       	ldd	r22, Z+23	; 0x17
     214:	f3 fa       	bst	r15, 3
     216:	44 27       	eor	r20, r20
     218:	40 f9       	bld	r20, 0
     21a:	86 89       	ldd	r24, Z+22	; 0x16
     21c:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     220:	2e e1       	ldi	r18, 0x1E	; 30
     222:	2c 9f       	mul	r18, r28
     224:	c0 01       	movw	r24, r0
     226:	2d 9f       	mul	r18, r29
     228:	90 0d       	add	r25, r0
     22a:	11 24       	eor	r1, r1
     22c:	ec 01       	movw	r28, r24
     22e:	c0 5a       	subi	r28, 0xA0	; 160
     230:	df 4f       	sbci	r29, 0xFF	; 255
     232:	6d 8d       	ldd	r22, Y+29	; 0x1d
     234:	41 e0       	ldi	r20, 0x01	; 1
     236:	8c 8d       	ldd	r24, Y+28	; 0x1c
     238:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     23c:	f2 e0       	ldi	r31, 0x02	; 2
     23e:	fa 95       	dec	r31
     240:	f1 f7       	brne	.-4      	; 0x23e <HLCD_enuLCD_WriteCommand+0x1a4>
     242:	00 c0       	rjmp	.+0      	; 0x244 <HLCD_enuLCD_WriteCommand+0x1aa>
     244:	6d 8d       	ldd	r22, Y+29	; 0x1d
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	8c 8d       	ldd	r24, Y+28	; 0x1c
     24a:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     24e:	82 e0       	ldi	r24, 0x02	; 2
     250:	8a 95       	dec	r24
     252:	f1 f7       	brne	.-4      	; 0x250 <HLCD_enuLCD_WriteCommand+0x1b6>
     254:	00 c0       	rjmp	.+0      	; 0x256 <HLCD_enuLCD_WriteCommand+0x1bc>
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	01 c0       	rjmp	.+2      	; 0x25c <HLCD_enuLCD_WriteCommand+0x1c2>
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	1f 91       	pop	r17
     262:	0f 91       	pop	r16
     264:	ff 90       	pop	r15
     266:	08 95       	ret

00000268 <HLCD_vLCD_ClearDisplay>:
     268:	61 e0       	ldi	r22, 0x01	; 1
     26a:	0e 94 4d 00 	call	0x9a	; 0x9a <HLCD_enuLCD_WriteCommand>
     26e:	08 95       	ret

00000270 <HLCD_vLCD_init>:
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	c0 e0       	ldi	r28, 0x00	; 0
     27a:	d0 e0       	ldi	r29, 0x00	; 0
     27c:	50 c1       	rjmp	.+672    	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
     27e:	2f eb       	ldi	r18, 0xBF	; 191
     280:	8a ed       	ldi	r24, 0xDA	; 218
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	21 50       	subi	r18, 0x01	; 1
     286:	80 40       	sbci	r24, 0x00	; 0
     288:	90 40       	sbci	r25, 0x00	; 0
     28a:	e1 f7       	brne	.-8      	; 0x284 <HLCD_vLCD_init+0x14>
     28c:	00 c0       	rjmp	.+0      	; 0x28e <HLCD_vLCD_init+0x1e>
     28e:	00 00       	nop
     290:	8e e1       	ldi	r24, 0x1E	; 30
     292:	8c 9f       	mul	r24, r28
     294:	f0 01       	movw	r30, r0
     296:	8d 9f       	mul	r24, r29
     298:	f0 0d       	add	r31, r0
     29a:	11 24       	eor	r1, r1
     29c:	e0 5a       	subi	r30, 0xA0	; 160
     29e:	ff 4f       	sbci	r31, 0xFF	; 255
     2a0:	80 81       	ld	r24, Z
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <HLCD_vLCD_init+0x38>
     2a6:	70 c0       	rjmp	.+224    	; 0x388 <HLCD_vLCD_init+0x118>
     2a8:	8f 01       	movw	r16, r30
     2aa:	90 85       	ldd	r25, Z+8	; 0x08
     2ac:	81 85       	ldd	r24, Z+9	; 0x09
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	f0 e1       	ldi	r31, 0x10	; 16
     2b2:	9f 9f       	mul	r25, r31
     2b4:	80 0d       	add	r24, r0
     2b6:	11 24       	eor	r1, r1
     2b8:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     2bc:	f8 01       	movw	r30, r16
     2be:	92 85       	ldd	r25, Z+10	; 0x0a
     2c0:	83 85       	ldd	r24, Z+11	; 0x0b
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	f0 e1       	ldi	r31, 0x10	; 16
     2c6:	9f 9f       	mul	r25, r31
     2c8:	80 0d       	add	r24, r0
     2ca:	11 24       	eor	r1, r1
     2cc:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     2d0:	f8 01       	movw	r30, r16
     2d2:	94 85       	ldd	r25, Z+12	; 0x0c
     2d4:	85 85       	ldd	r24, Z+13	; 0x0d
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	f0 e1       	ldi	r31, 0x10	; 16
     2da:	9f 9f       	mul	r25, r31
     2dc:	80 0d       	add	r24, r0
     2de:	11 24       	eor	r1, r1
     2e0:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     2e4:	f8 01       	movw	r30, r16
     2e6:	96 85       	ldd	r25, Z+14	; 0x0e
     2e8:	87 85       	ldd	r24, Z+15	; 0x0f
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	f0 e1       	ldi	r31, 0x10	; 16
     2ee:	9f 9f       	mul	r25, r31
     2f0:	80 0d       	add	r24, r0
     2f2:	11 24       	eor	r1, r1
     2f4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     2f8:	f8 01       	movw	r30, r16
     2fa:	90 89       	ldd	r25, Z+16	; 0x10
     2fc:	81 89       	ldd	r24, Z+17	; 0x11
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	f0 e1       	ldi	r31, 0x10	; 16
     302:	9f 9f       	mul	r25, r31
     304:	80 0d       	add	r24, r0
     306:	11 24       	eor	r1, r1
     308:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     30c:	f8 01       	movw	r30, r16
     30e:	92 89       	ldd	r25, Z+18	; 0x12
     310:	83 89       	ldd	r24, Z+19	; 0x13
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	f0 e1       	ldi	r31, 0x10	; 16
     316:	9f 9f       	mul	r25, r31
     318:	80 0d       	add	r24, r0
     31a:	11 24       	eor	r1, r1
     31c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     320:	f8 01       	movw	r30, r16
     322:	94 89       	ldd	r25, Z+20	; 0x14
     324:	85 89       	ldd	r24, Z+21	; 0x15
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	f0 e1       	ldi	r31, 0x10	; 16
     32a:	9f 9f       	mul	r25, r31
     32c:	80 0d       	add	r24, r0
     32e:	11 24       	eor	r1, r1
     330:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     334:	f8 01       	movw	r30, r16
     336:	96 89       	ldd	r25, Z+22	; 0x16
     338:	87 89       	ldd	r24, Z+23	; 0x17
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	f0 e1       	ldi	r31, 0x10	; 16
     33e:	9f 9f       	mul	r25, r31
     340:	80 0d       	add	r24, r0
     342:	11 24       	eor	r1, r1
     344:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     348:	f8 01       	movw	r30, r16
     34a:	90 8d       	ldd	r25, Z+24	; 0x18
     34c:	81 8d       	ldd	r24, Z+25	; 0x19
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	f0 e1       	ldi	r31, 0x10	; 16
     352:	9f 9f       	mul	r25, r31
     354:	80 0d       	add	r24, r0
     356:	11 24       	eor	r1, r1
     358:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     35c:	f8 01       	movw	r30, r16
     35e:	92 8d       	ldd	r25, Z+26	; 0x1a
     360:	83 8d       	ldd	r24, Z+27	; 0x1b
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	f0 e1       	ldi	r31, 0x10	; 16
     366:	9f 9f       	mul	r25, r31
     368:	80 0d       	add	r24, r0
     36a:	11 24       	eor	r1, r1
     36c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     370:	f8 01       	movw	r30, r16
     372:	94 8d       	ldd	r25, Z+28	; 0x1c
     374:	85 8d       	ldd	r24, Z+29	; 0x1d
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	f0 e1       	ldi	r31, 0x10	; 16
     37a:	9f 9f       	mul	r25, r31
     37c:	80 0d       	add	r24, r0
     37e:	11 24       	eor	r1, r1
     380:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     384:	60 e3       	ldi	r22, 0x30	; 48
     386:	57 c0       	rjmp	.+174    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     388:	81 11       	cpse	r24, r1
     38a:	54 c0       	rjmp	.+168    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     38c:	8e e1       	ldi	r24, 0x1E	; 30
     38e:	8c 9f       	mul	r24, r28
     390:	80 01       	movw	r16, r0
     392:	8d 9f       	mul	r24, r29
     394:	10 0d       	add	r17, r0
     396:	11 24       	eor	r1, r1
     398:	00 5a       	subi	r16, 0xA0	; 160
     39a:	1f 4f       	sbci	r17, 0xFF	; 255
     39c:	f8 01       	movw	r30, r16
     39e:	90 89       	ldd	r25, Z+16	; 0x10
     3a0:	81 89       	ldd	r24, Z+17	; 0x11
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	f0 e1       	ldi	r31, 0x10	; 16
     3a6:	9f 9f       	mul	r25, r31
     3a8:	80 0d       	add	r24, r0
     3aa:	11 24       	eor	r1, r1
     3ac:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     3b0:	f8 01       	movw	r30, r16
     3b2:	92 89       	ldd	r25, Z+18	; 0x12
     3b4:	83 89       	ldd	r24, Z+19	; 0x13
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	f0 e1       	ldi	r31, 0x10	; 16
     3ba:	9f 9f       	mul	r25, r31
     3bc:	80 0d       	add	r24, r0
     3be:	11 24       	eor	r1, r1
     3c0:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     3c4:	f8 01       	movw	r30, r16
     3c6:	94 89       	ldd	r25, Z+20	; 0x14
     3c8:	85 89       	ldd	r24, Z+21	; 0x15
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	f0 e1       	ldi	r31, 0x10	; 16
     3ce:	9f 9f       	mul	r25, r31
     3d0:	80 0d       	add	r24, r0
     3d2:	11 24       	eor	r1, r1
     3d4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     3d8:	f8 01       	movw	r30, r16
     3da:	96 89       	ldd	r25, Z+22	; 0x16
     3dc:	87 89       	ldd	r24, Z+23	; 0x17
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	f0 e1       	ldi	r31, 0x10	; 16
     3e2:	9f 9f       	mul	r25, r31
     3e4:	80 0d       	add	r24, r0
     3e6:	11 24       	eor	r1, r1
     3e8:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     3ec:	f8 01       	movw	r30, r16
     3ee:	90 8d       	ldd	r25, Z+24	; 0x18
     3f0:	81 8d       	ldd	r24, Z+25	; 0x19
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	f0 e1       	ldi	r31, 0x10	; 16
     3f6:	9f 9f       	mul	r25, r31
     3f8:	80 0d       	add	r24, r0
     3fa:	11 24       	eor	r1, r1
     3fc:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     400:	f8 01       	movw	r30, r16
     402:	92 8d       	ldd	r25, Z+26	; 0x1a
     404:	83 8d       	ldd	r24, Z+27	; 0x1b
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	f0 e1       	ldi	r31, 0x10	; 16
     40a:	9f 9f       	mul	r25, r31
     40c:	80 0d       	add	r24, r0
     40e:	11 24       	eor	r1, r1
     410:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     414:	f8 01       	movw	r30, r16
     416:	94 8d       	ldd	r25, Z+28	; 0x1c
     418:	85 8d       	ldd	r24, Z+29	; 0x1d
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	f0 e1       	ldi	r31, 0x10	; 16
     41e:	9f 9f       	mul	r25, r31
     420:	80 0d       	add	r24, r0
     422:	11 24       	eor	r1, r1
     424:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     428:	62 e0       	ldi	r22, 0x02	; 2
     42a:	8c 2f       	mov	r24, r28
     42c:	0e 94 4d 00 	call	0x9a	; 0x9a <HLCD_enuLCD_WriteCommand>
     430:	60 e2       	ldi	r22, 0x20	; 32
     432:	01 c0       	rjmp	.+2      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     434:	60 e2       	ldi	r22, 0x20	; 32
     436:	8e e1       	ldi	r24, 0x1E	; 30
     438:	8c 9f       	mul	r24, r28
     43a:	f0 01       	movw	r30, r0
     43c:	8d 9f       	mul	r24, r29
     43e:	f0 0d       	add	r31, r0
     440:	11 24       	eor	r1, r1
     442:	e0 5a       	subi	r30, 0xA0	; 160
     444:	ff 4f       	sbci	r31, 0xFF	; 255
     446:	81 81       	ldd	r24, Z+1	; 0x01
     448:	81 30       	cpi	r24, 0x01	; 1
     44a:	09 f4       	brne	.+2      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     44c:	68 60       	ori	r22, 0x08	; 8
     44e:	8e e1       	ldi	r24, 0x1E	; 30
     450:	8c 9f       	mul	r24, r28
     452:	f0 01       	movw	r30, r0
     454:	8d 9f       	mul	r24, r29
     456:	f0 0d       	add	r31, r0
     458:	11 24       	eor	r1, r1
     45a:	e0 5a       	subi	r30, 0xA0	; 160
     45c:	ff 4f       	sbci	r31, 0xFF	; 255
     45e:	82 81       	ldd	r24, Z+2	; 0x02
     460:	81 30       	cpi	r24, 0x01	; 1
     462:	09 f4       	brne	.+2      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     464:	64 60       	ori	r22, 0x04	; 4
     466:	1c 2f       	mov	r17, r28
     468:	8c 2f       	mov	r24, r28
     46a:	0e 94 4d 00 	call	0x9a	; 0x9a <HLCD_enuLCD_WriteCommand>
     46e:	25 e8       	ldi	r18, 0x85	; 133
     470:	2a 95       	dec	r18
     472:	f1 f7       	brne	.-4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     474:	00 00       	nop
     476:	8e e1       	ldi	r24, 0x1E	; 30
     478:	8c 9f       	mul	r24, r28
     47a:	f0 01       	movw	r30, r0
     47c:	8d 9f       	mul	r24, r29
     47e:	f0 0d       	add	r31, r0
     480:	11 24       	eor	r1, r1
     482:	e0 5a       	subi	r30, 0xA0	; 160
     484:	ff 4f       	sbci	r31, 0xFF	; 255
     486:	83 81       	ldd	r24, Z+3	; 0x03
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	11 f0       	breq	.+4      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     48c:	68 e0       	ldi	r22, 0x08	; 8
     48e:	01 c0       	rjmp	.+2      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     490:	6c e0       	ldi	r22, 0x0C	; 12
     492:	8e e1       	ldi	r24, 0x1E	; 30
     494:	8c 9f       	mul	r24, r28
     496:	f0 01       	movw	r30, r0
     498:	8d 9f       	mul	r24, r29
     49a:	f0 0d       	add	r31, r0
     49c:	11 24       	eor	r1, r1
     49e:	e0 5a       	subi	r30, 0xA0	; 160
     4a0:	ff 4f       	sbci	r31, 0xFF	; 255
     4a2:	84 81       	ldd	r24, Z+4	; 0x04
     4a4:	81 30       	cpi	r24, 0x01	; 1
     4a6:	09 f4       	brne	.+2      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
     4a8:	62 60       	ori	r22, 0x02	; 2
     4aa:	8e e1       	ldi	r24, 0x1E	; 30
     4ac:	8c 9f       	mul	r24, r28
     4ae:	f0 01       	movw	r30, r0
     4b0:	8d 9f       	mul	r24, r29
     4b2:	f0 0d       	add	r31, r0
     4b4:	11 24       	eor	r1, r1
     4b6:	e0 5a       	subi	r30, 0xA0	; 160
     4b8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ba:	85 81       	ldd	r24, Z+5	; 0x05
     4bc:	81 30       	cpi	r24, 0x01	; 1
     4be:	09 f4       	brne	.+2      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
     4c0:	61 60       	ori	r22, 0x01	; 1
     4c2:	81 2f       	mov	r24, r17
     4c4:	0e 94 4d 00 	call	0x9a	; 0x9a <HLCD_enuLCD_WriteCommand>
     4c8:	85 e8       	ldi	r24, 0x85	; 133
     4ca:	8a 95       	dec	r24
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
     4ce:	00 00       	nop
     4d0:	81 2f       	mov	r24, r17
     4d2:	0e 94 34 01 	call	0x268	; 0x268 <HLCD_vLCD_ClearDisplay>
     4d6:	ef e9       	ldi	r30, 0x9F	; 159
     4d8:	ff e0       	ldi	r31, 0x0F	; 15
     4da:	31 97       	sbiw	r30, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
     4e0:	00 00       	nop
     4e2:	8e e1       	ldi	r24, 0x1E	; 30
     4e4:	8c 9f       	mul	r24, r28
     4e6:	f0 01       	movw	r30, r0
     4e8:	8d 9f       	mul	r24, r29
     4ea:	f0 0d       	add	r31, r0
     4ec:	11 24       	eor	r1, r1
     4ee:	e0 5a       	subi	r30, 0xA0	; 160
     4f0:	ff 4f       	sbci	r31, 0xFF	; 255
     4f2:	86 81       	ldd	r24, Z+6	; 0x06
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	11 f0       	breq	.+4      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
     4f8:	64 e0       	ldi	r22, 0x04	; 4
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
     4fc:	66 e0       	ldi	r22, 0x06	; 6
     4fe:	8e e1       	ldi	r24, 0x1E	; 30
     500:	8c 9f       	mul	r24, r28
     502:	f0 01       	movw	r30, r0
     504:	8d 9f       	mul	r24, r29
     506:	f0 0d       	add	r31, r0
     508:	11 24       	eor	r1, r1
     50a:	e0 5a       	subi	r30, 0xA0	; 160
     50c:	ff 4f       	sbci	r31, 0xFF	; 255
     50e:	87 81       	ldd	r24, Z+7	; 0x07
     510:	81 30       	cpi	r24, 0x01	; 1
     512:	09 f4       	brne	.+2      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
     514:	61 60       	ori	r22, 0x01	; 1
     516:	81 2f       	mov	r24, r17
     518:	0e 94 4d 00 	call	0x9a	; 0x9a <HLCD_enuLCD_WriteCommand>
     51c:	21 96       	adiw	r28, 0x01	; 1
     51e:	c2 30       	cpi	r28, 0x02	; 2
     520:	d1 05       	cpc	r29, r1
     522:	0c f4       	brge	.+2      	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
     524:	ac ce       	rjmp	.-680    	; 0x27e <HLCD_vLCD_init+0xe>
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	08 95       	ret

00000530 <HLCD_enuLCD_WriteCharacter>:
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	83 30       	cpi	r24, 0x03	; 3
     53c:	08 f0       	brcs	.+2      	; 0x540 <HLCD_enuLCD_WriteCharacter+0x10>
     53e:	d8 c0       	rjmp	.+432    	; 0x6f0 <HLCD_enuLCD_WriteCharacter+0x1c0>
     540:	f6 2e       	mov	r15, r22
     542:	c8 2f       	mov	r28, r24
     544:	d0 e0       	ldi	r29, 0x00	; 0
     546:	8e e1       	ldi	r24, 0x1E	; 30
     548:	8c 9f       	mul	r24, r28
     54a:	80 01       	movw	r16, r0
     54c:	8d 9f       	mul	r24, r29
     54e:	10 0d       	add	r17, r0
     550:	11 24       	eor	r1, r1
     552:	00 5a       	subi	r16, 0xA0	; 160
     554:	1f 4f       	sbci	r17, 0xFF	; 255
     556:	f8 01       	movw	r30, r16
     558:	63 8d       	ldd	r22, Z+27	; 0x1b
     55a:	40 e0       	ldi	r20, 0x00	; 0
     55c:	82 8d       	ldd	r24, Z+26	; 0x1a
     55e:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     562:	f8 01       	movw	r30, r16
     564:	61 8d       	ldd	r22, Z+25	; 0x19
     566:	41 e0       	ldi	r20, 0x01	; 1
     568:	80 8d       	ldd	r24, Z+24	; 0x18
     56a:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     56e:	f8 01       	movw	r30, r16
     570:	80 81       	ld	r24, Z
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	09 f0       	breq	.+2      	; 0x578 <HLCD_enuLCD_WriteCharacter+0x48>
     576:	41 c0       	rjmp	.+130    	; 0x5fa <HLCD_enuLCD_WriteCharacter+0xca>
     578:	8f 01       	movw	r16, r30
     57a:	61 85       	ldd	r22, Z+9	; 0x09
     57c:	4f 2d       	mov	r20, r15
     57e:	41 70       	andi	r20, 0x01	; 1
     580:	80 85       	ldd	r24, Z+8	; 0x08
     582:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     586:	f8 01       	movw	r30, r16
     588:	63 85       	ldd	r22, Z+11	; 0x0b
     58a:	f1 fa       	bst	r15, 1
     58c:	44 27       	eor	r20, r20
     58e:	40 f9       	bld	r20, 0
     590:	82 85       	ldd	r24, Z+10	; 0x0a
     592:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     596:	f8 01       	movw	r30, r16
     598:	65 85       	ldd	r22, Z+13	; 0x0d
     59a:	f2 fa       	bst	r15, 2
     59c:	44 27       	eor	r20, r20
     59e:	40 f9       	bld	r20, 0
     5a0:	84 85       	ldd	r24, Z+12	; 0x0c
     5a2:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     5a6:	f8 01       	movw	r30, r16
     5a8:	67 85       	ldd	r22, Z+15	; 0x0f
     5aa:	f3 fa       	bst	r15, 3
     5ac:	44 27       	eor	r20, r20
     5ae:	40 f9       	bld	r20, 0
     5b0:	86 85       	ldd	r24, Z+14	; 0x0e
     5b2:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     5b6:	f8 01       	movw	r30, r16
     5b8:	61 89       	ldd	r22, Z+17	; 0x11
     5ba:	f4 fa       	bst	r15, 4
     5bc:	44 27       	eor	r20, r20
     5be:	40 f9       	bld	r20, 0
     5c0:	80 89       	ldd	r24, Z+16	; 0x10
     5c2:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     5c6:	f8 01       	movw	r30, r16
     5c8:	63 89       	ldd	r22, Z+19	; 0x13
     5ca:	f5 fa       	bst	r15, 5
     5cc:	44 27       	eor	r20, r20
     5ce:	40 f9       	bld	r20, 0
     5d0:	82 89       	ldd	r24, Z+18	; 0x12
     5d2:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     5d6:	f8 01       	movw	r30, r16
     5d8:	65 89       	ldd	r22, Z+21	; 0x15
     5da:	f6 fa       	bst	r15, 6
     5dc:	44 27       	eor	r20, r20
     5de:	40 f9       	bld	r20, 0
     5e0:	84 89       	ldd	r24, Z+20	; 0x14
     5e2:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     5e6:	f8 01       	movw	r30, r16
     5e8:	67 89       	ldd	r22, Z+23	; 0x17
     5ea:	4f 2d       	mov	r20, r15
     5ec:	44 1f       	adc	r20, r20
     5ee:	44 27       	eor	r20, r20
     5f0:	44 1f       	adc	r20, r20
     5f2:	86 89       	ldd	r24, Z+22	; 0x16
     5f4:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     5f8:	5e c0       	rjmp	.+188    	; 0x6b6 <HLCD_enuLCD_WriteCharacter+0x186>
     5fa:	81 11       	cpse	r24, r1
     5fc:	5c c0       	rjmp	.+184    	; 0x6b6 <HLCD_enuLCD_WriteCharacter+0x186>
     5fe:	8e e1       	ldi	r24, 0x1E	; 30
     600:	8c 9f       	mul	r24, r28
     602:	80 01       	movw	r16, r0
     604:	8d 9f       	mul	r24, r29
     606:	10 0d       	add	r17, r0
     608:	11 24       	eor	r1, r1
     60a:	00 5a       	subi	r16, 0xA0	; 160
     60c:	1f 4f       	sbci	r17, 0xFF	; 255
     60e:	f8 01       	movw	r30, r16
     610:	61 89       	ldd	r22, Z+17	; 0x11
     612:	f4 fa       	bst	r15, 4
     614:	44 27       	eor	r20, r20
     616:	40 f9       	bld	r20, 0
     618:	80 89       	ldd	r24, Z+16	; 0x10
     61a:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     61e:	f8 01       	movw	r30, r16
     620:	63 89       	ldd	r22, Z+19	; 0x13
     622:	f5 fa       	bst	r15, 5
     624:	44 27       	eor	r20, r20
     626:	40 f9       	bld	r20, 0
     628:	82 89       	ldd	r24, Z+18	; 0x12
     62a:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     62e:	f8 01       	movw	r30, r16
     630:	65 89       	ldd	r22, Z+21	; 0x15
     632:	f6 fa       	bst	r15, 6
     634:	44 27       	eor	r20, r20
     636:	40 f9       	bld	r20, 0
     638:	84 89       	ldd	r24, Z+20	; 0x14
     63a:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     63e:	f8 01       	movw	r30, r16
     640:	67 89       	ldd	r22, Z+23	; 0x17
     642:	4f 2d       	mov	r20, r15
     644:	44 1f       	adc	r20, r20
     646:	44 27       	eor	r20, r20
     648:	44 1f       	adc	r20, r20
     64a:	86 89       	ldd	r24, Z+22	; 0x16
     64c:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     650:	f8 01       	movw	r30, r16
     652:	65 8d       	ldd	r22, Z+29	; 0x1d
     654:	41 e0       	ldi	r20, 0x01	; 1
     656:	84 8d       	ldd	r24, Z+28	; 0x1c
     658:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     65c:	f2 e0       	ldi	r31, 0x02	; 2
     65e:	fa 95       	dec	r31
     660:	f1 f7       	brne	.-4      	; 0x65e <HLCD_enuLCD_WriteCharacter+0x12e>
     662:	00 c0       	rjmp	.+0      	; 0x664 <HLCD_enuLCD_WriteCharacter+0x134>
     664:	f8 01       	movw	r30, r16
     666:	65 8d       	ldd	r22, Z+29	; 0x1d
     668:	40 e0       	ldi	r20, 0x00	; 0
     66a:	84 8d       	ldd	r24, Z+28	; 0x1c
     66c:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     670:	f2 e0       	ldi	r31, 0x02	; 2
     672:	fa 95       	dec	r31
     674:	f1 f7       	brne	.-4      	; 0x672 <HLCD_enuLCD_WriteCharacter+0x142>
     676:	00 c0       	rjmp	.+0      	; 0x678 <HLCD_enuLCD_WriteCharacter+0x148>
     678:	f8 01       	movw	r30, r16
     67a:	61 89       	ldd	r22, Z+17	; 0x11
     67c:	4f 2d       	mov	r20, r15
     67e:	41 70       	andi	r20, 0x01	; 1
     680:	80 89       	ldd	r24, Z+16	; 0x10
     682:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     686:	f8 01       	movw	r30, r16
     688:	63 89       	ldd	r22, Z+19	; 0x13
     68a:	f1 fa       	bst	r15, 1
     68c:	44 27       	eor	r20, r20
     68e:	40 f9       	bld	r20, 0
     690:	82 89       	ldd	r24, Z+18	; 0x12
     692:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     696:	f8 01       	movw	r30, r16
     698:	65 89       	ldd	r22, Z+21	; 0x15
     69a:	f2 fa       	bst	r15, 2
     69c:	44 27       	eor	r20, r20
     69e:	40 f9       	bld	r20, 0
     6a0:	84 89       	ldd	r24, Z+20	; 0x14
     6a2:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     6a6:	f8 01       	movw	r30, r16
     6a8:	67 89       	ldd	r22, Z+23	; 0x17
     6aa:	f3 fa       	bst	r15, 3
     6ac:	44 27       	eor	r20, r20
     6ae:	40 f9       	bld	r20, 0
     6b0:	86 89       	ldd	r24, Z+22	; 0x16
     6b2:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     6b6:	2e e1       	ldi	r18, 0x1E	; 30
     6b8:	2c 9f       	mul	r18, r28
     6ba:	c0 01       	movw	r24, r0
     6bc:	2d 9f       	mul	r18, r29
     6be:	90 0d       	add	r25, r0
     6c0:	11 24       	eor	r1, r1
     6c2:	ec 01       	movw	r28, r24
     6c4:	c0 5a       	subi	r28, 0xA0	; 160
     6c6:	df 4f       	sbci	r29, 0xFF	; 255
     6c8:	6d 8d       	ldd	r22, Y+29	; 0x1d
     6ca:	41 e0       	ldi	r20, 0x01	; 1
     6cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6ce:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     6d2:	f2 e0       	ldi	r31, 0x02	; 2
     6d4:	fa 95       	dec	r31
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <HLCD_enuLCD_WriteCharacter+0x1a4>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <HLCD_enuLCD_WriteCharacter+0x1aa>
     6da:	6d 8d       	ldd	r22, Y+29	; 0x1d
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6e0:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	8a 95       	dec	r24
     6e8:	f1 f7       	brne	.-4      	; 0x6e6 <HLCD_enuLCD_WriteCharacter+0x1b6>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <HLCD_enuLCD_WriteCharacter+0x1bc>
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <HLCD_enuLCD_WriteCharacter+0x1c2>
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	ff 90       	pop	r15
     6fc:	08 95       	ret

000006fe <HLCD_enuLCD_WriteNumber>:


HLCD_enuErrorStatus_t HLCD_enuLCD_WriteNumber(u8 Copy_enuLCDNum ,u32 Copy_U32Number)
{
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	2a 97       	sbiw	r28, 0x0a	; 10
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
     716:	08 2f       	mov	r16, r24
     718:	cb 01       	movw	r24, r22
     71a:	ba 01       	movw	r22, r20
	
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;
	if(IS_INVALID_LCD_NAME(Copy_enuLCDNum))
     71c:	03 30       	cpi	r16, 0x03	; 3
     71e:	c8 f5       	brcc	.+114    	; 0x792 <HLCD_enuLCD_WriteNumber+0x94>
	}
	else
	{
		Ret_enuError = HLCD_enuOK;
		// Handle special case for 0
		if (Copy_U32Number == 0)
     720:	61 15       	cp	r22, r1
     722:	71 05       	cpc	r23, r1
     724:	81 05       	cpc	r24, r1
     726:	91 05       	cpc	r25, r1
     728:	c9 f4       	brne	.+50     	; 0x75c <HLCD_enuLCD_WriteNumber+0x5e>
		{
			HLCD_enuLCD_WriteCharacter(Copy_enuLCDNum,'0');
     72a:	60 e3       	ldi	r22, 0x30	; 48
     72c:	80 2f       	mov	r24, r16
     72e:	0e 94 98 02 	call	0x530	; 0x530 <HLCD_enuLCD_WriteCharacter>
		Ret_enuError =HLCD_enuINVALIDLCDNAME;
		
	}
	else
	{
		Ret_enuError = HLCD_enuOK;
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	2f c0       	rjmp	.+94     	; 0x794 <HLCD_enuLCD_WriteNumber+0x96>
			u8 digits[10];  // Array to hold the digits (u32 has at most 10 digits)
			u8 count = 0;   // Counter for the number of digits
			// Extract digits and store them in the array
			while (Copy_U32Number != 0)
			{
				digits[count++] = Copy_U32Number % 10;  // Store the last digit
     736:	2a e0       	ldi	r18, 0x0A	; 10
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__udivmodsi4>
     742:	e1 e0       	ldi	r30, 0x01	; 1
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	ec 0f       	add	r30, r28
     748:	fd 1f       	adc	r31, r29
     74a:	e1 0f       	add	r30, r17
     74c:	f1 1d       	adc	r31, r1
     74e:	60 83       	st	Z, r22
				Copy_U32Number /= 10;                   // Remove the last digit
     750:	62 2f       	mov	r22, r18
     752:	73 2f       	mov	r23, r19
     754:	84 2f       	mov	r24, r20
     756:	95 2f       	mov	r25, r21
			u8 digits[10];  // Array to hold the digits (u32 has at most 10 digits)
			u8 count = 0;   // Counter for the number of digits
			// Extract digits and store them in the array
			while (Copy_U32Number != 0)
			{
				digits[count++] = Copy_U32Number % 10;  // Store the last digit
     758:	1f 5f       	subi	r17, 0xFF	; 255
     75a:	01 c0       	rjmp	.+2      	; 0x75e <HLCD_enuLCD_WriteNumber+0x60>
     75c:	10 e0       	ldi	r17, 0x00	; 0
		else
		{
			u8 digits[10];  // Array to hold the digits (u32 has at most 10 digits)
			u8 count = 0;   // Counter for the number of digits
			// Extract digits and store them in the array
			while (Copy_U32Number != 0)
     75e:	61 15       	cp	r22, r1
     760:	71 05       	cpc	r23, r1
     762:	81 05       	cpc	r24, r1
     764:	91 05       	cpc	r25, r1
     766:	39 f7       	brne	.-50     	; 0x736 <HLCD_enuLCD_WriteNumber+0x38>
			{
				digits[count++] = Copy_U32Number % 10;  // Store the last digit
				Copy_U32Number /= 10;                   // Remove the last digit
			}
			if(count > 10)
     768:	1b 30       	cpi	r17, 0x0B	; 11
     76a:	88 f4       	brcc	.+34     	; 0x78e <HLCD_enuLCD_WriteNumber+0x90>
     76c:	0c c0       	rjmp	.+24     	; 0x786 <HLCD_enuLCD_WriteNumber+0x88>
			else
			{
				// Print the digits in reverse order (from the array)
				while (count > 0)
				{
					HLCD_enuLCD_WriteCharacter(Copy_enuLCDNum , digits[--count] + '0');  // Convert digit to ASCII and print
     76e:	11 50       	subi	r17, 0x01	; 1
     770:	e1 e0       	ldi	r30, 0x01	; 1
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	ec 0f       	add	r30, r28
     776:	fd 1f       	adc	r31, r29
     778:	e1 0f       	add	r30, r17
     77a:	f1 1d       	adc	r31, r1
     77c:	60 81       	ld	r22, Z
     77e:	60 5d       	subi	r22, 0xD0	; 208
     780:	80 2f       	mov	r24, r16
     782:	0e 94 98 02 	call	0x530	; 0x530 <HLCD_enuLCD_WriteCharacter>
				
			}
			else
			{
				// Print the digits in reverse order (from the array)
				while (count > 0)
     786:	11 11       	cpse	r17, r1
     788:	f2 cf       	rjmp	.-28     	; 0x76e <HLCD_enuLCD_WriteNumber+0x70>
		Ret_enuError =HLCD_enuINVALIDLCDNAME;
		
	}
	else
	{
		Ret_enuError = HLCD_enuOK;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	03 c0       	rjmp	.+6      	; 0x794 <HLCD_enuLCD_WriteNumber+0x96>
				digits[count++] = Copy_U32Number % 10;  // Store the last digit
				Copy_U32Number /= 10;                   // Remove the last digit
			}
			if(count > 10)
			{
				Ret_enuError =HLCD_enuINVALIDNUMBER;
     78e:	88 e0       	ldi	r24, 0x08	; 8
     790:	01 c0       	rjmp	.+2      	; 0x794 <HLCD_enuLCD_WriteNumber+0x96>
{
	
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;
	if(IS_INVALID_LCD_NAME(Copy_enuLCDNum))
	{
		Ret_enuError =HLCD_enuINVALIDLCDNAME;
     792:	82 e0       	ldi	r24, 0x02	; 2
		}

	}
	return Ret_enuError ;
	
     794:	2a 96       	adiw	r28, 0x0a	; 10
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	08 95       	ret

000007aa <HLED_vLED_init>:

extern HLED_strLedCONFG_t HLED_enuArrLedCongf[Num_of_Led];


void HLED_vLED_init(void)
{
     7aa:	cf 93       	push	r28
	u8 Local_u8_currentPinPort=0;
	u8 Local_u8_i=0;
	for(Local_u8_i =0 ; Local_u8_i < Num_of_Led ; Local_u8_i++)
     7ac:	c0 e0       	ldi	r28, 0x00	; 0
     7ae:	13 c0       	rjmp	.+38     	; 0x7d6 <HLED_vLED_init+0x2c>
	{
		Local_u8_currentPinPort = ((HLED_enuArrLedCongf[Local_u8_i].PORT<<4) + HLED_enuArrLedCongf[Local_u8_i].PIN);
     7b0:	ec 2f       	mov	r30, r28
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	cf 01       	movw	r24, r30
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	e8 0f       	add	r30, r24
     7bc:	f9 1f       	adc	r31, r25
     7be:	e4 56       	subi	r30, 0x64	; 100
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
     7c2:	90 81       	ld	r25, Z
     7c4:	81 81       	ldd	r24, Z+1	; 0x01
		MPORT_enuSetPinDirection(Local_u8_currentPinPort , MPORT_enuPINOUTPUT);
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	20 e1       	ldi	r18, 0x10	; 16
     7ca:	92 9f       	mul	r25, r18
     7cc:	80 0d       	add	r24, r0
     7ce:	11 24       	eor	r1, r1
     7d0:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>

void HLED_vLED_init(void)
{
	u8 Local_u8_currentPinPort=0;
	u8 Local_u8_i=0;
	for(Local_u8_i =0 ; Local_u8_i < Num_of_Led ; Local_u8_i++)
     7d4:	cf 5f       	subi	r28, 0xFF	; 255
     7d6:	c2 30       	cpi	r28, 0x02	; 2
     7d8:	58 f3       	brcs	.-42     	; 0x7b0 <HLED_vLED_init+0x6>
		Local_u8_currentPinPort = ((HLED_enuArrLedCongf[Local_u8_i].PORT<<4) + HLED_enuArrLedCongf[Local_u8_i].PIN);
		MPORT_enuSetPinDirection(Local_u8_currentPinPort , MPORT_enuPINOUTPUT);
		
		
	}
}
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <HLED_enuSetLedState>:
HLED_enuErrorStatus_t HLED_enuSetLedState( u8 Copy_u8LedName, HLED_enuState_t Copy_enuState)
{
	MDIO_enuErrorStatus_t Ret_enuError = HLED_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_LED_NAME(Copy_u8LedName))
     7de:	83 30       	cpi	r24, 0x03	; 3
     7e0:	08 f0       	brcs	.+2      	; 0x7e4 <HLED_enuSetLedState+0x6>
     7e2:	50 c0       	rjmp	.+160    	; 0x884 <__stack+0x25>
	{
		Ret_enuError =HLED_enuINVALID_LEDName ;
		
	}
	else if (IS_INVALID_LED_VALUE(Copy_enuState))
     7e4:	62 30       	cpi	r22, 0x02	; 2
     7e6:	08 f0       	brcs	.+2      	; 0x7ea <HLED_enuSetLedState+0xc>
     7e8:	4f c0       	rjmp	.+158    	; 0x888 <__stack+0x29>
		Ret_enuError = HLED_enuINVALID_LEDValue;
	}
	else
	{
		Ret_enuError = HLED_enuOK;
		if(HLED_enuArrLedCongf[Copy_u8LedName].CONNECTION == HLED_enuForward)
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	fc 01       	movw	r30, r24
     7ee:	ee 0f       	add	r30, r30
     7f0:	ff 1f       	adc	r31, r31
     7f2:	e8 0f       	add	r30, r24
     7f4:	f9 1f       	adc	r31, r25
     7f6:	e4 56       	subi	r30, 0x64	; 100
     7f8:	ff 4f       	sbci	r31, 0xFF	; 255
     7fa:	22 81       	ldd	r18, Z+2	; 0x02
     7fc:	21 11       	cpse	r18, r1
     7fe:	20 c0       	rjmp	.+64     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
		{
			if(Copy_enuState == HLED_enuON)
     800:	61 11       	cpse	r22, r1
     802:	0e c0       	rjmp	.+28     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
			{
				 Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuHIGH);
     804:	fc 01       	movw	r30, r24
     806:	ee 0f       	add	r30, r30
     808:	ff 1f       	adc	r31, r31
     80a:	8e 0f       	add	r24, r30
     80c:	9f 1f       	adc	r25, r31
     80e:	fc 01       	movw	r30, r24
     810:	e4 56       	subi	r30, 0x64	; 100
     812:	ff 4f       	sbci	r31, 0xFF	; 255
     814:	61 81       	ldd	r22, Z+1	; 0x01
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	80 81       	ld	r24, Z
     81a:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     81e:	08 95       	ret
			}
			else if(Copy_enuState == HLED_enuOFF)
     820:	61 30       	cpi	r22, 0x01	; 1
     822:	a1 f5       	brne	.+104    	; 0x88c <__stack+0x2d>
			{
				Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuLOW);
     824:	fc 01       	movw	r30, r24
     826:	ee 0f       	add	r30, r30
     828:	ff 1f       	adc	r31, r31
     82a:	8e 0f       	add	r24, r30
     82c:	9f 1f       	adc	r25, r31
     82e:	fc 01       	movw	r30, r24
     830:	e4 56       	subi	r30, 0x64	; 100
     832:	ff 4f       	sbci	r31, 0xFF	; 255
     834:	61 81       	ldd	r22, Z+1	; 0x01
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     83e:	08 95       	ret
			}
		}
		else if(HLED_enuArrLedCongf[Copy_u8LedName].CONNECTION == HLED_enuReverse)
     840:	21 30       	cpi	r18, 0x01	; 1
     842:	31 f5       	brne	.+76     	; 0x890 <__stack+0x31>
		{
			if(Copy_enuState == HLED_enuON)
     844:	61 11       	cpse	r22, r1
     846:	0e c0       	rjmp	.+28     	; 0x864 <__stack+0x5>
			{
				Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuLOW);
     848:	fc 01       	movw	r30, r24
     84a:	ee 0f       	add	r30, r30
     84c:	ff 1f       	adc	r31, r31
     84e:	8e 0f       	add	r24, r30
     850:	9f 1f       	adc	r25, r31
     852:	fc 01       	movw	r30, r24
     854:	e4 56       	subi	r30, 0x64	; 100
     856:	ff 4f       	sbci	r31, 0xFF	; 255
     858:	61 81       	ldd	r22, Z+1	; 0x01
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	80 81       	ld	r24, Z
     85e:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     862:	08 95       	ret
			}
			else if(Copy_enuState == HLED_enuOFF)
     864:	61 30       	cpi	r22, 0x01	; 1
     866:	b1 f4       	brne	.+44     	; 0x894 <__stack+0x35>
			{
				Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuHIGH);
     868:	fc 01       	movw	r30, r24
     86a:	ee 0f       	add	r30, r30
     86c:	ff 1f       	adc	r31, r31
     86e:	8e 0f       	add	r24, r30
     870:	9f 1f       	adc	r25, r31
     872:	fc 01       	movw	r30, r24
     874:	e4 56       	subi	r30, 0x64	; 100
     876:	ff 4f       	sbci	r31, 0xFF	; 255
     878:	61 81       	ldd	r22, Z+1	; 0x01
     87a:	41 e0       	ldi	r20, 0x01	; 1
     87c:	80 81       	ld	r24, Z
     87e:	0e 94 9a 04 	call	0x934	; 0x934 <MDIO_enuSetPinValue>
     882:	08 95       	ret
	MDIO_enuErrorStatus_t Ret_enuError = HLED_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_LED_NAME(Copy_u8LedName))
	{
		Ret_enuError =HLED_enuINVALID_LEDName ;
     884:	85 e0       	ldi	r24, 0x05	; 5
     886:	08 95       	ret
		
	}
	else if (IS_INVALID_LED_VALUE(Copy_enuState))
	{
		Ret_enuError = HLED_enuINVALID_LEDValue;
     888:	86 e0       	ldi	r24, 0x06	; 6
     88a:	08 95       	ret
	}
	else
	{
		Ret_enuError = HLED_enuOK;
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	08 95       	ret
				Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuHIGH);
			}
		}
		else
		{
			Ret_enuError = HLED_enuINVALID_LEDConnection;
     890:	87 e0       	ldi	r24, 0x07	; 7
     892:	08 95       	ret
	{
		Ret_enuError = HLED_enuINVALID_LEDValue;
	}
	else
	{
		Ret_enuError = HLED_enuOK;
     894:	80 e0       	ldi	r24, 0x00	; 0
		
	   

	}
	return Ret_enuError;
     896:	08 95       	ret

00000898 <Timer1_Callback>:
#define PRESCALE 8

void Timer1_Callback(void)
{
	static HLED_enuState_t led_state = HLED_enuOFF;  // Track LED state
	led_state = (led_state == HLED_enuOFF) ? HLED_enuON : HLED_enuOFF;
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <led_state.1801>
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <Timer1_Callback+0xc>
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <led_state.1801>
	HLED_enuSetLedState(Led_start, led_state);
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	0e 94 ef 03 	call	0x7de	; 0x7de <HLED_enuSetLedState>
     8ae:	08 95       	ret

000008b0 <main>:
}

int main(void)
{
	HLED_vLED_init();
     8b0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <HLED_vLED_init>
	HLCD_vLCD_init();
     8b4:	0e 94 38 01 	call	0x270	; 0x270 <HLCD_vLCD_init>

	// Choose the mode and calculate configuration
	if (Timer1_Config.mode == TIMER1_NORMAL_MODE)
     8b8:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <Timer1_Config>
     8bc:	81 11       	cpse	r24, r1
     8be:	11 c0       	rjmp	.+34     	; 0x8e2 <main+0x32>
	{
		Timer1_CalculateNormalConfig(REQUIRED_TIME, F_CPU, TIMER_RESOLUTION, PRESCALE);
     8c0:	68 94       	set
     8c2:	ee 24       	eor	r14, r14
     8c4:	e3 f8       	bld	r14, 3
     8c6:	f1 2c       	mov	r15, r1
     8c8:	00 e1       	ldi	r16, 0x10	; 16
     8ca:	10 e0       	ldi	r17, 0x00	; 0
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	32 e1       	ldi	r19, 0x12	; 18
     8d0:	4a e7       	ldi	r20, 0x7A	; 122
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	9f e3       	ldi	r25, 0x3F	; 63
     8dc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <Timer1_CalculateNormalConfig>
     8e0:	12 c0       	rjmp	.+36     	; 0x906 <main+0x56>
	}
	else if (Timer1_Config.mode == TIMER1_CTC_MODE_OCR1A)
     8e2:	88 30       	cpi	r24, 0x08	; 8
     8e4:	81 f4       	brne	.+32     	; 0x906 <main+0x56>
	{
		Timer1_CalculateCTCConfigA(REQUIRED_TIME, 199, F_CPU, PRESCALE);
     8e6:	68 94       	set
     8e8:	ee 24       	eor	r14, r14
     8ea:	e3 f8       	bld	r14, 3
     8ec:	f1 2c       	mov	r15, r1
     8ee:	00 e0       	ldi	r16, 0x00	; 0
     8f0:	12 e1       	ldi	r17, 0x12	; 18
     8f2:	2a e7       	ldi	r18, 0x7A	; 122
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	47 ec       	ldi	r20, 0xC7	; 199
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	9f e3       	ldi	r25, 0x3F	; 63
     902:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Timer1_CalculateCTCConfigA>
	}

	// Initialize Timer1
	Timer1_Init();
     906:	0e 94 12 05 	call	0xa24	; 0xa24 <Timer1_Init>

	// Set callback function
	Timer1_SetCallBack_COMPA(Timer1_Callback);
     90a:	8c e4       	ldi	r24, 0x4C	; 76
     90c:	94 e0       	ldi	r25, 0x04	; 4
     90e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <Timer1_SetCallBack_COMPA>



	// Display the number of overflows or compare matches on LCD
	HLCD_enuLCD_WriteNumber(LCD1, Timer1_GetCompareMatchValueA());
     912:	0e 94 ad 07 	call	0xf5a	; 0xf5a <Timer1_GetCompareMatchValueA>
     916:	ac 01       	movw	r20, r24
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <HLCD_enuLCD_WriteNumber>

	// If CTC mode, show the OCR1A value
	HLCD_enuLCD_WriteNumber(LCD1, Timer1_GetNumCompareMatchesA());
     922:	0e 94 b2 07 	call	0xf64	; 0xf64 <Timer1_GetNumCompareMatchesA>
     926:	ac 01       	movw	r20, r24
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <HLCD_enuLCD_WriteNumber>
     932:	ff cf       	rjmp	.-2      	; 0x932 <main+0x82>

00000934 <MDIO_enuSetPinValue>:
{
	
	MDIO_enuErrorStatus_t Ret_enuError = MDIO_enuNOK;
	
	 // Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
     934:	85 30       	cpi	r24, 0x05	; 5
     936:	60 f5       	brcc	.+88     	; 0x990 <MDIO_enuSetPinValue+0x5c>
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
     938:	69 30       	cpi	r22, 0x09	; 9
     93a:	60 f5       	brcc	.+88     	; 0x994 <MDIO_enuSetPinValue+0x60>
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PIN_STATE(Copy_enuState))
     93c:	42 30       	cpi	r20, 0x02	; 2
     93e:	60 f5       	brcc	.+88     	; 0x998 <MDIO_enuSetPinValue+0x64>
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
		// Get the address of the port registers
		MDIO_strPortRegElement_t* Local_strPtrCurrPort =(((MDIO_PORT_REG_BASE_ADD) - (((u8)Copy_enuPortNum) * 3)));
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	fc 01       	movw	r30, r24
     944:	ee 0f       	add	r30, r30
     946:	ff 1f       	adc	r31, r31
     948:	8e 0f       	add	r24, r30
     94a:	9f 1f       	adc	r25, r31
     94c:	ee 27       	eor	r30, r30
     94e:	ff 27       	eor	r31, r31
     950:	e8 1b       	sub	r30, r24
     952:	f9 0b       	sbc	r31, r25
     954:	f9 96       	adiw	r30, 0x39	; 57
		// Set the pin value (HIGH or LOW)
		if(Copy_enuState == MDIO_enuLOW) // Set pin to LOW
     956:	41 11       	cpse	r20, r1
     958:	0d c0       	rjmp	.+26     	; 0x974 <MDIO_enuSetPinValue+0x40>
		{
				CLR_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
     95a:	22 81       	ldd	r18, Z+2	; 0x02
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	02 c0       	rjmp	.+4      	; 0x966 <MDIO_enuSetPinValue+0x32>
     962:	88 0f       	add	r24, r24
     964:	99 1f       	adc	r25, r25
     966:	6a 95       	dec	r22
     968:	e2 f7       	brpl	.-8      	; 0x962 <MDIO_enuSetPinValue+0x2e>
     96a:	80 95       	com	r24
     96c:	82 23       	and	r24, r18
     96e:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	08 95       	ret
		// Set the pin value (HIGH or LOW)
		if(Copy_enuState == MDIO_enuLOW) // Set pin to LOW
		{
				CLR_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
		}
		else if(Copy_enuState == MDIO_enuHIGH)// Set pin to HIGH
     974:	41 30       	cpi	r20, 0x01	; 1
     976:	91 f4       	brne	.+36     	; 0x99c <MDIO_enuSetPinValue+0x68>
		{
				
				SET_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
     978:	22 81       	ldd	r18, Z+2	; 0x02
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	02 c0       	rjmp	.+4      	; 0x984 <MDIO_enuSetPinValue+0x50>
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	6a 95       	dec	r22
     986:	e2 f7       	brpl	.-8      	; 0x980 <MDIO_enuSetPinValue+0x4c>
     988:	82 2b       	or	r24, r18
     98a:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	08 95       	ret
	MDIO_enuErrorStatus_t Ret_enuError = MDIO_enuNOK;
	
	 // Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
     990:	82 e0       	ldi	r24, 0x02	; 2
     992:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
     994:	83 e0       	ldi	r24, 0x03	; 3
     996:	08 95       	ret
	}
	else if (IS_INVALID_PIN_STATE(Copy_enuState))
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
     998:	84 e0       	ldi	r24, 0x04	; 4
     99a:	08 95       	ret
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
     99c:	80 e0       	ldi	r24, 0x00	; 0
		}

	}
	return Ret_enuError;
	
}
     99e:	08 95       	ret

000009a0 <MPORT_enuSetPinDirection>:
// Function: MPORT_enuSetPinDirection
// Sets the direction of any pin after the initialization.
MPORT_enuErrorStatus_t MPORT_enuSetPinDirection( MPORT_enuPinNums_t Copy_enuPinNum  ,  MPORT_enuPinDirection_t  Copy_enuPinDirection  )
{
	MPORT_enuErrorStatus_t Ret_enuError= MPORT_enuOK;
	u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
     9a0:	28 2f       	mov	r18, r24
     9a2:	22 95       	swap	r18
     9a4:	2f 70       	andi	r18, 0x0F	; 15
	u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
     9a6:	8f 70       	andi	r24, 0x0F	; 15
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
     9a8:	24 30       	cpi	r18, 0x04	; 4
     9aa:	a0 f5       	brcc	.+104    	; 0xa14 <MPORT_enuSetPinDirection+0x74>
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
     9ac:	88 30       	cpi	r24, 0x08	; 8
     9ae:	a0 f5       	brcc	.+104    	; 0xa18 <MPORT_enuSetPinDirection+0x78>
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PIN_Direction(Copy_enuPinDirection))
     9b0:	62 30       	cpi	r22, 0x02	; 2
     9b2:	a0 f5       	brcc	.+104    	; 0xa1c <MPORT_enuSetPinDirection+0x7c>
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
		// Get the address of the port registers
		MPORT_strPortRegElement_t* Local_strPtrCurrPort =(((MPORT_PORT_REG_BASE_ADD) - (((u8)LOC_u8portNumber) * 3)));
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	f9 01       	movw	r30, r18
     9b8:	ee 0f       	add	r30, r30
     9ba:	ff 1f       	adc	r31, r31
     9bc:	2e 0f       	add	r18, r30
     9be:	3f 1f       	adc	r19, r31
     9c0:	ee 27       	eor	r30, r30
     9c2:	ff 27       	eor	r31, r31
     9c4:	e2 1b       	sub	r30, r18
     9c6:	f3 0b       	sbc	r31, r19
     9c8:	f9 96       	adiw	r30, 0x39	; 57
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuPinDirection == MPORT_enuPINOUTPUT)// Output 
     9ca:	61 11       	cpse	r22, r1
     9cc:	0e c0       	rjmp	.+28     	; 0x9ea <MPORT_enuSetPinDirection+0x4a>
		{
			SET_BIT(Local_strPtrCurrPort->DDR,LOC_u8pinNumber);
     9ce:	41 81       	ldd	r20, Z+1	; 0x01
     9d0:	21 e0       	ldi	r18, 0x01	; 1
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	b9 01       	movw	r22, r18
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <MPORT_enuSetPinDirection+0x3c>
     9d8:	66 0f       	add	r22, r22
     9da:	77 1f       	adc	r23, r23
     9dc:	8a 95       	dec	r24
     9de:	e2 f7       	brpl	.-8      	; 0x9d8 <MPORT_enuSetPinDirection+0x38>
     9e0:	cb 01       	movw	r24, r22
     9e2:	84 2b       	or	r24, r20
     9e4:	81 83       	std	Z+1, r24	; 0x01
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	08 95       	ret
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuPinDirection == MPORT_enuPINOUTPUT)// Output 
		{
			SET_BIT(Local_strPtrCurrPort->DDR,LOC_u8pinNumber);
		}
		else if(Copy_enuPinDirection == MPORT_enuPININPUT) // Input 
     9ea:	61 30       	cpi	r22, 0x01	; 1
     9ec:	c9 f4       	brne	.+50     	; 0xa20 <MPORT_enuSetPinDirection+0x80>
		{
			CLR_BIT(Local_strPtrCurrPort->DDR ,LOC_u8pinNumber );
     9ee:	41 81       	ldd	r20, Z+1	; 0x01
     9f0:	21 e0       	ldi	r18, 0x01	; 1
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	b9 01       	movw	r22, r18
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <MPORT_enuSetPinDirection+0x5c>
     9f8:	66 0f       	add	r22, r22
     9fa:	77 1f       	adc	r23, r23
     9fc:	8a 95       	dec	r24
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <MPORT_enuSetPinDirection+0x58>
     a00:	cb 01       	movw	r24, r22
     a02:	80 95       	com	r24
     a04:	94 2f       	mov	r25, r20
     a06:	98 23       	and	r25, r24
     a08:	91 83       	std	Z+1, r25	; 0x01
			CLR_BIT(Local_strPtrCurrPort->PORT,LOC_u8pinNumber);
     a0a:	92 81       	ldd	r25, Z+2	; 0x02
     a0c:	89 23       	and	r24, r25
     a0e:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	08 95       	ret
	u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
	u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
     a14:	82 e0       	ldi	r24, 0x02	; 2
     a16:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	08 95       	ret
	}
	else if (IS_INVALID_PIN_Direction(Copy_enuPinDirection))
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
     a1c:	84 e0       	ldi	r24, 0x04	; 4
     a1e:	08 95       	ret
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
     a20:	80 e0       	ldi	r24, 0x00	; 0
	
	}
	return Ret_enuError;
		
		
}
     a22:	08 95       	ret

00000a24 <Timer1_Init>:
}

u16 Timer1_GetNumOVF(void)
{
	return Timer1_NumOVF;
}
     a24:	8f b5       	in	r24, 0x2f	; 47
     a26:	8c 7f       	andi	r24, 0xFC	; 252
     a28:	8f bd       	out	0x2f, r24	; 47
     a2a:	8e b5       	in	r24, 0x2e	; 46
     a2c:	87 7e       	andi	r24, 0xE7	; 231
     a2e:	8e bd       	out	0x2e, r24	; 46
     a30:	9f b5       	in	r25, 0x2f	; 47
     a32:	e3 ea       	ldi	r30, 0xA3	; 163
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
     a38:	83 70       	andi	r24, 0x03	; 3
     a3a:	89 2b       	or	r24, r25
     a3c:	8f bd       	out	0x2f, r24	; 47
     a3e:	9e b5       	in	r25, 0x2e	; 46
     a40:	80 81       	ld	r24, Z
     a42:	8c 70       	andi	r24, 0x0C	; 12
     a44:	89 2b       	or	r24, r25
     a46:	8e bd       	out	0x2e, r24	; 46
     a48:	8f b5       	in	r24, 0x2f	; 47
     a4a:	8f 70       	andi	r24, 0x0F	; 15
     a4c:	8f bd       	out	0x2f, r24	; 47
     a4e:	9f b5       	in	r25, 0x2f	; 47
     a50:	82 81       	ldd	r24, Z+2	; 0x02
     a52:	89 2b       	or	r24, r25
     a54:	8f bd       	out	0x2f, r24	; 47
     a56:	9f b5       	in	r25, 0x2f	; 47
     a58:	83 81       	ldd	r24, Z+3	; 0x03
     a5a:	89 2b       	or	r24, r25
     a5c:	8f bd       	out	0x2f, r24	; 47
     a5e:	80 81       	ld	r24, Z
     a60:	81 11       	cpse	r24, r1
     a62:	0a c0       	rjmp	.+20     	; 0xa78 <Timer1_Init+0x54>
     a64:	89 b7       	in	r24, 0x39	; 57
     a66:	84 60       	ori	r24, 0x04	; 4
     a68:	89 bf       	out	0x39, r24	; 57
     a6a:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <Timer1_Preload>
     a6e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <Timer1_Preload+0x1>
     a72:	9d bd       	out	0x2d, r25	; 45
     a74:	8c bd       	out	0x2c, r24	; 44
     a76:	66 c0       	rjmp	.+204    	; 0xb44 <Timer1_Init+0x120>
     a78:	88 30       	cpi	r24, 0x08	; 8
     a7a:	11 f0       	breq	.+4      	; 0xa80 <Timer1_Init+0x5c>
     a7c:	88 31       	cpi	r24, 0x18	; 24
     a7e:	d9 f4       	brne	.+54     	; 0xab6 <Timer1_Init+0x92>
     a80:	89 b7       	in	r24, 0x39	; 57
     a82:	88 61       	ori	r24, 0x18	; 24
     a84:	89 bf       	out	0x39, r24	; 57
     a86:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <Timer1_CompareMatchValueA>
     a8a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <Timer1_CompareMatchValueA+0x1>
     a8e:	9b bd       	out	0x2b, r25	; 43
     a90:	8a bd       	out	0x2a, r24	; 42
     a92:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <Timer1_CompareMatchValueB>
     a96:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <Timer1_CompareMatchValueB+0x1>
     a9a:	99 bd       	out	0x29, r25	; 41
     a9c:	88 bd       	out	0x28, r24	; 40
     a9e:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <Timer1_Config>
     aa2:	88 31       	cpi	r24, 0x18	; 24
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <Timer1_Init+0x84>
     aa6:	4e c0       	rjmp	.+156    	; 0xb44 <Timer1_Init+0x120>
     aa8:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <Timer1_ICR1_Value>
     aac:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <Timer1_ICR1_Value+0x1>
     ab0:	97 bd       	out	0x27, r25	; 39
     ab2:	86 bd       	out	0x26, r24	; 38
     ab4:	47 c0       	rjmp	.+142    	; 0xb44 <Timer1_Init+0x120>
     ab6:	97 ef       	ldi	r25, 0xF7	; 247
     ab8:	98 0f       	add	r25, r24
     aba:	93 30       	cpi	r25, 0x03	; 3
     abc:	20 f0       	brcs	.+8      	; 0xac6 <Timer1_Init+0xa2>
     abe:	88 31       	cpi	r24, 0x18	; 24
     ac0:	11 f0       	breq	.+4      	; 0xac6 <Timer1_Init+0xa2>
     ac2:	8a 31       	cpi	r24, 0x1A	; 26
     ac4:	e1 f4       	brne	.+56     	; 0xafe <Timer1_Init+0xda>
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	85 e3       	ldi	r24, 0x35	; 53
     aca:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	84 e3       	ldi	r24, 0x34	; 52
     ad2:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     ad6:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <Timer1_Config>
     ada:	8a 31       	cpi	r24, 0x1A	; 26
     adc:	39 f4       	brne	.+14     	; 0xaec <Timer1_Init+0xc8>
     ade:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <Timer1_ICR1_Value>
     ae2:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <Timer1_ICR1_Value+0x1>
     ae6:	97 bd       	out	0x27, r25	; 39
     ae8:	86 bd       	out	0x26, r24	; 38
     aea:	2c c0       	rjmp	.+88     	; 0xb44 <Timer1_Init+0x120>
     aec:	88 31       	cpi	r24, 0x18	; 24
     aee:	51 f5       	brne	.+84     	; 0xb44 <Timer1_Init+0x120>
     af0:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <Timer1_CompareMatchValueA>
     af4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <Timer1_CompareMatchValueA+0x1>
     af8:	9b bd       	out	0x2b, r25	; 43
     afa:	8a bd       	out	0x2a, r24	; 42
     afc:	23 c0       	rjmp	.+70     	; 0xb44 <Timer1_Init+0x120>
     afe:	9f ef       	ldi	r25, 0xFF	; 255
     b00:	98 0f       	add	r25, r24
     b02:	93 30       	cpi	r25, 0x03	; 3
     b04:	20 f0       	brcs	.+8      	; 0xb0e <Timer1_Init+0xea>
     b06:	82 31       	cpi	r24, 0x12	; 18
     b08:	11 f0       	breq	.+4      	; 0xb0e <Timer1_Init+0xea>
     b0a:	83 31       	cpi	r24, 0x13	; 19
     b0c:	d9 f4       	brne	.+54     	; 0xb44 <Timer1_Init+0x120>
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	85 e3       	ldi	r24, 0x35	; 53
     b12:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	84 e3       	ldi	r24, 0x34	; 52
     b1a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MPORT_enuSetPinDirection>
     b1e:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <Timer1_Config>
     b22:	82 31       	cpi	r24, 0x12	; 18
     b24:	39 f4       	brne	.+14     	; 0xb34 <Timer1_Init+0x110>
     b26:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <Timer1_ICR1_Value>
     b2a:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <Timer1_ICR1_Value+0x1>
     b2e:	97 bd       	out	0x27, r25	; 39
     b30:	86 bd       	out	0x26, r24	; 38
     b32:	08 c0       	rjmp	.+16     	; 0xb44 <Timer1_Init+0x120>
     b34:	83 31       	cpi	r24, 0x13	; 19
     b36:	31 f4       	brne	.+12     	; 0xb44 <Timer1_Init+0x120>
     b38:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <Timer1_CompareMatchValueA>
     b3c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <Timer1_CompareMatchValueA+0x1>
     b40:	9b bd       	out	0x2b, r25	; 43
     b42:	8a bd       	out	0x2a, r24	; 42
     b44:	8e b5       	in	r24, 0x2e	; 46
     b46:	88 7f       	andi	r24, 0xF8	; 248
     b48:	8e bd       	out	0x2e, r24	; 46
     b4a:	9e b5       	in	r25, 0x2e	; 46
     b4c:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <Timer1_Config+0x1>
     b50:	89 2b       	or	r24, r25
     b52:	8e bd       	out	0x2e, r24	; 46
     b54:	0e 94 49 00 	call	0x92	; 0x92 <GIE_VoidEnable>
     b58:	08 95       	ret

00000b5a <Timer1_SetCallBack_COMPA>:
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	31 f0       	breq	.+12     	; 0xb6a <Timer1_SetCallBack_COMPA+0x10>
     b5e:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <Timer1_PFUN_COMPA+0x1>
     b62:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <Timer1_PFUN_COMPA>
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	08 95       	ret
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	08 95       	ret

00000b6e <Timer1_CalculateNormalConfig>:
     b6e:	4f 92       	push	r4
     b70:	5f 92       	push	r5
     b72:	6f 92       	push	r6
     b74:	7f 92       	push	r7
     b76:	8f 92       	push	r8
     b78:	9f 92       	push	r9
     b7a:	af 92       	push	r10
     b7c:	bf 92       	push	r11
     b7e:	cf 92       	push	r12
     b80:	df 92       	push	r13
     b82:	ef 92       	push	r14
     b84:	ff 92       	push	r15
     b86:	0f 93       	push	r16
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <Timer1_CalculateNormalConfig+0x20>
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <Timer1_CalculateNormalConfig+0x22>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <Timer1_CalculateNormalConfig+0x24>
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	29 01       	movw	r4, r18
     b98:	3a 01       	movw	r6, r20
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a e7       	ldi	r20, 0x7A	; 122
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 29 08 	call	0x1052	; 0x1052 <__divsf3>
     ba6:	4b 01       	movw	r8, r22
     ba8:	5c 01       	movw	r10, r24
     baa:	b7 01       	movw	r22, r14
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatunsisf>
     bb4:	6b 01       	movw	r12, r22
     bb6:	7c 01       	movw	r14, r24
     bb8:	c3 01       	movw	r24, r6
     bba:	b2 01       	movw	r22, r4
     bbc:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatunsisf>
     bc0:	9b 01       	movw	r18, r22
     bc2:	ac 01       	movw	r20, r24
     bc4:	c7 01       	movw	r24, r14
     bc6:	b6 01       	movw	r22, r12
     bc8:	0e 94 29 08 	call	0x1052	; 0x1052 <__divsf3>
     bcc:	6b 01       	movw	r12, r22
     bce:	7c 01       	movw	r14, r24
     bd0:	21 e0       	ldi	r18, 0x01	; 1
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <Timer1_CalculateNormalConfig+0x6c>
     bd6:	22 0f       	add	r18, r18
     bd8:	33 1f       	adc	r19, r19
     bda:	0a 95       	dec	r16
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <Timer1_CalculateNormalConfig+0x68>
     bde:	3e 83       	std	Y+6, r19	; 0x06
     be0:	2d 83       	std	Y+5, r18	; 0x05
     be2:	b9 01       	movw	r22, r18
     be4:	33 0f       	add	r19, r19
     be6:	88 0b       	sbc	r24, r24
     be8:	99 0b       	sbc	r25, r25
     bea:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatunsisf>
     bee:	69 83       	std	Y+1, r22	; 0x01
     bf0:	7a 83       	std	Y+2, r23	; 0x02
     bf2:	8b 83       	std	Y+3, r24	; 0x03
     bf4:	9c 83       	std	Y+4, r25	; 0x04
     bf6:	9b 01       	movw	r18, r22
     bf8:	ac 01       	movw	r20, r24
     bfa:	c7 01       	movw	r24, r14
     bfc:	b6 01       	movw	r22, r12
     bfe:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__mulsf3>
     c02:	6b 01       	movw	r12, r22
     c04:	7c 01       	movw	r14, r24
     c06:	9b 01       	movw	r18, r22
     c08:	ac 01       	movw	r20, r24
     c0a:	c5 01       	movw	r24, r10
     c0c:	b4 01       	movw	r22, r8
     c0e:	0e 94 29 08 	call	0x1052	; 0x1052 <__divsf3>
     c12:	0e 94 9b 08 	call	0x1136	; 0x1136 <__fixunssfsi>
     c16:	2b 01       	movw	r4, r22
     c18:	3c 01       	movw	r6, r24
     c1a:	70 93 b5 00 	sts	0x00B5, r23	; 0x8000b5 <Timer1_NumOVF+0x1>
     c1e:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <Timer1_NumOVF>
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatunsisf>
     c2a:	a7 01       	movw	r20, r14
     c2c:	96 01       	movw	r18, r12
     c2e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__mulsf3>
     c32:	9b 01       	movw	r18, r22
     c34:	ac 01       	movw	r20, r24
     c36:	c5 01       	movw	r24, r10
     c38:	b4 01       	movw	r22, r8
     c3a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__subsf3>
     c3e:	4b 01       	movw	r8, r22
     c40:	5c 01       	movw	r10, r24
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	a9 01       	movw	r20, r18
     c48:	0e 94 de 09 	call	0x13bc	; 0x13bc <__gesf2>
     c4c:	18 16       	cp	r1, r24
     c4e:	ec f4       	brge	.+58     	; 0xc8a <Timer1_CalculateNormalConfig+0x11c>
     c50:	a5 01       	movw	r20, r10
     c52:	94 01       	movw	r18, r8
     c54:	69 81       	ldd	r22, Y+1	; 0x01
     c56:	7a 81       	ldd	r23, Y+2	; 0x02
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	9c 81       	ldd	r25, Y+4	; 0x04
     c5c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__mulsf3>
     c60:	a7 01       	movw	r20, r14
     c62:	96 01       	movw	r18, r12
     c64:	0e 94 29 08 	call	0x1052	; 0x1052 <__divsf3>
     c68:	0e 94 9b 08 	call	0x1136	; 0x1136 <__fixunssfsi>
     c6c:	2d 81       	ldd	r18, Y+5	; 0x05
     c6e:	3e 81       	ldd	r19, Y+6	; 0x06
     c70:	26 1b       	sub	r18, r22
     c72:	37 0b       	sbc	r19, r23
     c74:	30 93 bb 00 	sts	0x00BB, r19	; 0x8000bb <Timer1_Preload+0x1>
     c78:	20 93 ba 00 	sts	0x00BA, r18	; 0x8000ba <Timer1_Preload>
     c7c:	c2 01       	movw	r24, r4
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <Timer1_NumOVF+0x1>
     c84:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <Timer1_NumOVF>
     c88:	04 c0       	rjmp	.+8      	; 0xc92 <Timer1_CalculateNormalConfig+0x124>
     c8a:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <Timer1_Preload+0x1>
     c8e:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <Timer1_Preload>
     c92:	26 96       	adiw	r28, 0x06	; 6
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	0f 91       	pop	r16
     ca4:	ff 90       	pop	r15
     ca6:	ef 90       	pop	r14
     ca8:	df 90       	pop	r13
     caa:	cf 90       	pop	r12
     cac:	bf 90       	pop	r11
     cae:	af 90       	pop	r10
     cb0:	9f 90       	pop	r9
     cb2:	8f 90       	pop	r8
     cb4:	7f 90       	pop	r7
     cb6:	6f 90       	pop	r6
     cb8:	5f 90       	pop	r5
     cba:	4f 90       	pop	r4
     cbc:	08 95       	ret

00000cbe <Timer1_CalculateCTCConfigA>:
     cbe:	4f 92       	push	r4
     cc0:	5f 92       	push	r5
     cc2:	6f 92       	push	r6
     cc4:	7f 92       	push	r7
     cc6:	8f 92       	push	r8
     cc8:	9f 92       	push	r9
     cca:	af 92       	push	r10
     ccc:	bf 92       	push	r11
     cce:	cf 92       	push	r12
     cd0:	df 92       	push	r13
     cd2:	ef 92       	push	r14
     cd4:	ff 92       	push	r15
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	ea 01       	movw	r28, r20
     ce0:	28 01       	movw	r4, r16
     ce2:	39 01       	movw	r6, r18
     ce4:	57 01       	movw	r10, r14
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	4a e7       	ldi	r20, 0x7A	; 122
     cec:	54 e4       	ldi	r21, 0x44	; 68
     cee:	0e 94 29 08 	call	0x1052	; 0x1052 <__divsf3>
     cf2:	6b 01       	movw	r12, r22
     cf4:	7c 01       	movw	r14, r24
     cf6:	b5 01       	movw	r22, r10
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatunsisf>
     d00:	4b 01       	movw	r8, r22
     d02:	5c 01       	movw	r10, r24
     d04:	c3 01       	movw	r24, r6
     d06:	b2 01       	movw	r22, r4
     d08:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatunsisf>
     d0c:	9b 01       	movw	r18, r22
     d0e:	ac 01       	movw	r20, r24
     d10:	c5 01       	movw	r24, r10
     d12:	b4 01       	movw	r22, r8
     d14:	0e 94 29 08 	call	0x1052	; 0x1052 <__divsf3>
     d18:	4b 01       	movw	r8, r22
     d1a:	5c 01       	movw	r10, r24
     d1c:	9b 01       	movw	r18, r22
     d1e:	ac 01       	movw	r20, r24
     d20:	c7 01       	movw	r24, r14
     d22:	b6 01       	movw	r22, r12
     d24:	0e 94 29 08 	call	0x1052	; 0x1052 <__divsf3>
     d28:	2b 01       	movw	r4, r22
     d2a:	3c 01       	movw	r6, r24
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	3f ef       	ldi	r19, 0xFF	; 255
     d30:	4f e7       	ldi	r20, 0x7F	; 127
     d32:	57 e4       	ldi	r21, 0x47	; 71
     d34:	0e 94 de 09 	call	0x13bc	; 0x13bc <__gesf2>
     d38:	18 16       	cp	r1, r24
     d3a:	2c f4       	brge	.+10     	; 0xd46 <Timer1_CalculateCTCConfigA+0x88>
     d3c:	d0 93 b9 00 	sts	0x00B9, r29	; 0x8000b9 <Timer1_CompareMatchValueA+0x1>
     d40:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <Timer1_CompareMatchValueA>
     d44:	08 c0       	rjmp	.+16     	; 0xd56 <Timer1_CalculateCTCConfigA+0x98>
     d46:	c3 01       	movw	r24, r6
     d48:	b2 01       	movw	r22, r4
     d4a:	0e 94 9b 08 	call	0x1136	; 0x1136 <__fixunssfsi>
     d4e:	70 93 b9 00 	sts	0x00B9, r23	; 0x8000b9 <Timer1_CompareMatchValueA+0x1>
     d52:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <Timer1_CompareMatchValueA>
     d56:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <Timer1_CompareMatchValueA>
     d5a:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <Timer1_CompareMatchValueA+0x1>
     d5e:	6f 5f       	subi	r22, 0xFF	; 255
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatunsisf>
     d6a:	9b 01       	movw	r18, r22
     d6c:	ac 01       	movw	r20, r24
     d6e:	c5 01       	movw	r24, r10
     d70:	b4 01       	movw	r22, r8
     d72:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__mulsf3>
     d76:	4b 01       	movw	r8, r22
     d78:	5c 01       	movw	r10, r24
     d7a:	9b 01       	movw	r18, r22
     d7c:	ac 01       	movw	r20, r24
     d7e:	c7 01       	movw	r24, r14
     d80:	b6 01       	movw	r22, r12
     d82:	0e 94 29 08 	call	0x1052	; 0x1052 <__divsf3>
     d86:	0e 94 9b 08 	call	0x1136	; 0x1136 <__fixunssfsi>
     d8a:	70 93 b3 00 	sts	0x00B3, r23	; 0x8000b3 <Timer1_NumCompareMatchesA+0x1>
     d8e:	60 93 b2 00 	sts	0x00B2, r22	; 0x8000b2 <Timer1_NumCompareMatchesA>
     d92:	a5 01       	movw	r20, r10
     d94:	94 01       	movw	r18, r8
     d96:	c7 01       	movw	r24, r14
     d98:	b6 01       	movw	r22, r12
     d9a:	0e 94 12 09 	call	0x1224	; 0x1224 <fmod>
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	a9 01       	movw	r20, r18
     da4:	0e 94 24 08 	call	0x1048	; 0x1048 <__cmpsf2>
     da8:	88 23       	and	r24, r24
     daa:	49 f0       	breq	.+18     	; 0xdbe <Timer1_CalculateCTCConfigA+0x100>
     dac:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Timer1_NumCompareMatchesA>
     db0:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <Timer1_NumCompareMatchesA+0x1>
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <Timer1_NumCompareMatchesA+0x1>
     dba:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <Timer1_NumCompareMatchesA>
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	bf 90       	pop	r11
     dd0:	af 90       	pop	r10
     dd2:	9f 90       	pop	r9
     dd4:	8f 90       	pop	r8
     dd6:	7f 90       	pop	r7
     dd8:	6f 90       	pop	r6
     dda:	5f 90       	pop	r5
     ddc:	4f 90       	pop	r4
     dde:	08 95       	ret

00000de0 <__vector_9>:
     de0:	1f 92       	push	r1
     de2:	0f 92       	push	r0
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
     e02:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <Local_Counter.1813>
     e06:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <Local_Counter.1813+0x1>
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <Local_Counter.1813+0x1>
     e10:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <Local_Counter.1813>
     e14:	20 91 b4 00 	lds	r18, 0x00B4	; 0x8000b4 <Timer1_NumOVF>
     e18:	30 91 b5 00 	lds	r19, 0x00B5	; 0x8000b5 <Timer1_NumOVF+0x1>
     e1c:	82 17       	cp	r24, r18
     e1e:	93 07       	cpc	r25, r19
     e20:	89 f4       	brne	.+34     	; 0xe44 <__vector_9+0x64>
     e22:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <Local_Counter.1813+0x1>
     e26:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <Local_Counter.1813>
     e2a:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <Timer1_Preload>
     e2e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <Timer1_Preload+0x1>
     e32:	9d bd       	out	0x2d, r25	; 45
     e34:	8c bd       	out	0x2c, r24	; 44
     e36:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <Timer1_PFUN_OVF>
     e3a:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <Timer1_PFUN_OVF+0x1>
     e3e:	30 97       	sbiw	r30, 0x00	; 0
     e40:	09 f0       	breq	.+2      	; 0xe44 <__vector_9+0x64>
     e42:	09 95       	icall
     e44:	ff 91       	pop	r31
     e46:	ef 91       	pop	r30
     e48:	bf 91       	pop	r27
     e4a:	af 91       	pop	r26
     e4c:	9f 91       	pop	r25
     e4e:	8f 91       	pop	r24
     e50:	7f 91       	pop	r23
     e52:	6f 91       	pop	r22
     e54:	5f 91       	pop	r21
     e56:	4f 91       	pop	r20
     e58:	3f 91       	pop	r19
     e5a:	2f 91       	pop	r18
     e5c:	0f 90       	pop	r0
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	0f 90       	pop	r0
     e62:	1f 90       	pop	r1
     e64:	18 95       	reti

00000e66 <__vector_7>:
     e66:	1f 92       	push	r1
     e68:	0f 92       	push	r0
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	0f 92       	push	r0
     e6e:	11 24       	eor	r1, r1
     e70:	2f 93       	push	r18
     e72:	3f 93       	push	r19
     e74:	4f 93       	push	r20
     e76:	5f 93       	push	r21
     e78:	6f 93       	push	r22
     e7a:	7f 93       	push	r23
     e7c:	8f 93       	push	r24
     e7e:	9f 93       	push	r25
     e80:	af 93       	push	r26
     e82:	bf 93       	push	r27
     e84:	ef 93       	push	r30
     e86:	ff 93       	push	r31
     e88:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Local_Counter_A.1819>
     e8c:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <Local_Counter_A.1819+0x1>
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <Local_Counter_A.1819+0x1>
     e96:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Local_Counter_A.1819>
     e9a:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <Timer1_NumCompareMatchesA>
     e9e:	30 91 b3 00 	lds	r19, 0x00B3	; 0x8000b3 <Timer1_NumCompareMatchesA+0x1>
     ea2:	82 17       	cp	r24, r18
     ea4:	93 07       	cpc	r25, r19
     ea6:	59 f4       	brne	.+22     	; 0xebe <__vector_7+0x58>
     ea8:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <Local_Counter_A.1819+0x1>
     eac:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <Local_Counter_A.1819>
     eb0:	e0 91 be 00 	lds	r30, 0x00BE	; 0x8000be <Timer1_PFUN_COMPA>
     eb4:	f0 91 bf 00 	lds	r31, 0x00BF	; 0x8000bf <Timer1_PFUN_COMPA+0x1>
     eb8:	30 97       	sbiw	r30, 0x00	; 0
     eba:	09 f0       	breq	.+2      	; 0xebe <__vector_7+0x58>
     ebc:	09 95       	icall
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	0f 90       	pop	r0
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	0f 90       	pop	r0
     edc:	1f 90       	pop	r1
     ede:	18 95       	reti

00000ee0 <__vector_8>:
     ee0:	1f 92       	push	r1
     ee2:	0f 92       	push	r0
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	0f 92       	push	r0
     ee8:	11 24       	eor	r1, r1
     eea:	2f 93       	push	r18
     eec:	3f 93       	push	r19
     eee:	4f 93       	push	r20
     ef0:	5f 93       	push	r21
     ef2:	6f 93       	push	r22
     ef4:	7f 93       	push	r23
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
     efa:	af 93       	push	r26
     efc:	bf 93       	push	r27
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31
     f02:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
     f06:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__data_end+0x1>
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__data_end+0x1>
     f10:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__data_end>
     f14:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <Timer1_NumCompareMatchesB>
     f18:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <Timer1_NumCompareMatchesB+0x1>
     f1c:	82 17       	cp	r24, r18
     f1e:	93 07       	cpc	r25, r19
     f20:	59 f4       	brne	.+22     	; 0xf38 <__vector_8+0x58>
     f22:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__data_end+0x1>
     f26:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end>
     f2a:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <Timer1_PFUN_COMPB>
     f2e:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <Timer1_PFUN_COMPB+0x1>
     f32:	30 97       	sbiw	r30, 0x00	; 0
     f34:	09 f0       	breq	.+2      	; 0xf38 <__vector_8+0x58>
     f36:	09 95       	icall
     f38:	ff 91       	pop	r31
     f3a:	ef 91       	pop	r30
     f3c:	bf 91       	pop	r27
     f3e:	af 91       	pop	r26
     f40:	9f 91       	pop	r25
     f42:	8f 91       	pop	r24
     f44:	7f 91       	pop	r23
     f46:	6f 91       	pop	r22
     f48:	5f 91       	pop	r21
     f4a:	4f 91       	pop	r20
     f4c:	3f 91       	pop	r19
     f4e:	2f 91       	pop	r18
     f50:	0f 90       	pop	r0
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	0f 90       	pop	r0
     f56:	1f 90       	pop	r1
     f58:	18 95       	reti

00000f5a <Timer1_GetCompareMatchValueA>:
     f5a:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <Timer1_CompareMatchValueA>
     f5e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <Timer1_CompareMatchValueA+0x1>
     f62:	08 95       	ret

00000f64 <Timer1_GetNumCompareMatchesA>:

u16 Timer1_GetNumCompareMatchesA(void)
{
	return Timer1_NumCompareMatchesA;
}
     f64:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Timer1_NumCompareMatchesA>
     f68:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <Timer1_NumCompareMatchesA+0x1>
     f6c:	08 95       	ret

00000f6e <__subsf3>:
     f6e:	50 58       	subi	r21, 0x80	; 128

00000f70 <__addsf3>:
     f70:	bb 27       	eor	r27, r27
     f72:	aa 27       	eor	r26, r26
     f74:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__addsf3x>
     f78:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__fp_round>
     f7c:	0e 94 96 09 	call	0x132c	; 0x132c <__fp_pscA>
     f80:	38 f0       	brcs	.+14     	; 0xf90 <__addsf3+0x20>
     f82:	0e 94 9d 09 	call	0x133a	; 0x133a <__fp_pscB>
     f86:	20 f0       	brcs	.+8      	; 0xf90 <__addsf3+0x20>
     f88:	39 f4       	brne	.+14     	; 0xf98 <__addsf3+0x28>
     f8a:	9f 3f       	cpi	r25, 0xFF	; 255
     f8c:	19 f4       	brne	.+6      	; 0xf94 <__addsf3+0x24>
     f8e:	26 f4       	brtc	.+8      	; 0xf98 <__addsf3+0x28>
     f90:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__fp_nan>
     f94:	0e f4       	brtc	.+2      	; 0xf98 <__addsf3+0x28>
     f96:	e0 95       	com	r30
     f98:	e7 fb       	bst	r30, 7
     f9a:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__fp_inf>

00000f9e <__addsf3x>:
     f9e:	e9 2f       	mov	r30, r25
     fa0:	0e 94 b5 09 	call	0x136a	; 0x136a <__fp_split3>
     fa4:	58 f3       	brcs	.-42     	; 0xf7c <__addsf3+0xc>
     fa6:	ba 17       	cp	r27, r26
     fa8:	62 07       	cpc	r22, r18
     faa:	73 07       	cpc	r23, r19
     fac:	84 07       	cpc	r24, r20
     fae:	95 07       	cpc	r25, r21
     fb0:	20 f0       	brcs	.+8      	; 0xfba <__addsf3x+0x1c>
     fb2:	79 f4       	brne	.+30     	; 0xfd2 <__addsf3x+0x34>
     fb4:	a6 f5       	brtc	.+104    	; 0x101e <__addsf3x+0x80>
     fb6:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__fp_zero>
     fba:	0e f4       	brtc	.+2      	; 0xfbe <__addsf3x+0x20>
     fbc:	e0 95       	com	r30
     fbe:	0b 2e       	mov	r0, r27
     fc0:	ba 2f       	mov	r27, r26
     fc2:	a0 2d       	mov	r26, r0
     fc4:	0b 01       	movw	r0, r22
     fc6:	b9 01       	movw	r22, r18
     fc8:	90 01       	movw	r18, r0
     fca:	0c 01       	movw	r0, r24
     fcc:	ca 01       	movw	r24, r20
     fce:	a0 01       	movw	r20, r0
     fd0:	11 24       	eor	r1, r1
     fd2:	ff 27       	eor	r31, r31
     fd4:	59 1b       	sub	r21, r25
     fd6:	99 f0       	breq	.+38     	; 0xffe <__addsf3x+0x60>
     fd8:	59 3f       	cpi	r21, 0xF9	; 249
     fda:	50 f4       	brcc	.+20     	; 0xff0 <__addsf3x+0x52>
     fdc:	50 3e       	cpi	r21, 0xE0	; 224
     fde:	68 f1       	brcs	.+90     	; 0x103a <__addsf3x+0x9c>
     fe0:	1a 16       	cp	r1, r26
     fe2:	f0 40       	sbci	r31, 0x00	; 0
     fe4:	a2 2f       	mov	r26, r18
     fe6:	23 2f       	mov	r18, r19
     fe8:	34 2f       	mov	r19, r20
     fea:	44 27       	eor	r20, r20
     fec:	58 5f       	subi	r21, 0xF8	; 248
     fee:	f3 cf       	rjmp	.-26     	; 0xfd6 <__addsf3x+0x38>
     ff0:	46 95       	lsr	r20
     ff2:	37 95       	ror	r19
     ff4:	27 95       	ror	r18
     ff6:	a7 95       	ror	r26
     ff8:	f0 40       	sbci	r31, 0x00	; 0
     ffa:	53 95       	inc	r21
     ffc:	c9 f7       	brne	.-14     	; 0xff0 <__addsf3x+0x52>
     ffe:	7e f4       	brtc	.+30     	; 0x101e <__addsf3x+0x80>
    1000:	1f 16       	cp	r1, r31
    1002:	ba 0b       	sbc	r27, r26
    1004:	62 0b       	sbc	r22, r18
    1006:	73 0b       	sbc	r23, r19
    1008:	84 0b       	sbc	r24, r20
    100a:	ba f0       	brmi	.+46     	; 0x103a <__addsf3x+0x9c>
    100c:	91 50       	subi	r25, 0x01	; 1
    100e:	a1 f0       	breq	.+40     	; 0x1038 <__addsf3x+0x9a>
    1010:	ff 0f       	add	r31, r31
    1012:	bb 1f       	adc	r27, r27
    1014:	66 1f       	adc	r22, r22
    1016:	77 1f       	adc	r23, r23
    1018:	88 1f       	adc	r24, r24
    101a:	c2 f7       	brpl	.-16     	; 0x100c <__addsf3x+0x6e>
    101c:	0e c0       	rjmp	.+28     	; 0x103a <__addsf3x+0x9c>
    101e:	ba 0f       	add	r27, r26
    1020:	62 1f       	adc	r22, r18
    1022:	73 1f       	adc	r23, r19
    1024:	84 1f       	adc	r24, r20
    1026:	48 f4       	brcc	.+18     	; 0x103a <__addsf3x+0x9c>
    1028:	87 95       	ror	r24
    102a:	77 95       	ror	r23
    102c:	67 95       	ror	r22
    102e:	b7 95       	ror	r27
    1030:	f7 95       	ror	r31
    1032:	9e 3f       	cpi	r25, 0xFE	; 254
    1034:	08 f0       	brcs	.+2      	; 0x1038 <__addsf3x+0x9a>
    1036:	b0 cf       	rjmp	.-160    	; 0xf98 <__addsf3+0x28>
    1038:	93 95       	inc	r25
    103a:	88 0f       	add	r24, r24
    103c:	08 f0       	brcs	.+2      	; 0x1040 <__addsf3x+0xa2>
    103e:	99 27       	eor	r25, r25
    1040:	ee 0f       	add	r30, r30
    1042:	97 95       	ror	r25
    1044:	87 95       	ror	r24
    1046:	08 95       	ret

00001048 <__cmpsf2>:
    1048:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__fp_cmp>
    104c:	08 f4       	brcc	.+2      	; 0x1050 <__cmpsf2+0x8>
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	08 95       	ret

00001052 <__divsf3>:
    1052:	0e 94 3d 08 	call	0x107a	; 0x107a <__divsf3x>
    1056:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__fp_round>
    105a:	0e 94 9d 09 	call	0x133a	; 0x133a <__fp_pscB>
    105e:	58 f0       	brcs	.+22     	; 0x1076 <__divsf3+0x24>
    1060:	0e 94 96 09 	call	0x132c	; 0x132c <__fp_pscA>
    1064:	40 f0       	brcs	.+16     	; 0x1076 <__divsf3+0x24>
    1066:	29 f4       	brne	.+10     	; 0x1072 <__divsf3+0x20>
    1068:	5f 3f       	cpi	r21, 0xFF	; 255
    106a:	29 f0       	breq	.+10     	; 0x1076 <__divsf3+0x24>
    106c:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__fp_inf>
    1070:	51 11       	cpse	r21, r1
    1072:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_szero>
    1076:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__fp_nan>

0000107a <__divsf3x>:
    107a:	0e 94 b5 09 	call	0x136a	; 0x136a <__fp_split3>
    107e:	68 f3       	brcs	.-38     	; 0x105a <__divsf3+0x8>

00001080 <__divsf3_pse>:
    1080:	99 23       	and	r25, r25
    1082:	b1 f3       	breq	.-20     	; 0x1070 <__divsf3+0x1e>
    1084:	55 23       	and	r21, r21
    1086:	91 f3       	breq	.-28     	; 0x106c <__divsf3+0x1a>
    1088:	95 1b       	sub	r25, r21
    108a:	55 0b       	sbc	r21, r21
    108c:	bb 27       	eor	r27, r27
    108e:	aa 27       	eor	r26, r26
    1090:	62 17       	cp	r22, r18
    1092:	73 07       	cpc	r23, r19
    1094:	84 07       	cpc	r24, r20
    1096:	38 f0       	brcs	.+14     	; 0x10a6 <__divsf3_pse+0x26>
    1098:	9f 5f       	subi	r25, 0xFF	; 255
    109a:	5f 4f       	sbci	r21, 0xFF	; 255
    109c:	22 0f       	add	r18, r18
    109e:	33 1f       	adc	r19, r19
    10a0:	44 1f       	adc	r20, r20
    10a2:	aa 1f       	adc	r26, r26
    10a4:	a9 f3       	breq	.-22     	; 0x1090 <__divsf3_pse+0x10>
    10a6:	35 d0       	rcall	.+106    	; 0x1112 <__divsf3_pse+0x92>
    10a8:	0e 2e       	mov	r0, r30
    10aa:	3a f0       	brmi	.+14     	; 0x10ba <__divsf3_pse+0x3a>
    10ac:	e0 e8       	ldi	r30, 0x80	; 128
    10ae:	32 d0       	rcall	.+100    	; 0x1114 <__divsf3_pse+0x94>
    10b0:	91 50       	subi	r25, 0x01	; 1
    10b2:	50 40       	sbci	r21, 0x00	; 0
    10b4:	e6 95       	lsr	r30
    10b6:	00 1c       	adc	r0, r0
    10b8:	ca f7       	brpl	.-14     	; 0x10ac <__divsf3_pse+0x2c>
    10ba:	2b d0       	rcall	.+86     	; 0x1112 <__divsf3_pse+0x92>
    10bc:	fe 2f       	mov	r31, r30
    10be:	29 d0       	rcall	.+82     	; 0x1112 <__divsf3_pse+0x92>
    10c0:	66 0f       	add	r22, r22
    10c2:	77 1f       	adc	r23, r23
    10c4:	88 1f       	adc	r24, r24
    10c6:	bb 1f       	adc	r27, r27
    10c8:	26 17       	cp	r18, r22
    10ca:	37 07       	cpc	r19, r23
    10cc:	48 07       	cpc	r20, r24
    10ce:	ab 07       	cpc	r26, r27
    10d0:	b0 e8       	ldi	r27, 0x80	; 128
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <__divsf3_pse+0x56>
    10d4:	bb 0b       	sbc	r27, r27
    10d6:	80 2d       	mov	r24, r0
    10d8:	bf 01       	movw	r22, r30
    10da:	ff 27       	eor	r31, r31
    10dc:	93 58       	subi	r25, 0x83	; 131
    10de:	5f 4f       	sbci	r21, 0xFF	; 255
    10e0:	3a f0       	brmi	.+14     	; 0x10f0 <__divsf3_pse+0x70>
    10e2:	9e 3f       	cpi	r25, 0xFE	; 254
    10e4:	51 05       	cpc	r21, r1
    10e6:	78 f0       	brcs	.+30     	; 0x1106 <__divsf3_pse+0x86>
    10e8:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__fp_inf>
    10ec:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_szero>
    10f0:	5f 3f       	cpi	r21, 0xFF	; 255
    10f2:	e4 f3       	brlt	.-8      	; 0x10ec <__divsf3_pse+0x6c>
    10f4:	98 3e       	cpi	r25, 0xE8	; 232
    10f6:	d4 f3       	brlt	.-12     	; 0x10ec <__divsf3_pse+0x6c>
    10f8:	86 95       	lsr	r24
    10fa:	77 95       	ror	r23
    10fc:	67 95       	ror	r22
    10fe:	b7 95       	ror	r27
    1100:	f7 95       	ror	r31
    1102:	9f 5f       	subi	r25, 0xFF	; 255
    1104:	c9 f7       	brne	.-14     	; 0x10f8 <__divsf3_pse+0x78>
    1106:	88 0f       	add	r24, r24
    1108:	91 1d       	adc	r25, r1
    110a:	96 95       	lsr	r25
    110c:	87 95       	ror	r24
    110e:	97 f9       	bld	r25, 7
    1110:	08 95       	ret
    1112:	e1 e0       	ldi	r30, 0x01	; 1
    1114:	66 0f       	add	r22, r22
    1116:	77 1f       	adc	r23, r23
    1118:	88 1f       	adc	r24, r24
    111a:	bb 1f       	adc	r27, r27
    111c:	62 17       	cp	r22, r18
    111e:	73 07       	cpc	r23, r19
    1120:	84 07       	cpc	r24, r20
    1122:	ba 07       	cpc	r27, r26
    1124:	20 f0       	brcs	.+8      	; 0x112e <__divsf3_pse+0xae>
    1126:	62 1b       	sub	r22, r18
    1128:	73 0b       	sbc	r23, r19
    112a:	84 0b       	sbc	r24, r20
    112c:	ba 0b       	sbc	r27, r26
    112e:	ee 1f       	adc	r30, r30
    1130:	88 f7       	brcc	.-30     	; 0x1114 <__divsf3_pse+0x94>
    1132:	e0 95       	com	r30
    1134:	08 95       	ret

00001136 <__fixunssfsi>:
    1136:	0e 94 bd 09 	call	0x137a	; 0x137a <__fp_splitA>
    113a:	88 f0       	brcs	.+34     	; 0x115e <__fixunssfsi+0x28>
    113c:	9f 57       	subi	r25, 0x7F	; 127
    113e:	98 f0       	brcs	.+38     	; 0x1166 <__fixunssfsi+0x30>
    1140:	b9 2f       	mov	r27, r25
    1142:	99 27       	eor	r25, r25
    1144:	b7 51       	subi	r27, 0x17	; 23
    1146:	b0 f0       	brcs	.+44     	; 0x1174 <__fixunssfsi+0x3e>
    1148:	e1 f0       	breq	.+56     	; 0x1182 <__fixunssfsi+0x4c>
    114a:	66 0f       	add	r22, r22
    114c:	77 1f       	adc	r23, r23
    114e:	88 1f       	adc	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	1a f0       	brmi	.+6      	; 0x115a <__fixunssfsi+0x24>
    1154:	ba 95       	dec	r27
    1156:	c9 f7       	brne	.-14     	; 0x114a <__fixunssfsi+0x14>
    1158:	14 c0       	rjmp	.+40     	; 0x1182 <__fixunssfsi+0x4c>
    115a:	b1 30       	cpi	r27, 0x01	; 1
    115c:	91 f0       	breq	.+36     	; 0x1182 <__fixunssfsi+0x4c>
    115e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__fp_zero>
    1162:	b1 e0       	ldi	r27, 0x01	; 1
    1164:	08 95       	ret
    1166:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__fp_zero>
    116a:	67 2f       	mov	r22, r23
    116c:	78 2f       	mov	r23, r24
    116e:	88 27       	eor	r24, r24
    1170:	b8 5f       	subi	r27, 0xF8	; 248
    1172:	39 f0       	breq	.+14     	; 0x1182 <__fixunssfsi+0x4c>
    1174:	b9 3f       	cpi	r27, 0xF9	; 249
    1176:	cc f3       	brlt	.-14     	; 0x116a <__fixunssfsi+0x34>
    1178:	86 95       	lsr	r24
    117a:	77 95       	ror	r23
    117c:	67 95       	ror	r22
    117e:	b3 95       	inc	r27
    1180:	d9 f7       	brne	.-10     	; 0x1178 <__fixunssfsi+0x42>
    1182:	3e f4       	brtc	.+14     	; 0x1192 <__fixunssfsi+0x5c>
    1184:	90 95       	com	r25
    1186:	80 95       	com	r24
    1188:	70 95       	com	r23
    118a:	61 95       	neg	r22
    118c:	7f 4f       	sbci	r23, 0xFF	; 255
    118e:	8f 4f       	sbci	r24, 0xFF	; 255
    1190:	9f 4f       	sbci	r25, 0xFF	; 255
    1192:	08 95       	ret

00001194 <__floatunsisf>:
    1194:	e8 94       	clt
    1196:	09 c0       	rjmp	.+18     	; 0x11aa <__floatsisf+0x12>

00001198 <__floatsisf>:
    1198:	97 fb       	bst	r25, 7
    119a:	3e f4       	brtc	.+14     	; 0x11aa <__floatsisf+0x12>
    119c:	90 95       	com	r25
    119e:	80 95       	com	r24
    11a0:	70 95       	com	r23
    11a2:	61 95       	neg	r22
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	8f 4f       	sbci	r24, 0xFF	; 255
    11a8:	9f 4f       	sbci	r25, 0xFF	; 255
    11aa:	99 23       	and	r25, r25
    11ac:	a9 f0       	breq	.+42     	; 0x11d8 <__floatsisf+0x40>
    11ae:	f9 2f       	mov	r31, r25
    11b0:	96 e9       	ldi	r25, 0x96	; 150
    11b2:	bb 27       	eor	r27, r27
    11b4:	93 95       	inc	r25
    11b6:	f6 95       	lsr	r31
    11b8:	87 95       	ror	r24
    11ba:	77 95       	ror	r23
    11bc:	67 95       	ror	r22
    11be:	b7 95       	ror	r27
    11c0:	f1 11       	cpse	r31, r1
    11c2:	f8 cf       	rjmp	.-16     	; 0x11b4 <__floatsisf+0x1c>
    11c4:	fa f4       	brpl	.+62     	; 0x1204 <__floatsisf+0x6c>
    11c6:	bb 0f       	add	r27, r27
    11c8:	11 f4       	brne	.+4      	; 0x11ce <__floatsisf+0x36>
    11ca:	60 ff       	sbrs	r22, 0
    11cc:	1b c0       	rjmp	.+54     	; 0x1204 <__floatsisf+0x6c>
    11ce:	6f 5f       	subi	r22, 0xFF	; 255
    11d0:	7f 4f       	sbci	r23, 0xFF	; 255
    11d2:	8f 4f       	sbci	r24, 0xFF	; 255
    11d4:	9f 4f       	sbci	r25, 0xFF	; 255
    11d6:	16 c0       	rjmp	.+44     	; 0x1204 <__floatsisf+0x6c>
    11d8:	88 23       	and	r24, r24
    11da:	11 f0       	breq	.+4      	; 0x11e0 <__floatsisf+0x48>
    11dc:	96 e9       	ldi	r25, 0x96	; 150
    11de:	11 c0       	rjmp	.+34     	; 0x1202 <__floatsisf+0x6a>
    11e0:	77 23       	and	r23, r23
    11e2:	21 f0       	breq	.+8      	; 0x11ec <__floatsisf+0x54>
    11e4:	9e e8       	ldi	r25, 0x8E	; 142
    11e6:	87 2f       	mov	r24, r23
    11e8:	76 2f       	mov	r23, r22
    11ea:	05 c0       	rjmp	.+10     	; 0x11f6 <__floatsisf+0x5e>
    11ec:	66 23       	and	r22, r22
    11ee:	71 f0       	breq	.+28     	; 0x120c <__floatsisf+0x74>
    11f0:	96 e8       	ldi	r25, 0x86	; 134
    11f2:	86 2f       	mov	r24, r22
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	2a f0       	brmi	.+10     	; 0x1204 <__floatsisf+0x6c>
    11fa:	9a 95       	dec	r25
    11fc:	66 0f       	add	r22, r22
    11fe:	77 1f       	adc	r23, r23
    1200:	88 1f       	adc	r24, r24
    1202:	da f7       	brpl	.-10     	; 0x11fa <__floatsisf+0x62>
    1204:	88 0f       	add	r24, r24
    1206:	96 95       	lsr	r25
    1208:	87 95       	ror	r24
    120a:	97 f9       	bld	r25, 7
    120c:	08 95       	ret
    120e:	0e 94 96 09 	call	0x132c	; 0x132c <__fp_pscA>
    1212:	20 f0       	brcs	.+8      	; 0x121c <__floatsisf+0x84>
    1214:	19 f0       	breq	.+6      	; 0x121c <__floatsisf+0x84>
    1216:	0e 94 9d 09 	call	0x133a	; 0x133a <__fp_pscB>
    121a:	50 f4       	brcc	.+20     	; 0x1230 <fmod+0xc>
    121c:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__fp_nan>
    1220:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_szero>

00001224 <fmod>:
    1224:	e9 2f       	mov	r30, r25
    1226:	0e 94 b5 09 	call	0x136a	; 0x136a <__fp_split3>
    122a:	88 f3       	brcs	.-30     	; 0x120e <__floatsisf+0x76>
    122c:	55 23       	and	r21, r21
    122e:	b1 f3       	breq	.-20     	; 0x121c <__floatsisf+0x84>
    1230:	e7 fb       	bst	r30, 7
    1232:	62 17       	cp	r22, r18
    1234:	73 07       	cpc	r23, r19
    1236:	84 07       	cpc	r24, r20
    1238:	95 07       	cpc	r25, r21
    123a:	a8 f1       	brcs	.+106    	; 0x12a6 <fmod+0x82>
    123c:	89 f3       	breq	.-30     	; 0x1220 <__floatsisf+0x88>
    123e:	e9 2f       	mov	r30, r25
    1240:	ff 27       	eor	r31, r31
    1242:	88 23       	and	r24, r24
    1244:	2a f0       	brmi	.+10     	; 0x1250 <fmod+0x2c>
    1246:	31 97       	sbiw	r30, 0x01	; 1
    1248:	66 0f       	add	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	88 1f       	adc	r24, r24
    124e:	da f7       	brpl	.-10     	; 0x1246 <fmod+0x22>
    1250:	95 2f       	mov	r25, r21
    1252:	55 27       	eor	r21, r21
    1254:	44 23       	and	r20, r20
    1256:	32 f0       	brmi	.+12     	; 0x1264 <fmod+0x40>
    1258:	91 50       	subi	r25, 0x01	; 1
    125a:	50 40       	sbci	r21, 0x00	; 0
    125c:	22 0f       	add	r18, r18
    125e:	33 1f       	adc	r19, r19
    1260:	44 1f       	adc	r20, r20
    1262:	d2 f7       	brpl	.-12     	; 0x1258 <fmod+0x34>
    1264:	bb 27       	eor	r27, r27
    1266:	e9 1b       	sub	r30, r25
    1268:	f5 0b       	sbc	r31, r21
    126a:	62 1b       	sub	r22, r18
    126c:	73 0b       	sbc	r23, r19
    126e:	84 0b       	sbc	r24, r20
    1270:	b1 09       	sbc	r27, r1
    1272:	b1 f2       	breq	.-84     	; 0x1220 <__floatsisf+0x88>
    1274:	22 f4       	brpl	.+8      	; 0x127e <fmod+0x5a>
    1276:	62 0f       	add	r22, r18
    1278:	73 1f       	adc	r23, r19
    127a:	84 1f       	adc	r24, r20
    127c:	b1 1d       	adc	r27, r1
    127e:	31 97       	sbiw	r30, 0x01	; 1
    1280:	2a f0       	brmi	.+10     	; 0x128c <fmod+0x68>
    1282:	66 0f       	add	r22, r22
    1284:	77 1f       	adc	r23, r23
    1286:	88 1f       	adc	r24, r24
    1288:	bb 1f       	adc	r27, r27
    128a:	ef cf       	rjmp	.-34     	; 0x126a <fmod+0x46>
    128c:	91 50       	subi	r25, 0x01	; 1
    128e:	50 40       	sbci	r21, 0x00	; 0
    1290:	62 f0       	brmi	.+24     	; 0x12aa <fmod+0x86>
    1292:	41 f0       	breq	.+16     	; 0x12a4 <fmod+0x80>
    1294:	88 23       	and	r24, r24
    1296:	32 f0       	brmi	.+12     	; 0x12a4 <fmod+0x80>
    1298:	66 0f       	add	r22, r22
    129a:	77 1f       	adc	r23, r23
    129c:	88 1f       	adc	r24, r24
    129e:	91 50       	subi	r25, 0x01	; 1
    12a0:	50 40       	sbci	r21, 0x00	; 0
    12a2:	c1 f7       	brne	.-16     	; 0x1294 <fmod+0x70>
    12a4:	93 95       	inc	r25
    12a6:	0c 94 85 09 	jmp	0x130a	; 0x130a <__fp_mpack>
    12aa:	86 95       	lsr	r24
    12ac:	77 95       	ror	r23
    12ae:	67 95       	ror	r22
    12b0:	9f 5f       	subi	r25, 0xFF	; 255
    12b2:	d9 f7       	brne	.-10     	; 0x12aa <fmod+0x86>
    12b4:	f7 cf       	rjmp	.-18     	; 0x12a4 <fmod+0x80>

000012b6 <__fp_cmp>:
    12b6:	99 0f       	add	r25, r25
    12b8:	00 08       	sbc	r0, r0
    12ba:	55 0f       	add	r21, r21
    12bc:	aa 0b       	sbc	r26, r26
    12be:	e0 e8       	ldi	r30, 0x80	; 128
    12c0:	fe ef       	ldi	r31, 0xFE	; 254
    12c2:	16 16       	cp	r1, r22
    12c4:	17 06       	cpc	r1, r23
    12c6:	e8 07       	cpc	r30, r24
    12c8:	f9 07       	cpc	r31, r25
    12ca:	c0 f0       	brcs	.+48     	; 0x12fc <__fp_cmp+0x46>
    12cc:	12 16       	cp	r1, r18
    12ce:	13 06       	cpc	r1, r19
    12d0:	e4 07       	cpc	r30, r20
    12d2:	f5 07       	cpc	r31, r21
    12d4:	98 f0       	brcs	.+38     	; 0x12fc <__fp_cmp+0x46>
    12d6:	62 1b       	sub	r22, r18
    12d8:	73 0b       	sbc	r23, r19
    12da:	84 0b       	sbc	r24, r20
    12dc:	95 0b       	sbc	r25, r21
    12de:	39 f4       	brne	.+14     	; 0x12ee <__fp_cmp+0x38>
    12e0:	0a 26       	eor	r0, r26
    12e2:	61 f0       	breq	.+24     	; 0x12fc <__fp_cmp+0x46>
    12e4:	23 2b       	or	r18, r19
    12e6:	24 2b       	or	r18, r20
    12e8:	25 2b       	or	r18, r21
    12ea:	21 f4       	brne	.+8      	; 0x12f4 <__fp_cmp+0x3e>
    12ec:	08 95       	ret
    12ee:	0a 26       	eor	r0, r26
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <__fp_cmp+0x3e>
    12f2:	a1 40       	sbci	r26, 0x01	; 1
    12f4:	a6 95       	lsr	r26
    12f6:	8f ef       	ldi	r24, 0xFF	; 255
    12f8:	81 1d       	adc	r24, r1
    12fa:	81 1d       	adc	r24, r1
    12fc:	08 95       	ret

000012fe <__fp_inf>:
    12fe:	97 f9       	bld	r25, 7
    1300:	9f 67       	ori	r25, 0x7F	; 127
    1302:	80 e8       	ldi	r24, 0x80	; 128
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	08 95       	ret

0000130a <__fp_mpack>:
    130a:	9f 3f       	cpi	r25, 0xFF	; 255
    130c:	31 f0       	breq	.+12     	; 0x131a <__fp_mpack_finite+0xc>

0000130e <__fp_mpack_finite>:
    130e:	91 50       	subi	r25, 0x01	; 1
    1310:	20 f4       	brcc	.+8      	; 0x131a <__fp_mpack_finite+0xc>
    1312:	87 95       	ror	r24
    1314:	77 95       	ror	r23
    1316:	67 95       	ror	r22
    1318:	b7 95       	ror	r27
    131a:	88 0f       	add	r24, r24
    131c:	91 1d       	adc	r25, r1
    131e:	96 95       	lsr	r25
    1320:	87 95       	ror	r24
    1322:	97 f9       	bld	r25, 7
    1324:	08 95       	ret

00001326 <__fp_nan>:
    1326:	9f ef       	ldi	r25, 0xFF	; 255
    1328:	80 ec       	ldi	r24, 0xC0	; 192
    132a:	08 95       	ret

0000132c <__fp_pscA>:
    132c:	00 24       	eor	r0, r0
    132e:	0a 94       	dec	r0
    1330:	16 16       	cp	r1, r22
    1332:	17 06       	cpc	r1, r23
    1334:	18 06       	cpc	r1, r24
    1336:	09 06       	cpc	r0, r25
    1338:	08 95       	ret

0000133a <__fp_pscB>:
    133a:	00 24       	eor	r0, r0
    133c:	0a 94       	dec	r0
    133e:	12 16       	cp	r1, r18
    1340:	13 06       	cpc	r1, r19
    1342:	14 06       	cpc	r1, r20
    1344:	05 06       	cpc	r0, r21
    1346:	08 95       	ret

00001348 <__fp_round>:
    1348:	09 2e       	mov	r0, r25
    134a:	03 94       	inc	r0
    134c:	00 0c       	add	r0, r0
    134e:	11 f4       	brne	.+4      	; 0x1354 <__fp_round+0xc>
    1350:	88 23       	and	r24, r24
    1352:	52 f0       	brmi	.+20     	; 0x1368 <__fp_round+0x20>
    1354:	bb 0f       	add	r27, r27
    1356:	40 f4       	brcc	.+16     	; 0x1368 <__fp_round+0x20>
    1358:	bf 2b       	or	r27, r31
    135a:	11 f4       	brne	.+4      	; 0x1360 <__fp_round+0x18>
    135c:	60 ff       	sbrs	r22, 0
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <__fp_round+0x20>
    1360:	6f 5f       	subi	r22, 0xFF	; 255
    1362:	7f 4f       	sbci	r23, 0xFF	; 255
    1364:	8f 4f       	sbci	r24, 0xFF	; 255
    1366:	9f 4f       	sbci	r25, 0xFF	; 255
    1368:	08 95       	ret

0000136a <__fp_split3>:
    136a:	57 fd       	sbrc	r21, 7
    136c:	90 58       	subi	r25, 0x80	; 128
    136e:	44 0f       	add	r20, r20
    1370:	55 1f       	adc	r21, r21
    1372:	59 f0       	breq	.+22     	; 0x138a <__fp_splitA+0x10>
    1374:	5f 3f       	cpi	r21, 0xFF	; 255
    1376:	71 f0       	breq	.+28     	; 0x1394 <__fp_splitA+0x1a>
    1378:	47 95       	ror	r20

0000137a <__fp_splitA>:
    137a:	88 0f       	add	r24, r24
    137c:	97 fb       	bst	r25, 7
    137e:	99 1f       	adc	r25, r25
    1380:	61 f0       	breq	.+24     	; 0x139a <__fp_splitA+0x20>
    1382:	9f 3f       	cpi	r25, 0xFF	; 255
    1384:	79 f0       	breq	.+30     	; 0x13a4 <__fp_splitA+0x2a>
    1386:	87 95       	ror	r24
    1388:	08 95       	ret
    138a:	12 16       	cp	r1, r18
    138c:	13 06       	cpc	r1, r19
    138e:	14 06       	cpc	r1, r20
    1390:	55 1f       	adc	r21, r21
    1392:	f2 cf       	rjmp	.-28     	; 0x1378 <__fp_split3+0xe>
    1394:	46 95       	lsr	r20
    1396:	f1 df       	rcall	.-30     	; 0x137a <__fp_splitA>
    1398:	08 c0       	rjmp	.+16     	; 0x13aa <__fp_splitA+0x30>
    139a:	16 16       	cp	r1, r22
    139c:	17 06       	cpc	r1, r23
    139e:	18 06       	cpc	r1, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	f1 cf       	rjmp	.-30     	; 0x1386 <__fp_splitA+0xc>
    13a4:	86 95       	lsr	r24
    13a6:	71 05       	cpc	r23, r1
    13a8:	61 05       	cpc	r22, r1
    13aa:	08 94       	sec
    13ac:	08 95       	ret

000013ae <__fp_zero>:
    13ae:	e8 94       	clt

000013b0 <__fp_szero>:
    13b0:	bb 27       	eor	r27, r27
    13b2:	66 27       	eor	r22, r22
    13b4:	77 27       	eor	r23, r23
    13b6:	cb 01       	movw	r24, r22
    13b8:	97 f9       	bld	r25, 7
    13ba:	08 95       	ret

000013bc <__gesf2>:
    13bc:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__fp_cmp>
    13c0:	08 f4       	brcc	.+2      	; 0x13c4 <__gesf2+0x8>
    13c2:	8f ef       	ldi	r24, 0xFF	; 255
    13c4:	08 95       	ret

000013c6 <__mulsf3>:
    13c6:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3x>
    13ca:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__fp_round>
    13ce:	0e 94 96 09 	call	0x132c	; 0x132c <__fp_pscA>
    13d2:	38 f0       	brcs	.+14     	; 0x13e2 <__mulsf3+0x1c>
    13d4:	0e 94 9d 09 	call	0x133a	; 0x133a <__fp_pscB>
    13d8:	20 f0       	brcs	.+8      	; 0x13e2 <__mulsf3+0x1c>
    13da:	95 23       	and	r25, r21
    13dc:	11 f0       	breq	.+4      	; 0x13e2 <__mulsf3+0x1c>
    13de:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__fp_inf>
    13e2:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__fp_nan>
    13e6:	11 24       	eor	r1, r1
    13e8:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_szero>

000013ec <__mulsf3x>:
    13ec:	0e 94 b5 09 	call	0x136a	; 0x136a <__fp_split3>
    13f0:	70 f3       	brcs	.-36     	; 0x13ce <__mulsf3+0x8>

000013f2 <__mulsf3_pse>:
    13f2:	95 9f       	mul	r25, r21
    13f4:	c1 f3       	breq	.-16     	; 0x13e6 <__mulsf3+0x20>
    13f6:	95 0f       	add	r25, r21
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	55 1f       	adc	r21, r21
    13fc:	62 9f       	mul	r22, r18
    13fe:	f0 01       	movw	r30, r0
    1400:	72 9f       	mul	r23, r18
    1402:	bb 27       	eor	r27, r27
    1404:	f0 0d       	add	r31, r0
    1406:	b1 1d       	adc	r27, r1
    1408:	63 9f       	mul	r22, r19
    140a:	aa 27       	eor	r26, r26
    140c:	f0 0d       	add	r31, r0
    140e:	b1 1d       	adc	r27, r1
    1410:	aa 1f       	adc	r26, r26
    1412:	64 9f       	mul	r22, r20
    1414:	66 27       	eor	r22, r22
    1416:	b0 0d       	add	r27, r0
    1418:	a1 1d       	adc	r26, r1
    141a:	66 1f       	adc	r22, r22
    141c:	82 9f       	mul	r24, r18
    141e:	22 27       	eor	r18, r18
    1420:	b0 0d       	add	r27, r0
    1422:	a1 1d       	adc	r26, r1
    1424:	62 1f       	adc	r22, r18
    1426:	73 9f       	mul	r23, r19
    1428:	b0 0d       	add	r27, r0
    142a:	a1 1d       	adc	r26, r1
    142c:	62 1f       	adc	r22, r18
    142e:	83 9f       	mul	r24, r19
    1430:	a0 0d       	add	r26, r0
    1432:	61 1d       	adc	r22, r1
    1434:	22 1f       	adc	r18, r18
    1436:	74 9f       	mul	r23, r20
    1438:	33 27       	eor	r19, r19
    143a:	a0 0d       	add	r26, r0
    143c:	61 1d       	adc	r22, r1
    143e:	23 1f       	adc	r18, r19
    1440:	84 9f       	mul	r24, r20
    1442:	60 0d       	add	r22, r0
    1444:	21 1d       	adc	r18, r1
    1446:	82 2f       	mov	r24, r18
    1448:	76 2f       	mov	r23, r22
    144a:	6a 2f       	mov	r22, r26
    144c:	11 24       	eor	r1, r1
    144e:	9f 57       	subi	r25, 0x7F	; 127
    1450:	50 40       	sbci	r21, 0x00	; 0
    1452:	9a f0       	brmi	.+38     	; 0x147a <__mulsf3_pse+0x88>
    1454:	f1 f0       	breq	.+60     	; 0x1492 <__mulsf3_pse+0xa0>
    1456:	88 23       	and	r24, r24
    1458:	4a f0       	brmi	.+18     	; 0x146c <__mulsf3_pse+0x7a>
    145a:	ee 0f       	add	r30, r30
    145c:	ff 1f       	adc	r31, r31
    145e:	bb 1f       	adc	r27, r27
    1460:	66 1f       	adc	r22, r22
    1462:	77 1f       	adc	r23, r23
    1464:	88 1f       	adc	r24, r24
    1466:	91 50       	subi	r25, 0x01	; 1
    1468:	50 40       	sbci	r21, 0x00	; 0
    146a:	a9 f7       	brne	.-22     	; 0x1456 <__mulsf3_pse+0x64>
    146c:	9e 3f       	cpi	r25, 0xFE	; 254
    146e:	51 05       	cpc	r21, r1
    1470:	80 f0       	brcs	.+32     	; 0x1492 <__mulsf3_pse+0xa0>
    1472:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__fp_inf>
    1476:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_szero>
    147a:	5f 3f       	cpi	r21, 0xFF	; 255
    147c:	e4 f3       	brlt	.-8      	; 0x1476 <__mulsf3_pse+0x84>
    147e:	98 3e       	cpi	r25, 0xE8	; 232
    1480:	d4 f3       	brlt	.-12     	; 0x1476 <__mulsf3_pse+0x84>
    1482:	86 95       	lsr	r24
    1484:	77 95       	ror	r23
    1486:	67 95       	ror	r22
    1488:	b7 95       	ror	r27
    148a:	f7 95       	ror	r31
    148c:	e7 95       	ror	r30
    148e:	9f 5f       	subi	r25, 0xFF	; 255
    1490:	c1 f7       	brne	.-16     	; 0x1482 <__mulsf3_pse+0x90>
    1492:	fe 2b       	or	r31, r30
    1494:	88 0f       	add	r24, r24
    1496:	91 1d       	adc	r25, r1
    1498:	96 95       	lsr	r25
    149a:	87 95       	ror	r24
    149c:	97 f9       	bld	r25, 7
    149e:	08 95       	ret

000014a0 <__udivmodsi4>:
    14a0:	a1 e2       	ldi	r26, 0x21	; 33
    14a2:	1a 2e       	mov	r1, r26
    14a4:	aa 1b       	sub	r26, r26
    14a6:	bb 1b       	sub	r27, r27
    14a8:	fd 01       	movw	r30, r26
    14aa:	0d c0       	rjmp	.+26     	; 0x14c6 <__udivmodsi4_ep>

000014ac <__udivmodsi4_loop>:
    14ac:	aa 1f       	adc	r26, r26
    14ae:	bb 1f       	adc	r27, r27
    14b0:	ee 1f       	adc	r30, r30
    14b2:	ff 1f       	adc	r31, r31
    14b4:	a2 17       	cp	r26, r18
    14b6:	b3 07       	cpc	r27, r19
    14b8:	e4 07       	cpc	r30, r20
    14ba:	f5 07       	cpc	r31, r21
    14bc:	20 f0       	brcs	.+8      	; 0x14c6 <__udivmodsi4_ep>
    14be:	a2 1b       	sub	r26, r18
    14c0:	b3 0b       	sbc	r27, r19
    14c2:	e4 0b       	sbc	r30, r20
    14c4:	f5 0b       	sbc	r31, r21

000014c6 <__udivmodsi4_ep>:
    14c6:	66 1f       	adc	r22, r22
    14c8:	77 1f       	adc	r23, r23
    14ca:	88 1f       	adc	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	1a 94       	dec	r1
    14d0:	69 f7       	brne	.-38     	; 0x14ac <__udivmodsi4_loop>
    14d2:	60 95       	com	r22
    14d4:	70 95       	com	r23
    14d6:	80 95       	com	r24
    14d8:	90 95       	com	r25
    14da:	9b 01       	movw	r18, r22
    14dc:	ac 01       	movw	r20, r24
    14de:	bd 01       	movw	r22, r26
    14e0:	cf 01       	movw	r24, r30
    14e2:	08 95       	ret

000014e4 <_exit>:
    14e4:	f8 94       	cli

000014e6 <__stop_program>:
    14e6:	ff cf       	rjmp	.-2      	; 0x14e6 <__stop_program>
