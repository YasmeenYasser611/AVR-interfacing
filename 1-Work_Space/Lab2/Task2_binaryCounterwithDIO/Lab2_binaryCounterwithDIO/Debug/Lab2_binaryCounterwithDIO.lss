
Lab2_binaryCounterwithDIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000624  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c4b  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000706  00000000  00000000  0000133b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000075b  00000000  00000000  00001a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  0000219c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000729  00000000  00000000  00002234  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008d4  00000000  00000000  0000295d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00003231  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 8000000UL
#include <util/delay.h>
#include "BIT_MATH.h"

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	// Initialize the PORTA as output for the binary counter
	MDIO_enuErrorStatus_t status1 = MDIO_enuSetPortConfigration(MDIO_enuPORTA, MDIO_enuALL_OUTPUT);
  76:	6f ef       	ldi	r22, 0xFF	; 255
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	0e 94 92 01 	call	0x324	; 0x324 <MDIO_enuSetPortConfigration>
  7e:	18 2f       	mov	r17, r24
	
	// Initialize PIN7 of PORTC as input with pull-up for the switch
	MDIO_enuErrorStatus_t status2 = MDIO_enuSetPinConfigration(MDIO_enuPORTC, MDIO_enuPIN7, MDIO_enuINPUT_PULLUP);
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	67 e0       	ldi	r22, 0x07	; 7
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	0e 94 9c 00 	call	0x138	; 0x138 <MDIO_enuSetPinConfigration>
  8a:	08 2f       	mov	r16, r24

	u8 counter = 0; // Counter variable to hold binary count
	u8 buttonState = 1; // Variable to store the current button state
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	89 83       	std	Y+1, r24	; 0x01

	// Display the initial counter value on PORTA
	//MDIO_enuSetPortValue(MDIO_enuPORTA, (MDIO_enuPortState)counter);
    MDIO_enuSetPortValue(MDIO_enuPORTA, MDIO_enuAll_LOW);
  90:	60 e0       	ldi	r22, 0x00	; 0
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 99 02 	call	0x532	; 0x532 <MDIO_enuSetPortValue>
	MDIO_enuErrorStatus_t status1 = MDIO_enuSetPortConfigration(MDIO_enuPORTA, MDIO_enuALL_OUTPUT);
	
	// Initialize PIN7 of PORTC as input with pull-up for the switch
	MDIO_enuErrorStatus_t status2 = MDIO_enuSetPinConfigration(MDIO_enuPORTC, MDIO_enuPIN7, MDIO_enuINPUT_PULLUP);

	u8 counter = 0; // Counter variable to hold binary count
  98:	d1 2c       	mov	r13, r1
	// Display the initial counter value on PORTA
	//MDIO_enuSetPortValue(MDIO_enuPORTA, (MDIO_enuPortState)counter);
    MDIO_enuSetPortValue(MDIO_enuPORTA, MDIO_enuAll_LOW);
	while (1)
	{
		if (status1 == MDIO_enuOK && status2 == MDIO_enuOK)
  9a:	11 11       	cpse	r17, r1
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x2e>
  9e:	01 11       	cpse	r16, r1
  a0:	fc cf       	rjmp	.-8      	; 0x9a <main+0x2e>
		{
			// Read the state of the button (PIN7 of PORTC)
			MDIO_enuErrorStatus_t status3 = MDIO_enuGetPinValue(MDIO_enuPORTC, MDIO_enuPIN7, &buttonState);
  a2:	ae 01       	movw	r20, r28
  a4:	4f 5f       	subi	r20, 0xFF	; 255
  a6:	5f 4f       	sbci	r21, 0xFF	; 255
  a8:	67 e0       	ldi	r22, 0x07	; 7
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	0e 94 9f 02 	call	0x53e	; 0x53e <MDIO_enuGetPinValue>

			if (status3 == MDIO_enuOK && buttonState == 0) // If button is pressed (active low)
  b0:	81 11       	cpse	r24, r1
  b2:	f3 cf       	rjmp	.-26     	; 0x9a <main+0x2e>
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	81 11       	cpse	r24, r1
  b8:	f0 cf       	rjmp	.-32     	; 0x9a <main+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f e7       	ldi	r18, 0x7F	; 127
  bc:	88 e3       	ldi	r24, 0x38	; 56
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x54>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x5e>
  ca:	00 00       	nop
			{
				_delay_ms(50); // Debounce delay

				// Check the button state again after the debounce delay
				MDIO_enuGetPinValue(MDIO_enuPORTC, MDIO_enuPIN7, &buttonState);
  cc:	ae 01       	movw	r20, r28
  ce:	4f 5f       	subi	r20, 0xFF	; 255
  d0:	5f 4f       	sbci	r21, 0xFF	; 255
  d2:	67 e0       	ldi	r22, 0x07	; 7
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 9f 02 	call	0x53e	; 0x53e <MDIO_enuGetPinValue>

				if (buttonState == 0) // Confirm the button is still pressed
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	81 11       	cpse	r24, r1
  de:	dd cf       	rjmp	.-70     	; 0x9a <main+0x2e>
				{
					counter++; // Increment the counter
  e0:	d3 94       	inc	r13

					// Display the updated counter value on PORTA
					//MDIO_enuSetPortValue(MDIO_enuPORTA, (MDIO_enuPortState)counter);
					for(int i=0 ; i<8 ; i++)
  e2:	e1 2c       	mov	r14, r1
  e4:	f1 2c       	mov	r15, r1
  e6:	10 c0       	rjmp	.+32     	; 0x108 <main+0x9c>
					{
						MDIO_enuSetPinValue(MDIO_enuPORTA , i , GET_BIT(counter,i));
  e8:	4d 2d       	mov	r20, r13
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	0e 2c       	mov	r0, r14
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <main+0x88>
  f0:	55 95       	asr	r21
  f2:	47 95       	ror	r20
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <main+0x84>
  f8:	41 70       	andi	r20, 0x01	; 1
  fa:	6e 2d       	mov	r22, r14
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 00 02 	call	0x400	; 0x400 <MDIO_enuSetPinValue>
				{
					counter++; // Increment the counter

					// Display the updated counter value on PORTA
					//MDIO_enuSetPortValue(MDIO_enuPORTA, (MDIO_enuPortState)counter);
					for(int i=0 ; i<8 ; i++)
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	e2 1a       	sub	r14, r18
 106:	f2 0a       	sbc	r15, r18
 108:	88 e0       	ldi	r24, 0x08	; 8
 10a:	e8 16       	cp	r14, r24
 10c:	f1 04       	cpc	r15, r1
 10e:	64 f3       	brlt	.-40     	; 0xe8 <main+0x7c>
					}

					// Wait until the button is released
					do
					{
						MDIO_enuGetPinValue(MDIO_enuPORTC, MDIO_enuPIN7, &buttonState);
 110:	ae 01       	movw	r20, r28
 112:	4f 5f       	subi	r20, 0xFF	; 255
 114:	5f 4f       	sbci	r21, 0xFF	; 255
 116:	67 e0       	ldi	r22, 0x07	; 7
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	0e 94 9f 02 	call	0x53e	; 0x53e <MDIO_enuGetPinValue>
					} while (buttonState == 0);
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	88 23       	and	r24, r24
 122:	b1 f3       	breq	.-20     	; 0x110 <main+0xa4>
 124:	9f e7       	ldi	r25, 0x7F	; 127
 126:	28 e3       	ldi	r18, 0x38	; 56
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	91 50       	subi	r25, 0x01	; 1
 12c:	20 40       	sbci	r18, 0x00	; 0
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0xbe>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0xc8>
 134:	00 00       	nop
 136:	b1 cf       	rjmp	.-158    	; 0x9a <main+0x2e>

00000138 <MDIO_enuSetPinConfigration>:
MDIO_enuErrorStatus_t MDIO_enuSetPinConfigration(MDIO_enuPortNum_t Copy_enuPortNum,MDIO_enuPinNum_t Copy_enuPinNum,MDIO_enuConfigration_t Copy_enuConfigration)
{
	
		MDIO_enuErrorStatus_t Ret_enuError;
		Ret_enuError = MDIO_enuNOK;
		if((Copy_enuPortNum >MDIO_enuPORTD)||(Copy_enuPortNum <MDIO_enuPORTA))
 138:	84 30       	cpi	r24, 0x04	; 4
 13a:	08 f0       	brcs	.+2      	; 0x13e <MDIO_enuSetPinConfigration+0x6>
 13c:	e3 c0       	rjmp	.+454    	; 0x304 <MDIO_enuSetPinConfigration+0x1cc>
		{
			Ret_enuError = MDIO_enuINVALID_PortNum;
			
		}
		else if((Copy_enuPinNum >MDIO_enuPIN7)||(Copy_enuPinNum <MDIO_enuPIN0))
 13e:	68 30       	cpi	r22, 0x08	; 8
 140:	08 f0       	brcs	.+2      	; 0x144 <MDIO_enuSetPinConfigration+0xc>
 142:	e2 c0       	rjmp	.+452    	; 0x308 <MDIO_enuSetPinConfigration+0x1d0>
		{
			Ret_enuError = MDIO_enuINVALID_PinNum;
		}
		else if((Copy_enuConfigration >MDIO_enuINPUT_PULLDOWN)||(Copy_enuConfigration <MDIO_enuOUTPUT))
 144:	43 30       	cpi	r20, 0x03	; 3
 146:	08 f0       	brcs	.+2      	; 0x14a <MDIO_enuSetPinConfigration+0x12>
 148:	e1 c0       	rjmp	.+450    	; 0x30c <MDIO_enuSetPinConfigration+0x1d4>
			Ret_enuError = MDIO_enuINVALID_Configration;
		}
		else
		{
		Ret_enuError = MDIO_enuOK;
		switch(Copy_enuPortNum)
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	e9 f1       	breq	.+122    	; 0x1c8 <MDIO_enuSetPinConfigration+0x90>
 14e:	38 f0       	brcs	.+14     	; 0x15e <MDIO_enuSetPinConfigration+0x26>
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	09 f4       	brne	.+2      	; 0x156 <MDIO_enuSetPinConfigration+0x1e>
 154:	6e c0       	rjmp	.+220    	; 0x232 <MDIO_enuSetPinConfigration+0xfa>
 156:	83 30       	cpi	r24, 0x03	; 3
 158:	09 f4       	brne	.+2      	; 0x15c <MDIO_enuSetPinConfigration+0x24>
 15a:	a0 c0       	rjmp	.+320    	; 0x29c <MDIO_enuSetPinConfigration+0x164>
 15c:	d9 c0       	rjmp	.+434    	; 0x310 <MDIO_enuSetPinConfigration+0x1d8>
		{
		case MDIO_enuPORTA :
		                   if(Copy_enuConfigration == MDIO_enuOUTPUT) //output
 15e:	41 11       	cpse	r20, r1
 160:	0c c0       	rjmp	.+24     	; 0x17a <MDIO_enuSetPinConfigration+0x42>
						   {
							   SET_BIT(DDRA,Copy_enuPinNum);
 162:	2a b3       	in	r18, 0x1a	; 26
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <MDIO_enuSetPinConfigration+0x36>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <MDIO_enuSetPinConfigration+0x32>
 172:	82 2b       	or	r24, r18
 174:	8a bb       	out	0x1a, r24	; 26
		{
			Ret_enuError = MDIO_enuINVALID_Configration;
		}
		else
		{
		Ret_enuError = MDIO_enuOK;
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	08 95       	ret
		case MDIO_enuPORTA :
		                   if(Copy_enuConfigration == MDIO_enuOUTPUT) //output
						   {
							   SET_BIT(DDRA,Copy_enuPinNum);
						   }
						   else if(Copy_enuConfigration == MDIO_enuINPUT_PULLUP) //MDIO_enuINPUT_PULLUP
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	89 f4       	brne	.+34     	; 0x1a0 <MDIO_enuSetPinConfigration+0x68>
						   {
							  CLR_BIT(DDRA ,Copy_enuPinNum );
 17e:	2a b3       	in	r18, 0x1a	; 26
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <MDIO_enuSetPinConfigration+0x52>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <MDIO_enuSetPinConfigration+0x4e>
 18e:	98 2f       	mov	r25, r24
 190:	90 95       	com	r25
 192:	92 23       	and	r25, r18
 194:	9a bb       	out	0x1a, r25	; 26
							  SET_BIT(PORTA,Copy_enuPinNum);
 196:	9b b3       	in	r25, 0x1b	; 27
 198:	89 2b       	or	r24, r25
 19a:	8b bb       	out	0x1b, r24	; 27
		{
			Ret_enuError = MDIO_enuINVALID_Configration;
		}
		else
		{
		Ret_enuError = MDIO_enuOK;
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	08 95       	ret
						   {
							  CLR_BIT(DDRA ,Copy_enuPinNum );
							  SET_BIT(PORTA,Copy_enuPinNum);
							  
						   }
						   else if(Copy_enuConfigration == MDIO_enuINPUT_PULLDOWN) //MDIO_enuINPUT_PULLDOWN
 1a0:	42 30       	cpi	r20, 0x02	; 2
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <MDIO_enuSetPinConfigration+0x6e>
 1a4:	b7 c0       	rjmp	.+366    	; 0x314 <MDIO_enuSetPinConfigration+0x1dc>
						   {
							   CLR_BIT(DDRA ,Copy_enuPinNum );
 1a6:	2a b3       	in	r18, 0x1a	; 26
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <MDIO_enuSetPinConfigration+0x7a>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <MDIO_enuSetPinConfigration+0x76>
 1b6:	80 95       	com	r24
 1b8:	92 2f       	mov	r25, r18
 1ba:	98 23       	and	r25, r24
 1bc:	9a bb       	out	0x1a, r25	; 26
							   CLR_BIT(PORTA,Copy_enuPinNum );
 1be:	9b b3       	in	r25, 0x1b	; 27
 1c0:	89 23       	and	r24, r25
 1c2:	8b bb       	out	0x1b, r24	; 27
		{
			Ret_enuError = MDIO_enuINVALID_Configration;
		}
		else
		{
		Ret_enuError = MDIO_enuOK;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	08 95       	ret
							   CLR_BIT(DDRA ,Copy_enuPinNum );
							   CLR_BIT(PORTA,Copy_enuPinNum );
						   }
						   break;
		case MDIO_enuPORTB :
		                   if(Copy_enuConfigration == MDIO_enuOUTPUT) //output
 1c8:	41 11       	cpse	r20, r1
 1ca:	0c c0       	rjmp	.+24     	; 0x1e4 <MDIO_enuSetPinConfigration+0xac>
						   {
							   SET_BIT(DDRB,Copy_enuPinNum);
 1cc:	27 b3       	in	r18, 0x17	; 23
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <MDIO_enuSetPinConfigration+0xa0>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <MDIO_enuSetPinConfigration+0x9c>
 1dc:	82 2b       	or	r24, r18
 1de:	87 bb       	out	0x17, r24	; 23
		{
			Ret_enuError = MDIO_enuINVALID_Configration;
		}
		else
		{
		Ret_enuError = MDIO_enuOK;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 95       	ret
		case MDIO_enuPORTB :
		                   if(Copy_enuConfigration == MDIO_enuOUTPUT) //output
						   {
							   SET_BIT(DDRB,Copy_enuPinNum);
						   }
						   else if(Copy_enuConfigration == MDIO_enuINPUT_PULLUP) //MDIO_enuINPUT_PULLUP
 1e4:	41 30       	cpi	r20, 0x01	; 1
 1e6:	89 f4       	brne	.+34     	; 0x20a <MDIO_enuSetPinConfigration+0xd2>
						   {
							  CLR_BIT(DDRB ,Copy_enuPinNum );
 1e8:	27 b3       	in	r18, 0x17	; 23
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <MDIO_enuSetPinConfigration+0xbc>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <MDIO_enuSetPinConfigration+0xb8>
 1f8:	98 2f       	mov	r25, r24
 1fa:	90 95       	com	r25
 1fc:	92 23       	and	r25, r18
 1fe:	97 bb       	out	0x17, r25	; 23
							  SET_BIT(PORTB,Copy_enuPinNum);
 200:	98 b3       	in	r25, 0x18	; 24
 202:	89 2b       	or	r24, r25
 204:	88 bb       	out	0x18, r24	; 24
		{
			Ret_enuError = MDIO_enuINVALID_Configration;
		}
		else
		{
		Ret_enuError = MDIO_enuOK;
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret
						   {
							  CLR_BIT(DDRB ,Copy_enuPinNum );
							  SET_BIT(PORTB,Copy_enuPinNum);
							  
						   }
						   else if(Copy_enuConfigration == MDIO_enuINPUT_PULLDOWN) //MDIO_enuINPUT_PULLDOWN
 20a:	42 30       	cpi	r20, 0x02	; 2
 20c:	09 f0       	breq	.+2      	; 0x210 <MDIO_enuSetPinConfigration+0xd8>
 20e:	84 c0       	rjmp	.+264    	; 0x318 <MDIO_enuSetPinConfigration+0x1e0>
						   {
							   CLR_BIT(DDRB ,Copy_enuPinNum );
 210:	27 b3       	in	r18, 0x17	; 23
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <MDIO_enuSetPinConfigration+0xe4>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <MDIO_enuSetPinConfigration+0xe0>
 220:	80 95       	com	r24
 222:	92 2f       	mov	r25, r18
 224:	98 23       	and	r25, r24
 226:	97 bb       	out	0x17, r25	; 23
							   CLR_BIT(PORTB,Copy_enuPinNum );
 228:	98 b3       	in	r25, 0x18	; 24
 22a:	89 23       	and	r24, r25
 22c:	88 bb       	out	0x18, r24	; 24
		{
			Ret_enuError = MDIO_enuINVALID_Configration;
		}
		else
		{
		Ret_enuError = MDIO_enuOK;
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	08 95       	ret
							   CLR_BIT(DDRB ,Copy_enuPinNum );
							   CLR_BIT(PORTB,Copy_enuPinNum );
						   }
						   break;
		case MDIO_enuPORTC :
		                   if(Copy_enuConfigration == MDIO_enuOUTPUT) //output
 232:	41 11       	cpse	r20, r1
 234:	0c c0       	rjmp	.+24     	; 0x24e <MDIO_enuSetPinConfigration+0x116>
						   {
							   SET_BIT(DDRC,Copy_enuPinNum);
 236:	24 b3       	in	r18, 0x14	; 20
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <MDIO_enuSetPinConfigration+0x10a>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <MDIO_enuSetPinConfigration+0x106>
 246:	82 2b       	or	r24, r18
 248:	84 bb       	out	0x14, r24	; 20
		{
			Ret_enuError = MDIO_enuINVALID_Configration;
		}
		else
		{
		Ret_enuError = MDIO_enuOK;
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret
		case MDIO_enuPORTC :
		                   if(Copy_enuConfigration == MDIO_enuOUTPUT) //output
						   {
							   SET_BIT(DDRC,Copy_enuPinNum);
						   }
						   else if(Copy_enuConfigration == MDIO_enuINPUT_PULLUP) //MDIO_enuINPUT_PULLUP
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	89 f4       	brne	.+34     	; 0x274 <MDIO_enuSetPinConfigration+0x13c>
						   {
							  CLR_BIT(DDRC ,Copy_enuPinNum );
 252:	24 b3       	in	r18, 0x14	; 20
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <MDIO_enuSetPinConfigration+0x126>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <MDIO_enuSetPinConfigration+0x122>
 262:	98 2f       	mov	r25, r24
 264:	90 95       	com	r25
 266:	92 23       	and	r25, r18
 268:	94 bb       	out	0x14, r25	; 20
							  SET_BIT(PORTC,Copy_enuPinNum);
 26a:	95 b3       	in	r25, 0x15	; 21
 26c:	89 2b       	or	r24, r25
 26e:	85 bb       	out	0x15, r24	; 21
		{
			Ret_enuError = MDIO_enuINVALID_Configration;
		}
		else
		{
		Ret_enuError = MDIO_enuOK;
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	08 95       	ret
						   {
							  CLR_BIT(DDRC ,Copy_enuPinNum );
							  SET_BIT(PORTC,Copy_enuPinNum);
							  
						   }
						   else if(Copy_enuConfigration == MDIO_enuINPUT_PULLDOWN) //MDIO_enuINPUT_PULLDOWN
 274:	42 30       	cpi	r20, 0x02	; 2
 276:	09 f0       	breq	.+2      	; 0x27a <MDIO_enuSetPinConfigration+0x142>
 278:	51 c0       	rjmp	.+162    	; 0x31c <MDIO_enuSetPinConfigration+0x1e4>
						   {
							   CLR_BIT(DDRC ,Copy_enuPinNum );
 27a:	24 b3       	in	r18, 0x14	; 20
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <MDIO_enuSetPinConfigration+0x14e>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <MDIO_enuSetPinConfigration+0x14a>
 28a:	80 95       	com	r24
 28c:	92 2f       	mov	r25, r18
 28e:	98 23       	and	r25, r24
 290:	94 bb       	out	0x14, r25	; 20
							   CLR_BIT(PORTC,Copy_enuPinNum );
 292:	95 b3       	in	r25, 0x15	; 21
 294:	89 23       	and	r24, r25
 296:	85 bb       	out	0x15, r24	; 21
		{
			Ret_enuError = MDIO_enuINVALID_Configration;
		}
		else
		{
		Ret_enuError = MDIO_enuOK;
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	08 95       	ret
							   CLR_BIT(DDRC ,Copy_enuPinNum );
							   CLR_BIT(PORTC,Copy_enuPinNum );
						   }
						   break;
		case MDIO_enuPORTD :
		                   if(Copy_enuConfigration == MDIO_enuOUTPUT) //output
 29c:	41 11       	cpse	r20, r1
 29e:	0c c0       	rjmp	.+24     	; 0x2b8 <MDIO_enuSetPinConfigration+0x180>
						   {
							   SET_BIT(DDRD,Copy_enuPinNum);
 2a0:	21 b3       	in	r18, 0x11	; 17
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <MDIO_enuSetPinConfigration+0x174>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <MDIO_enuSetPinConfigration+0x170>
 2b0:	82 2b       	or	r24, r18
 2b2:	81 bb       	out	0x11, r24	; 17
		{
			Ret_enuError = MDIO_enuINVALID_Configration;
		}
		else
		{
		Ret_enuError = MDIO_enuOK;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret
		case MDIO_enuPORTD :
		                   if(Copy_enuConfigration == MDIO_enuOUTPUT) //output
						   {
							   SET_BIT(DDRD,Copy_enuPinNum);
						   }
						   else if(Copy_enuConfigration == MDIO_enuINPUT_PULLUP) //MDIO_enuINPUT_PULLUP
 2b8:	41 30       	cpi	r20, 0x01	; 1
 2ba:	89 f4       	brne	.+34     	; 0x2de <MDIO_enuSetPinConfigration+0x1a6>
						   {
							  CLR_BIT(DDRD ,Copy_enuPinNum );
 2bc:	21 b3       	in	r18, 0x11	; 17
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <MDIO_enuSetPinConfigration+0x190>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <MDIO_enuSetPinConfigration+0x18c>
 2cc:	98 2f       	mov	r25, r24
 2ce:	90 95       	com	r25
 2d0:	92 23       	and	r25, r18
 2d2:	91 bb       	out	0x11, r25	; 17
							  SET_BIT(PORTD,Copy_enuPinNum);
 2d4:	92 b3       	in	r25, 0x12	; 18
 2d6:	89 2b       	or	r24, r25
 2d8:	82 bb       	out	0x12, r24	; 18
		{
			Ret_enuError = MDIO_enuINVALID_Configration;
		}
		else
		{
		Ret_enuError = MDIO_enuOK;
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	08 95       	ret
						   {
							  CLR_BIT(DDRD ,Copy_enuPinNum );
							  SET_BIT(PORTD,Copy_enuPinNum);
							  
						   }
						   else if(Copy_enuConfigration == MDIO_enuINPUT_PULLDOWN) //MDIO_enuINPUT_PULLDOWN
 2de:	42 30       	cpi	r20, 0x02	; 2
 2e0:	f9 f4       	brne	.+62     	; 0x320 <MDIO_enuSetPinConfigration+0x1e8>
						   {
							   CLR_BIT(DDRD ,Copy_enuPinNum );
 2e2:	21 b3       	in	r18, 0x11	; 17
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <MDIO_enuSetPinConfigration+0x1b6>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <MDIO_enuSetPinConfigration+0x1b2>
 2f2:	80 95       	com	r24
 2f4:	92 2f       	mov	r25, r18
 2f6:	98 23       	and	r25, r24
 2f8:	91 bb       	out	0x11, r25	; 17
							   CLR_BIT(PORTD,Copy_enuPinNum );
 2fa:	92 b3       	in	r25, 0x12	; 18
 2fc:	89 23       	and	r24, r25
 2fe:	82 bb       	out	0x12, r24	; 18
		{
			Ret_enuError = MDIO_enuINVALID_Configration;
		}
		else
		{
		Ret_enuError = MDIO_enuOK;
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	08 95       	ret
	
		MDIO_enuErrorStatus_t Ret_enuError;
		Ret_enuError = MDIO_enuNOK;
		if((Copy_enuPortNum >MDIO_enuPORTD)||(Copy_enuPortNum <MDIO_enuPORTA))
		{
			Ret_enuError = MDIO_enuINVALID_PortNum;
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	08 95       	ret
			
		}
		else if((Copy_enuPinNum >MDIO_enuPIN7)||(Copy_enuPinNum <MDIO_enuPIN0))
		{
			Ret_enuError = MDIO_enuINVALID_PinNum;
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	08 95       	ret
		}
		else if((Copy_enuConfigration >MDIO_enuINPUT_PULLDOWN)||(Copy_enuConfigration <MDIO_enuOUTPUT))
		{
			Ret_enuError = MDIO_enuINVALID_Configration;
 30c:	84 e0       	ldi	r24, 0x04	; 4
 30e:	08 95       	ret
		}
		else
		{
		Ret_enuError = MDIO_enuOK;
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	08 95       	ret
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	08 95       	ret
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	08 95       	ret
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	08 95       	ret
 320:	80 e0       	ldi	r24, 0x00	; 0
						   
	}
	}
	return Ret_enuError;
	
}
 322:	08 95       	ret

00000324 <MDIO_enuSetPortConfigration>:
{
	
	MDIO_enuErrorStatus_t Ret_enuError;
	
	Ret_enuError = MDIO_enuNOK;
	if((Copy_enuPortNum >MDIO_enuPORTD)||(Copy_enuPortNum <MDIO_enuPORTA))
 324:	84 30       	cpi	r24, 0x04	; 4
 326:	08 f0       	brcs	.+2      	; 0x32a <MDIO_enuSetPortConfigration+0x6>
 328:	5d c0       	rjmp	.+186    	; 0x3e4 <MDIO_enuSetPortConfigration+0xc0>
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
		
	}
	else if((Copy_enuConfigration != MDIO_enuALL_INPUT_PULLDOWN)&&(Copy_enuConfigration != MDIO_enuALL_OUTPUT))
 32a:	9f ef       	ldi	r25, 0xFF	; 255
 32c:	96 0f       	add	r25, r22
 32e:	9e 3f       	cpi	r25, 0xFE	; 254
 330:	08 f4       	brcc	.+2      	; 0x334 <MDIO_enuSetPortConfigration+0x10>
 332:	5a c0       	rjmp	.+180    	; 0x3e8 <MDIO_enuSetPortConfigration+0xc4>
	else
	{
		Ret_enuError = MDIO_enuOK;
		MDIO_enuPortState_t Loc_enuPortstatusHigh = MDIO_enuAll_HIGH ;
		MDIO_enuPortState_t Loc_enuPortstatusLow = MDIO_enuAll_LOW ;
		switch(Copy_enuPortNum)
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	d1 f0       	breq	.+52     	; 0x36c <MDIO_enuSetPortConfigration+0x48>
 338:	28 f0       	brcs	.+10     	; 0x344 <MDIO_enuSetPortConfigration+0x20>
 33a:	82 30       	cpi	r24, 0x02	; 2
 33c:	59 f1       	breq	.+86     	; 0x394 <MDIO_enuSetPortConfigration+0x70>
 33e:	83 30       	cpi	r24, 0x03	; 3
 340:	e9 f1       	breq	.+122    	; 0x3bc <MDIO_enuSetPortConfigration+0x98>
 342:	54 c0       	rjmp	.+168    	; 0x3ec <MDIO_enuSetPortConfigration+0xc8>
		{
			case MDIO_enuPORTA :
			if(Copy_enuConfigration == MDIO_enuALL_OUTPUT) //output
 344:	6f 3f       	cpi	r22, 0xFF	; 255
 346:	29 f4       	brne	.+10     	; 0x352 <MDIO_enuSetPortConfigration+0x2e>
			{
				DDRA = Loc_enuPortstatusHigh ;
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	8a bb       	out	0x1a, r24	; 26
				PORTA=Loc_enuPortstatusLow ;
 34c:	1b ba       	out	0x1b, r1	; 27
	{
		Ret_enuError = MDIO_enuINVALID_Configration;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret
			if(Copy_enuConfigration == MDIO_enuALL_OUTPUT) //output
			{
				DDRA = Loc_enuPortstatusHigh ;
				PORTA=Loc_enuPortstatusLow ;
			}
			else if(Copy_enuConfigration == MDIO_enuALL_INPUT_PULLUP) //MDIO_enuINPUT_PULLUP
 352:	61 11       	cpse	r22, r1
 354:	05 c0       	rjmp	.+10     	; 0x360 <MDIO_enuSetPortConfigration+0x3c>
			{
				DDRA = Loc_enuPortstatusLow;
 356:	1a ba       	out	0x1a, r1	; 26
				PORTA= Loc_enuPortstatusHigh;
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	8b bb       	out	0x1b, r24	; 27
	{
		Ret_enuError = MDIO_enuINVALID_Configration;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	08 95       	ret
			{
				DDRA = Loc_enuPortstatusLow;
				PORTA= Loc_enuPortstatusHigh;
				
			}
			else if(Copy_enuConfigration == MDIO_enuALL_INPUT_PULLDOWN) //MDIO_enuINPUT_PULLDOWN
 360:	61 11       	cpse	r22, r1
 362:	46 c0       	rjmp	.+140    	; 0x3f0 <MDIO_enuSetPortConfigration+0xcc>
			{
				DDRA = Loc_enuPortstatusLow;
 364:	1a ba       	out	0x1a, r1	; 26
				PORTA= Loc_enuPortstatusLow;
 366:	1b ba       	out	0x1b, r1	; 27
	{
		Ret_enuError = MDIO_enuINVALID_Configration;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	08 95       	ret
				DDRA = Loc_enuPortstatusLow;
				PORTA= Loc_enuPortstatusLow;
			}
			break;
			case MDIO_enuPORTB :
			if(Copy_enuConfigration == MDIO_enuALL_OUTPUT) //output
 36c:	6f 3f       	cpi	r22, 0xFF	; 255
 36e:	29 f4       	brne	.+10     	; 0x37a <MDIO_enuSetPortConfigration+0x56>
			{
				DDRB = Loc_enuPortstatusHigh ;
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	87 bb       	out	0x17, r24	; 23
				PORTB=Loc_enuPortstatusLow ;
 374:	18 ba       	out	0x18, r1	; 24
	{
		Ret_enuError = MDIO_enuINVALID_Configration;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	08 95       	ret
			if(Copy_enuConfigration == MDIO_enuALL_OUTPUT) //output
			{
				DDRB = Loc_enuPortstatusHigh ;
				PORTB=Loc_enuPortstatusLow ;
			}
			else if(Copy_enuConfigration == MDIO_enuALL_INPUT_PULLUP) //MDIO_enuINPUT_PULLUP
 37a:	61 11       	cpse	r22, r1
 37c:	05 c0       	rjmp	.+10     	; 0x388 <MDIO_enuSetPortConfigration+0x64>
			{
				DDRB = Loc_enuPortstatusLow;
 37e:	17 ba       	out	0x17, r1	; 23
				PORTB= Loc_enuPortstatusHigh;				
 380:	8f ef       	ldi	r24, 0xFF	; 255
 382:	88 bb       	out	0x18, r24	; 24
	{
		Ret_enuError = MDIO_enuINVALID_Configration;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	08 95       	ret
			else if(Copy_enuConfigration == MDIO_enuALL_INPUT_PULLUP) //MDIO_enuINPUT_PULLUP
			{
				DDRB = Loc_enuPortstatusLow;
				PORTB= Loc_enuPortstatusHigh;				
			}
			else if(Copy_enuConfigration ==MDIO_enuALL_INPUT_PULLDOWN ) //MDIO_enuINPUT_PULLDOWN
 388:	61 11       	cpse	r22, r1
 38a:	34 c0       	rjmp	.+104    	; 0x3f4 <MDIO_enuSetPortConfigration+0xd0>
			{
				DDRB = Loc_enuPortstatusLow;
 38c:	17 ba       	out	0x17, r1	; 23
				PORTB= Loc_enuPortstatusLow;
 38e:	18 ba       	out	0x18, r1	; 24
	{
		Ret_enuError = MDIO_enuINVALID_Configration;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	08 95       	ret
				DDRB = Loc_enuPortstatusLow;
				PORTB= Loc_enuPortstatusLow;
			}
			break;
			case MDIO_enuPORTC :
			if(Copy_enuConfigration == MDIO_enuALL_OUTPUT) //output
 394:	6f 3f       	cpi	r22, 0xFF	; 255
 396:	29 f4       	brne	.+10     	; 0x3a2 <MDIO_enuSetPortConfigration+0x7e>
			{
				DDRC = Loc_enuPortstatusHigh ;
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	84 bb       	out	0x14, r24	; 20
				PORTC=Loc_enuPortstatusLow ;
 39c:	15 ba       	out	0x15, r1	; 21
	{
		Ret_enuError = MDIO_enuINVALID_Configration;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	08 95       	ret
			if(Copy_enuConfigration == MDIO_enuALL_OUTPUT) //output
			{
				DDRC = Loc_enuPortstatusHigh ;
				PORTC=Loc_enuPortstatusLow ;
			}
			else if(Copy_enuConfigration == MDIO_enuALL_INPUT_PULLUP) //MDIO_enuINPUT_PULLUP
 3a2:	61 11       	cpse	r22, r1
 3a4:	05 c0       	rjmp	.+10     	; 0x3b0 <MDIO_enuSetPortConfigration+0x8c>
			{
				DDRC = Loc_enuPortstatusLow;
 3a6:	14 ba       	out	0x14, r1	; 20
				PORTC= Loc_enuPortstatusHigh;
 3a8:	8f ef       	ldi	r24, 0xFF	; 255
 3aa:	85 bb       	out	0x15, r24	; 21
	{
		Ret_enuError = MDIO_enuINVALID_Configration;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	08 95       	ret
			{
				DDRC = Loc_enuPortstatusLow;
				PORTC= Loc_enuPortstatusHigh;
				
			}
			else if(Copy_enuConfigration == MDIO_enuALL_INPUT_PULLDOWN) //MDIO_enuINPUT_PULLDOWN
 3b0:	61 11       	cpse	r22, r1
 3b2:	22 c0       	rjmp	.+68     	; 0x3f8 <MDIO_enuSetPortConfigration+0xd4>
			{
				DDRC = Loc_enuPortstatusLow;
 3b4:	14 ba       	out	0x14, r1	; 20
				PORTC= Loc_enuPortstatusLow;
 3b6:	15 ba       	out	0x15, r1	; 21
	{
		Ret_enuError = MDIO_enuINVALID_Configration;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	08 95       	ret
				DDRC = Loc_enuPortstatusLow;
				PORTC= Loc_enuPortstatusLow;
			}
			break;
			case MDIO_enuPORTD :
			if(Copy_enuConfigration == MDIO_enuALL_OUTPUT) //output
 3bc:	6f 3f       	cpi	r22, 0xFF	; 255
 3be:	29 f4       	brne	.+10     	; 0x3ca <MDIO_enuSetPortConfigration+0xa6>
			{
				DDRD = Loc_enuPortstatusHigh ;
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	81 bb       	out	0x11, r24	; 17
				PORTD=Loc_enuPortstatusLow ;
 3c4:	12 ba       	out	0x12, r1	; 18
	{
		Ret_enuError = MDIO_enuINVALID_Configration;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	08 95       	ret
			if(Copy_enuConfigration == MDIO_enuALL_OUTPUT) //output
			{
				DDRD = Loc_enuPortstatusHigh ;
				PORTD=Loc_enuPortstatusLow ;
			}
			else if(Copy_enuConfigration == MDIO_enuALL_INPUT_PULLUP) //MDIO_enuINPUT_PULLUP
 3ca:	61 11       	cpse	r22, r1
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <MDIO_enuSetPortConfigration+0xb4>
			{
				DDRD = Loc_enuPortstatusLow;
 3ce:	11 ba       	out	0x11, r1	; 17
				PORTD= Loc_enuPortstatusHigh;				
 3d0:	8f ef       	ldi	r24, 0xFF	; 255
 3d2:	82 bb       	out	0x12, r24	; 18
	{
		Ret_enuError = MDIO_enuINVALID_Configration;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	08 95       	ret
			else if(Copy_enuConfigration == MDIO_enuALL_INPUT_PULLUP) //MDIO_enuINPUT_PULLUP
			{
				DDRD = Loc_enuPortstatusLow;
				PORTD= Loc_enuPortstatusHigh;				
			}
			else if(Copy_enuConfigration == MDIO_enuALL_INPUT_PULLDOWN) //MDIO_enuINPUT_PULLDOWN
 3d8:	61 11       	cpse	r22, r1
 3da:	10 c0       	rjmp	.+32     	; 0x3fc <MDIO_enuSetPortConfigration+0xd8>
			{
				DDRD = Loc_enuPortstatusLow;
 3dc:	11 ba       	out	0x11, r1	; 17
				PORTD= Loc_enuPortstatusLow;
 3de:	12 ba       	out	0x12, r1	; 18
	{
		Ret_enuError = MDIO_enuINVALID_Configration;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	08 95       	ret
	MDIO_enuErrorStatus_t Ret_enuError;
	
	Ret_enuError = MDIO_enuNOK;
	if((Copy_enuPortNum >MDIO_enuPORTD)||(Copy_enuPortNum <MDIO_enuPORTA))
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	08 95       	ret
		
	}
	else if((Copy_enuConfigration != MDIO_enuALL_INPUT_PULLDOWN)&&(Copy_enuConfigration != MDIO_enuALL_OUTPUT))
	{
		Ret_enuError = MDIO_enuINVALID_Configration;
 3e8:	84 e0       	ldi	r24, 0x04	; 4
 3ea:	08 95       	ret
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	08 95       	ret
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	08 95       	ret
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	08 95       	ret
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	08 95       	ret
 3fc:	80 e0       	ldi	r24, 0x00	; 0
			
		}
	}
	return Ret_enuError;
	
}
 3fe:	08 95       	ret

00000400 <MDIO_enuSetPinValue>:
MDIO_enuErrorStatus_t MDIO_enuSetPinValue( MDIO_enuPortNum_t Copy_enuPortNum, MDIO_enuPinNum_t Copy_enuPinNum, MDIO_enuState_t Copy_enuState)
{
	
	MDIO_enuErrorStatus_t Ret_enuError;
	Ret_enuError = MDIO_enuNOK;
	if((Copy_enuPortNum >MDIO_enuPORTD)||(Copy_enuPortNum <MDIO_enuPORTA))
 400:	84 30       	cpi	r24, 0x04	; 4
 402:	08 f0       	brcs	.+2      	; 0x406 <MDIO_enuSetPinValue+0x6>
 404:	86 c0       	rjmp	.+268    	; 0x512 <MDIO_enuSetPinValue+0x112>
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
		
	}
	else if((Copy_enuPinNum >MDIO_enuPIN7)||(Copy_enuPinNum <MDIO_enuPIN0))
 406:	68 30       	cpi	r22, 0x08	; 8
 408:	08 f0       	brcs	.+2      	; 0x40c <MDIO_enuSetPinValue+0xc>
 40a:	85 c0       	rjmp	.+266    	; 0x516 <MDIO_enuSetPinValue+0x116>
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
	}
	else if((Copy_enuState >MDIO_enuHIGH)||(Copy_enuState <MDIO_enuLOW))
 40c:	42 30       	cpi	r20, 0x02	; 2
 40e:	08 f0       	brcs	.+2      	; 0x412 <MDIO_enuSetPinValue+0x12>
 410:	84 c0       	rjmp	.+264    	; 0x51a <MDIO_enuSetPinValue+0x11a>
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
		switch(Copy_enuPortNum)
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	31 f1       	breq	.+76     	; 0x462 <MDIO_enuSetPinValue+0x62>
 416:	38 f0       	brcs	.+14     	; 0x426 <MDIO_enuSetPinValue+0x26>
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	09 f4       	brne	.+2      	; 0x41e <MDIO_enuSetPinValue+0x1e>
 41c:	40 c0       	rjmp	.+128    	; 0x49e <MDIO_enuSetPinValue+0x9e>
 41e:	83 30       	cpi	r24, 0x03	; 3
 420:	09 f4       	brne	.+2      	; 0x424 <MDIO_enuSetPinValue+0x24>
 422:	5a c0       	rjmp	.+180    	; 0x4d8 <MDIO_enuSetPinValue+0xd8>
 424:	7c c0       	rjmp	.+248    	; 0x51e <MDIO_enuSetPinValue+0x11e>
		{
			case MDIO_enuPORTA :
			if(Copy_enuState == MDIO_enuLOW) //low
 426:	41 11       	cpse	r20, r1
 428:	0d c0       	rjmp	.+26     	; 0x444 <MDIO_enuSetPinValue+0x44>
			{
				CLR_BIT(PORTA,Copy_enuPinNum);
 42a:	2b b3       	in	r18, 0x1b	; 27
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <MDIO_enuSetPinValue+0x36>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <MDIO_enuSetPinValue+0x32>
 43a:	80 95       	com	r24
 43c:	82 23       	and	r24, r18
 43e:	8b bb       	out	0x1b, r24	; 27
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	08 95       	ret
			case MDIO_enuPORTA :
			if(Copy_enuState == MDIO_enuLOW) //low
			{
				CLR_BIT(PORTA,Copy_enuPinNum);
			}
			else if(Copy_enuState == MDIO_enuHIGH) //high
 444:	41 30       	cpi	r20, 0x01	; 1
 446:	09 f0       	breq	.+2      	; 0x44a <MDIO_enuSetPinValue+0x4a>
 448:	6c c0       	rjmp	.+216    	; 0x522 <MDIO_enuSetPinValue+0x122>
			{
				
				SET_BIT(PORTA,Copy_enuPinNum);
 44a:	2b b3       	in	r18, 0x1b	; 27
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <MDIO_enuSetPinValue+0x56>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	6a 95       	dec	r22
 458:	e2 f7       	brpl	.-8      	; 0x452 <MDIO_enuSetPinValue+0x52>
 45a:	82 2b       	or	r24, r18
 45c:	8b bb       	out	0x1b, r24	; 27
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	08 95       	ret
				SET_BIT(PORTA,Copy_enuPinNum);
				
			}
			break;
			case MDIO_enuPORTB :
			if(Copy_enuState == MDIO_enuLOW) //low
 462:	41 11       	cpse	r20, r1
 464:	0d c0       	rjmp	.+26     	; 0x480 <MDIO_enuSetPinValue+0x80>
			{
				CLR_BIT(PORTB,Copy_enuPinNum);
 466:	28 b3       	in	r18, 0x18	; 24
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <MDIO_enuSetPinValue+0x72>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <MDIO_enuSetPinValue+0x6e>
 476:	80 95       	com	r24
 478:	82 23       	and	r24, r18
 47a:	88 bb       	out	0x18, r24	; 24
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	08 95       	ret
			case MDIO_enuPORTB :
			if(Copy_enuState == MDIO_enuLOW) //low
			{
				CLR_BIT(PORTB,Copy_enuPinNum);
			}
			else if(Copy_enuState == MDIO_enuHIGH) //high
 480:	41 30       	cpi	r20, 0x01	; 1
 482:	09 f0       	breq	.+2      	; 0x486 <MDIO_enuSetPinValue+0x86>
 484:	50 c0       	rjmp	.+160    	; 0x526 <MDIO_enuSetPinValue+0x126>
			{
				
				SET_BIT(PORTB,Copy_enuPinNum);
 486:	28 b3       	in	r18, 0x18	; 24
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	02 c0       	rjmp	.+4      	; 0x492 <MDIO_enuSetPinValue+0x92>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	6a 95       	dec	r22
 494:	e2 f7       	brpl	.-8      	; 0x48e <MDIO_enuSetPinValue+0x8e>
 496:	82 2b       	or	r24, r18
 498:	88 bb       	out	0x18, r24	; 24
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	08 95       	ret
				SET_BIT(PORTB,Copy_enuPinNum);
				
			}
			break;
			case MDIO_enuPORTC :
			if(Copy_enuState == MDIO_enuLOW) //low
 49e:	41 11       	cpse	r20, r1
 4a0:	0d c0       	rjmp	.+26     	; 0x4bc <MDIO_enuSetPinValue+0xbc>
			{
				CLR_BIT(PORTC,Copy_enuPinNum);
 4a2:	25 b3       	in	r18, 0x15	; 21
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <MDIO_enuSetPinValue+0xae>
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	6a 95       	dec	r22
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <MDIO_enuSetPinValue+0xaa>
 4b2:	80 95       	com	r24
 4b4:	82 23       	and	r24, r18
 4b6:	85 bb       	out	0x15, r24	; 21
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	08 95       	ret
			case MDIO_enuPORTC :
			if(Copy_enuState == MDIO_enuLOW) //low
			{
				CLR_BIT(PORTC,Copy_enuPinNum);
			}
			else if(Copy_enuState == MDIO_enuHIGH) //high
 4bc:	41 30       	cpi	r20, 0x01	; 1
 4be:	a9 f5       	brne	.+106    	; 0x52a <MDIO_enuSetPinValue+0x12a>
			{
				
				SET_BIT(PORTC,Copy_enuPinNum);
 4c0:	25 b3       	in	r18, 0x15	; 21
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <MDIO_enuSetPinValue+0xcc>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <MDIO_enuSetPinValue+0xc8>
 4d0:	82 2b       	or	r24, r18
 4d2:	85 bb       	out	0x15, r24	; 21
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	08 95       	ret
				SET_BIT(PORTC,Copy_enuPinNum);
				
			}
			break;
			case MDIO_enuPORTD :
			if(Copy_enuState == MDIO_enuLOW) //LOW
 4d8:	41 11       	cpse	r20, r1
 4da:	0d c0       	rjmp	.+26     	; 0x4f6 <MDIO_enuSetPinValue+0xf6>
			{
				CLR_BIT(PORTD,Copy_enuPinNum);
 4dc:	22 b3       	in	r18, 0x12	; 18
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <MDIO_enuSetPinValue+0xe8>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	6a 95       	dec	r22
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <MDIO_enuSetPinValue+0xe4>
 4ec:	80 95       	com	r24
 4ee:	82 23       	and	r24, r18
 4f0:	82 bb       	out	0x12, r24	; 18
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret
			case MDIO_enuPORTD :
			if(Copy_enuState == MDIO_enuLOW) //LOW
			{
				CLR_BIT(PORTD,Copy_enuPinNum);
			}
			else if(Copy_enuState == MDIO_enuHIGH) //HIGH
 4f6:	41 30       	cpi	r20, 0x01	; 1
 4f8:	d1 f4       	brne	.+52     	; 0x52e <MDIO_enuSetPinValue+0x12e>
			{
				
				SET_BIT(PORTD,Copy_enuPinNum);
 4fa:	22 b3       	in	r18, 0x12	; 18
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <MDIO_enuSetPinValue+0x106>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	6a 95       	dec	r22
 508:	e2 f7       	brpl	.-8      	; 0x502 <MDIO_enuSetPinValue+0x102>
 50a:	82 2b       	or	r24, r18
 50c:	82 bb       	out	0x12, r24	; 18
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	08 95       	ret
	
	MDIO_enuErrorStatus_t Ret_enuError;
	Ret_enuError = MDIO_enuNOK;
	if((Copy_enuPortNum >MDIO_enuPORTD)||(Copy_enuPortNum <MDIO_enuPORTA))
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
 512:	82 e0       	ldi	r24, 0x02	; 2
 514:	08 95       	ret
		
	}
	else if((Copy_enuPinNum >MDIO_enuPIN7)||(Copy_enuPinNum <MDIO_enuPIN0))
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
 516:	83 e0       	ldi	r24, 0x03	; 3
 518:	08 95       	ret
	}
	else if((Copy_enuState >MDIO_enuHIGH)||(Copy_enuState <MDIO_enuLOW))
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
 51a:	85 e0       	ldi	r24, 0x05	; 5
 51c:	08 95       	ret
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	08 95       	ret
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	08 95       	ret
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	08 95       	ret
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	08 95       	ret
 52e:	80 e0       	ldi	r24, 0x00	; 0
			
		}
	}
	return Ret_enuError;
	
}
 530:	08 95       	ret

00000532 <MDIO_enuSetPortValue>:
{
	
	MDIO_enuErrorStatus_t Ret_enuError;
	
	Ret_enuError = MDIO_enuNOK;
	if((Copy_enuPortNum >MDIO_enuPORTD)||(Copy_enuPortNum <MDIO_enuPORTA))
 532:	84 30       	cpi	r24, 0x04	; 4
 534:	10 f0       	brcs	.+4      	; 0x53a <MDIO_enuSetPortValue+0x8>
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
 536:	82 e0       	ldi	r24, 0x02	; 2
 538:	08 95       	ret
		
	}
	else if((Copy_enuPortState != MDIO_enuAll_HIGH) || (Copy_enuPortState != MDIO_enuAll_LOW) )
	{
		Ret_enuError = MDIO_enuINVALID_PortStatus;
 53a:	86 e0       	ldi	r24, 0x06	; 6
			
		}
	}
	return Ret_enuError;
	
}
 53c:	08 95       	ret

0000053e <MDIO_enuGetPinValue>:
MDIO_enuErrorStatus_t MDIO_enuGetPinValue(MDIO_enuPortNum_t Copy_enuPortNum,MDIO_enuPinNum_t Copy_enuPinNum,u8* Add_pu8PinValue)
{
	
	MDIO_enuErrorStatus_t Ret_enuError;
	Ret_enuError = MDIO_enuNOK;
	if((Copy_enuPortNum >MDIO_enuPORTD)||(Copy_enuPortNum <MDIO_enuPORTA))
 53e:	84 30       	cpi	r24, 0x04	; 4
 540:	e8 f5       	brcc	.+122    	; 0x5bc <MDIO_enuGetPinValue+0x7e>
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
		
	}
	else if((Copy_enuPinNum >MDIO_enuPIN7)||(Copy_enuPinNum <MDIO_enuPIN0))
 542:	68 30       	cpi	r22, 0x08	; 8
 544:	e8 f5       	brcc	.+122    	; 0x5c0 <MDIO_enuGetPinValue+0x82>
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
	}
	else if(Add_pu8PinValue == NULL)
 546:	41 15       	cp	r20, r1
 548:	51 05       	cpc	r21, r1
 54a:	e1 f1       	breq	.+120    	; 0x5c4 <MDIO_enuGetPinValue+0x86>
		Ret_enuError = MDIO_enuNULL_PTR;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
		switch(Copy_enuPortNum)
 54c:	81 30       	cpi	r24, 0x01	; 1
 54e:	91 f0       	breq	.+36     	; 0x574 <MDIO_enuGetPinValue+0x36>
 550:	28 f0       	brcs	.+10     	; 0x55c <MDIO_enuGetPinValue+0x1e>
 552:	82 30       	cpi	r24, 0x02	; 2
 554:	d9 f0       	breq	.+54     	; 0x58c <MDIO_enuGetPinValue+0x4e>
 556:	83 30       	cpi	r24, 0x03	; 3
 558:	29 f1       	breq	.+74     	; 0x5a4 <MDIO_enuGetPinValue+0x66>
 55a:	36 c0       	rjmp	.+108    	; 0x5c8 <MDIO_enuGetPinValue+0x8a>
		{
			case MDIO_enuPORTA :
			*Add_pu8PinValue = GET_BIT(PINA, Copy_enuPinNum);
 55c:	89 b3       	in	r24, 0x19	; 25
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <MDIO_enuGetPinValue+0x28>
 562:	95 95       	asr	r25
 564:	87 95       	ror	r24
 566:	6a 95       	dec	r22
 568:	e2 f7       	brpl	.-8      	; 0x562 <MDIO_enuGetPinValue+0x24>
 56a:	81 70       	andi	r24, 0x01	; 1
 56c:	fa 01       	movw	r30, r20
 56e:	80 83       	st	Z, r24
	{
		Ret_enuError = MDIO_enuNULL_PTR;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 570:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_enuPortNum)
		{
			case MDIO_enuPORTA :
			*Add_pu8PinValue = GET_BIT(PINA, Copy_enuPinNum);
			break;
 572:	08 95       	ret
			case MDIO_enuPORTB :
            *Add_pu8PinValue = GET_BIT(PINB , Copy_enuPinNum);
 574:	86 b3       	in	r24, 0x16	; 22
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <MDIO_enuGetPinValue+0x40>
 57a:	95 95       	asr	r25
 57c:	87 95       	ror	r24
 57e:	6a 95       	dec	r22
 580:	e2 f7       	brpl	.-8      	; 0x57a <MDIO_enuGetPinValue+0x3c>
 582:	81 70       	andi	r24, 0x01	; 1
 584:	fa 01       	movw	r30, r20
 586:	80 83       	st	Z, r24
	{
		Ret_enuError = MDIO_enuNULL_PTR;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 588:	80 e0       	ldi	r24, 0x00	; 0
			case MDIO_enuPORTA :
			*Add_pu8PinValue = GET_BIT(PINA, Copy_enuPinNum);
			break;
			case MDIO_enuPORTB :
            *Add_pu8PinValue = GET_BIT(PINB , Copy_enuPinNum);
			break;
 58a:	08 95       	ret
			case MDIO_enuPORTC :
            *Add_pu8PinValue = GET_BIT(PINC , Copy_enuPinNum);
 58c:	83 b3       	in	r24, 0x13	; 19
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <MDIO_enuGetPinValue+0x58>
 592:	95 95       	asr	r25
 594:	87 95       	ror	r24
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <MDIO_enuGetPinValue+0x54>
 59a:	81 70       	andi	r24, 0x01	; 1
 59c:	fa 01       	movw	r30, r20
 59e:	80 83       	st	Z, r24
	{
		Ret_enuError = MDIO_enuNULL_PTR;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 5a0:	80 e0       	ldi	r24, 0x00	; 0
			case MDIO_enuPORTB :
            *Add_pu8PinValue = GET_BIT(PINB , Copy_enuPinNum);
			break;
			case MDIO_enuPORTC :
            *Add_pu8PinValue = GET_BIT(PINC , Copy_enuPinNum);
			break;
 5a2:	08 95       	ret
			case MDIO_enuPORTD :
            *Add_pu8PinValue = GET_BIT(PIND , Copy_enuPinNum);
 5a4:	80 b3       	in	r24, 0x10	; 16
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <MDIO_enuGetPinValue+0x70>
 5aa:	95 95       	asr	r25
 5ac:	87 95       	ror	r24
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <MDIO_enuGetPinValue+0x6c>
 5b2:	81 70       	andi	r24, 0x01	; 1
 5b4:	fa 01       	movw	r30, r20
 5b6:	80 83       	st	Z, r24
	{
		Ret_enuError = MDIO_enuNULL_PTR;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 5b8:	80 e0       	ldi	r24, 0x00	; 0
			case MDIO_enuPORTC :
            *Add_pu8PinValue = GET_BIT(PINC , Copy_enuPinNum);
			break;
			case MDIO_enuPORTD :
            *Add_pu8PinValue = GET_BIT(PIND , Copy_enuPinNum);
			break;
 5ba:	08 95       	ret
	
	MDIO_enuErrorStatus_t Ret_enuError;
	Ret_enuError = MDIO_enuNOK;
	if((Copy_enuPortNum >MDIO_enuPORTD)||(Copy_enuPortNum <MDIO_enuPORTA))
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	08 95       	ret
		
	}
	else if((Copy_enuPinNum >MDIO_enuPIN7)||(Copy_enuPinNum <MDIO_enuPIN0))
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
 5c0:	83 e0       	ldi	r24, 0x03	; 3
 5c2:	08 95       	ret
	}
	else if(Add_pu8PinValue == NULL)
	{
		Ret_enuError = MDIO_enuNULL_PTR;
 5c4:	87 e0       	ldi	r24, 0x07	; 7
 5c6:	08 95       	ret
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 5c8:	80 e0       	ldi	r24, 0x00	; 0
			
		}
	}
	return Ret_enuError;
	
}
 5ca:	08 95       	ret

000005cc <_exit>:
 5cc:	f8 94       	cli

000005ce <__stop_program>:
 5ce:	ff cf       	rjmp	.-2      	; 0x5ce <__stop_program>
