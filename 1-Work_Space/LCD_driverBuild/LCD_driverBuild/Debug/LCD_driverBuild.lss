
LCD_driverBuild.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b74  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00000b74  00000be8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c60  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002865  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b10  00000000  00000000  00003609  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e40  00000000  00000000  00004119  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  00004f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001224  00000000  00000000  0000518c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b30  00000000  00000000  000063b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  00007ee0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ea       	ldi	r26, 0xA8	; 168
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3a       	cpi	r26, 0xA8	; 168
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 78 04 	call	0x8f0	; 0x8f0 <main>
  8a:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HLCD_enuLCD_WriteCommand>:
{
	HLCD_enuLCD_WriteCommand(Copy_enuLCDNum, 0x01);
	
}
HLCD_enuErrorStatus_t HLCD_enuLCD_WriteCommand(u8 Copy_enuLCDNum,u8 Copy_u8Command)
{
  92:	ff 92       	push	r15
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;
	if(IS_INVALID_LCD_NAME(Copy_enuLCDNum))
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	08 f0       	brcs	.+2      	; 0xa2 <HLCD_enuLCD_WriteCommand+0x10>
  a0:	d8 c0       	rjmp	.+432    	; 0x252 <HLCD_enuLCD_WriteCommand+0x1c0>
  a2:	f6 2e       	mov	r15, r22
	}
	else
	{
		Ret_enuError = HLCD_enuOK;
		/*1-rw->low for writing*/
		MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].RW_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].RW_Pin, MDIO_enuLOW);
  a4:	c8 2f       	mov	r28, r24
  a6:	d0 e0       	ldi	r29, 0x00	; 0
  a8:	8e e1       	ldi	r24, 0x1E	; 30
  aa:	8c 9f       	mul	r24, r28
  ac:	80 01       	movw	r16, r0
  ae:	8d 9f       	mul	r24, r29
  b0:	10 0d       	add	r17, r0
  b2:	11 24       	eor	r1, r1
  b4:	00 5a       	subi	r16, 0xA0	; 160
  b6:	1f 4f       	sbci	r17, 0xFF	; 255
  b8:	f8 01       	movw	r30, r16
  ba:	63 8d       	ldd	r22, Z+27	; 0x1b
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	82 8d       	ldd	r24, Z+26	; 0x1a
  c0:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
		/*2-rs-> low for command*/
		MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].RS_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].RS_Pin, MDIO_enuLOW);
  c4:	f8 01       	movw	r30, r16
  c6:	61 8d       	ldd	r22, Z+25	; 0x19
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	80 8d       	ldd	r24, Z+24	; 0x18
  cc:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
		if(HLCD_ArrLCDCongf[Copy_enuLCDNum].DL == HLCD_enu_8Bits)
  d0:	f8 01       	movw	r30, r16
  d2:	80 81       	ld	r24, Z
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	09 f0       	breq	.+2      	; 0xda <HLCD_enuLCD_WriteCommand+0x48>
  d8:	41 c0       	rjmp	.+130    	; 0x15c <HLCD_enuLCD_WriteCommand+0xca>
		{

			/*3-send command*/
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D0_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D0_Pin,(Copy_u8Command >> 0) & 0x01 );
  da:	8f 01       	movw	r16, r30
  dc:	61 85       	ldd	r22, Z+9	; 0x09
  de:	4f 2d       	mov	r20, r15
  e0:	41 70       	andi	r20, 0x01	; 1
  e2:	80 85       	ldd	r24, Z+8	; 0x08
  e4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D1_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D1_Pin,(Copy_u8Command >> 1) & 0x01 );
  e8:	f8 01       	movw	r30, r16
  ea:	63 85       	ldd	r22, Z+11	; 0x0b
  ec:	f1 fa       	bst	r15, 1
  ee:	44 27       	eor	r20, r20
  f0:	40 f9       	bld	r20, 0
  f2:	82 85       	ldd	r24, Z+10	; 0x0a
  f4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D2_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D2_Pin,(Copy_u8Command >> 2) & 0x01 );
  f8:	f8 01       	movw	r30, r16
  fa:	65 85       	ldd	r22, Z+13	; 0x0d
  fc:	f2 fa       	bst	r15, 2
  fe:	44 27       	eor	r20, r20
 100:	40 f9       	bld	r20, 0
 102:	84 85       	ldd	r24, Z+12	; 0x0c
 104:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D3_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D3_Pin,(Copy_u8Command >> 3) & 0x01 );
 108:	f8 01       	movw	r30, r16
 10a:	67 85       	ldd	r22, Z+15	; 0x0f
 10c:	f3 fa       	bst	r15, 3
 10e:	44 27       	eor	r20, r20
 110:	40 f9       	bld	r20, 0
 112:	86 85       	ldd	r24, Z+14	; 0x0e
 114:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D4_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D4_Pin,(Copy_u8Command >> 4) & 0x01 );
 118:	f8 01       	movw	r30, r16
 11a:	61 89       	ldd	r22, Z+17	; 0x11
 11c:	f4 fa       	bst	r15, 4
 11e:	44 27       	eor	r20, r20
 120:	40 f9       	bld	r20, 0
 122:	80 89       	ldd	r24, Z+16	; 0x10
 124:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D5_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D5_Pin,(Copy_u8Command >> 5) & 0x01 );
 128:	f8 01       	movw	r30, r16
 12a:	63 89       	ldd	r22, Z+19	; 0x13
 12c:	f5 fa       	bst	r15, 5
 12e:	44 27       	eor	r20, r20
 130:	40 f9       	bld	r20, 0
 132:	82 89       	ldd	r24, Z+18	; 0x12
 134:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D6_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D6_Pin,(Copy_u8Command >> 6) & 0x01 );
 138:	f8 01       	movw	r30, r16
 13a:	65 89       	ldd	r22, Z+21	; 0x15
 13c:	f6 fa       	bst	r15, 6
 13e:	44 27       	eor	r20, r20
 140:	40 f9       	bld	r20, 0
 142:	84 89       	ldd	r24, Z+20	; 0x14
 144:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D7_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D7_Pin,(Copy_u8Command >> 7) & 0x01 );
 148:	f8 01       	movw	r30, r16
 14a:	67 89       	ldd	r22, Z+23	; 0x17
 14c:	4f 2d       	mov	r20, r15
 14e:	44 1f       	adc	r20, r20
 150:	44 27       	eor	r20, r20
 152:	44 1f       	adc	r20, r20
 154:	86 89       	ldd	r24, Z+22	; 0x16
 156:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
 15a:	5e c0       	rjmp	.+188    	; 0x218 <HLCD_enuLCD_WriteCommand+0x186>
		}
		else if(HLCD_ArrLCDCongf[Copy_enuLCDNum].DL == HLCD_enu_4Bits)
 15c:	81 11       	cpse	r24, r1
 15e:	5c c0       	rjmp	.+184    	; 0x218 <HLCD_enuLCD_WriteCommand+0x186>
		{
			/*3-send command*/
			
			/* 1. Send the higher nibble (bits 7-4) */
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D4_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D4_Pin, (Copy_u8Command >> 4) & 0x01);
 160:	8e e1       	ldi	r24, 0x1E	; 30
 162:	8c 9f       	mul	r24, r28
 164:	80 01       	movw	r16, r0
 166:	8d 9f       	mul	r24, r29
 168:	10 0d       	add	r17, r0
 16a:	11 24       	eor	r1, r1
 16c:	00 5a       	subi	r16, 0xA0	; 160
 16e:	1f 4f       	sbci	r17, 0xFF	; 255
 170:	f8 01       	movw	r30, r16
 172:	61 89       	ldd	r22, Z+17	; 0x11
 174:	f4 fa       	bst	r15, 4
 176:	44 27       	eor	r20, r20
 178:	40 f9       	bld	r20, 0
 17a:	80 89       	ldd	r24, Z+16	; 0x10
 17c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D5_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D5_Pin, (Copy_u8Command >> 5) & 0x01);
 180:	f8 01       	movw	r30, r16
 182:	63 89       	ldd	r22, Z+19	; 0x13
 184:	f5 fa       	bst	r15, 5
 186:	44 27       	eor	r20, r20
 188:	40 f9       	bld	r20, 0
 18a:	82 89       	ldd	r24, Z+18	; 0x12
 18c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D6_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D6_Pin, (Copy_u8Command >> 6) & 0x01);
 190:	f8 01       	movw	r30, r16
 192:	65 89       	ldd	r22, Z+21	; 0x15
 194:	f6 fa       	bst	r15, 6
 196:	44 27       	eor	r20, r20
 198:	40 f9       	bld	r20, 0
 19a:	84 89       	ldd	r24, Z+20	; 0x14
 19c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D7_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D7_Pin, (Copy_u8Command >> 7) & 0x01);
 1a0:	f8 01       	movw	r30, r16
 1a2:	67 89       	ldd	r22, Z+23	; 0x17
 1a4:	4f 2d       	mov	r20, r15
 1a6:	44 1f       	adc	r20, r20
 1a8:	44 27       	eor	r20, r20
 1aa:	44 1f       	adc	r20, r20
 1ac:	86 89       	ldd	r24, Z+22	; 0x16
 1ae:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>

			/* 2. Enable pulse (to latch the higher nibble) */
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Pin, MDIO_enuHIGH);
 1b2:	f8 01       	movw	r30, r16
 1b4:	65 8d       	ldd	r22, Z+29	; 0x1d
 1b6:	41 e0       	ldi	r20, 0x01	; 1
 1b8:	84 8d       	ldd	r24, Z+28	; 0x1c
 1ba:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	f2 e0       	ldi	r31, 0x02	; 2
 1c0:	fa 95       	dec	r31
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <HLCD_enuLCD_WriteCommand+0x12e>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <HLCD_enuLCD_WriteCommand+0x134>
			_delay_us(1);
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Pin, MDIO_enuLOW);
 1c6:	f8 01       	movw	r30, r16
 1c8:	65 8d       	ldd	r22, Z+29	; 0x1d
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	84 8d       	ldd	r24, Z+28	; 0x1c
 1ce:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
 1d2:	f2 e0       	ldi	r31, 0x02	; 2
 1d4:	fa 95       	dec	r31
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <HLCD_enuLCD_WriteCommand+0x142>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <HLCD_enuLCD_WriteCommand+0x148>
			_delay_us(1);
			


			/* 3. Send the lower nibble (bits 3-0) */
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D4_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D4_Pin, (Copy_u8Command >> 0) & 0x01);
 1da:	f8 01       	movw	r30, r16
 1dc:	61 89       	ldd	r22, Z+17	; 0x11
 1de:	4f 2d       	mov	r20, r15
 1e0:	41 70       	andi	r20, 0x01	; 1
 1e2:	80 89       	ldd	r24, Z+16	; 0x10
 1e4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D5_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D5_Pin, (Copy_u8Command >> 1) & 0x01);
 1e8:	f8 01       	movw	r30, r16
 1ea:	63 89       	ldd	r22, Z+19	; 0x13
 1ec:	f1 fa       	bst	r15, 1
 1ee:	44 27       	eor	r20, r20
 1f0:	40 f9       	bld	r20, 0
 1f2:	82 89       	ldd	r24, Z+18	; 0x12
 1f4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D6_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D6_Pin, (Copy_u8Command >> 2) & 0x01);
 1f8:	f8 01       	movw	r30, r16
 1fa:	65 89       	ldd	r22, Z+21	; 0x15
 1fc:	f2 fa       	bst	r15, 2
 1fe:	44 27       	eor	r20, r20
 200:	40 f9       	bld	r20, 0
 202:	84 89       	ldd	r24, Z+20	; 0x14
 204:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D7_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D7_Pin, (Copy_u8Command >> 3) & 0x01);
 208:	f8 01       	movw	r30, r16
 20a:	67 89       	ldd	r22, Z+23	; 0x17
 20c:	f3 fa       	bst	r15, 3
 20e:	44 27       	eor	r20, r20
 210:	40 f9       	bld	r20, 0
 212:	86 89       	ldd	r24, Z+22	; 0x16
 214:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			
			
		}
		/*4-enable */
		MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Pin, MDIO_enuHIGH);
 218:	2e e1       	ldi	r18, 0x1E	; 30
 21a:	2c 9f       	mul	r18, r28
 21c:	c0 01       	movw	r24, r0
 21e:	2d 9f       	mul	r18, r29
 220:	90 0d       	add	r25, r0
 222:	11 24       	eor	r1, r1
 224:	ec 01       	movw	r28, r24
 226:	c0 5a       	subi	r28, 0xA0	; 160
 228:	df 4f       	sbci	r29, 0xFF	; 255
 22a:	6d 8d       	ldd	r22, Y+29	; 0x1d
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 230:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
 234:	f2 e0       	ldi	r31, 0x02	; 2
 236:	fa 95       	dec	r31
 238:	f1 f7       	brne	.-4      	; 0x236 <HLCD_enuLCD_WriteCommand+0x1a4>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <HLCD_enuLCD_WriteCommand+0x1aa>
		_delay_us(1);
		MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Pin, MDIO_enuLOW);
 23c:	6d 8d       	ldd	r22, Y+29	; 0x1d
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	8c 8d       	ldd	r24, Y+28	; 0x1c
 242:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	8a 95       	dec	r24
 24a:	f1 f7       	brne	.-4      	; 0x248 <HLCD_enuLCD_WriteCommand+0x1b6>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <HLCD_enuLCD_WriteCommand+0x1bc>
		Ret_enuError =HLCD_enuINVALIDLCDNAME ;
		
	}
	else
	{
		Ret_enuError = HLCD_enuOK;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	01 c0       	rjmp	.+2      	; 0x254 <HLCD_enuLCD_WriteCommand+0x1c2>
HLCD_enuErrorStatus_t HLCD_enuLCD_WriteCommand(u8 Copy_enuLCDNum,u8 Copy_u8Command)
{
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;
	if(IS_INVALID_LCD_NAME(Copy_enuLCDNum))
	{
		Ret_enuError =HLCD_enuINVALIDLCDNAME ;
 252:	82 e0       	ldi	r24, 0x02	; 2
		_delay_us(1);
		MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Pin, MDIO_enuLOW);
		_delay_us(1);
	}
	return Ret_enuError ;
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	08 95       	ret

00000260 <HLCD_vLCD_ClearDisplay>:
	}
	
}
void HLCD_vLCD_ClearDisplay(u8 Copy_enuLCDNum)
{
	HLCD_enuLCD_WriteCommand(Copy_enuLCDNum, 0x01);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	0e 94 49 00 	call	0x92	; 0x92 <HLCD_enuLCD_WriteCommand>
 266:	08 95       	ret

00000268 <HLCD_vLCD_init>:


extern  HLCD_strLCDCONFG_8BIT_t HLCD_ArrLCDCongf[Num_of_LCD];

void HLCD_vLCD_init(void)
{
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
	u8 Local_u8_LCd_D0=0 , Local_u8_LCd_D1=0 , Local_u8_LCd_D2=0 , Local_u8_LCd_D3=0 , Local_u8_LCd_D4=0 , Local_u8_LCd_D5=0 , Local_u8_LCd_D6=0 , Local_u8_LCd_D7=0 , Local_u8_LCd_RS=0 , Local_u8_LCd_RW=0 , Local_u8_LCd_E=0;
	for (int i = 0; i < Num_of_LCD; i++)
 270:	c0 e0       	ldi	r28, 0x00	; 0
 272:	d0 e0       	ldi	r29, 0x00	; 0
 274:	50 c1       	rjmp	.+672    	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 276:	2f eb       	ldi	r18, 0xBF	; 191
 278:	8a ed       	ldi	r24, 0xDA	; 218
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <HLCD_vLCD_init+0x14>
 284:	00 c0       	rjmp	.+0      	; 0x286 <HLCD_vLCD_init+0x1e>
 286:	00 00       	nop
		_delay_ms(35);
		u8 functionSetCmd = 0x20; // Base value: 0b00100000
		/*2-send function set command*/

		// Set DL (Data Length)
		if (HLCD_ArrLCDCongf[i].DL == HLCD_enu_8Bits)
 288:	8e e1       	ldi	r24, 0x1E	; 30
 28a:	8c 9f       	mul	r24, r28
 28c:	f0 01       	movw	r30, r0
 28e:	8d 9f       	mul	r24, r29
 290:	f0 0d       	add	r31, r0
 292:	11 24       	eor	r1, r1
 294:	e0 5a       	subi	r30, 0xA0	; 160
 296:	ff 4f       	sbci	r31, 0xFF	; 255
 298:	80 81       	ld	r24, Z
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	09 f0       	breq	.+2      	; 0x2a0 <HLCD_vLCD_init+0x38>
 29e:	70 c0       	rjmp	.+224    	; 0x380 <HLCD_vLCD_init+0x118>
		{
			Local_u8_LCd_D0 = ((HLCD_ArrLCDCongf[i].D0_Port<<4) + HLCD_ArrLCDCongf[i].D0_Pin);
 2a0:	8f 01       	movw	r16, r30
 2a2:	90 85       	ldd	r25, Z+8	; 0x08
 2a4:	81 85       	ldd	r24, Z+9	; 0x09
			MPORT_enuSetPinDirection(Local_u8_LCd_D0 , MPORT_enuPINOUTPUT);
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	f0 e1       	ldi	r31, 0x10	; 16
 2aa:	9f 9f       	mul	r25, r31
 2ac:	80 0d       	add	r24, r0
 2ae:	11 24       	eor	r1, r1
 2b0:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			Local_u8_LCd_D1 = ((HLCD_ArrLCDCongf[i].D1_Port<<4) + HLCD_ArrLCDCongf[i].D1_Pin);
 2b4:	f8 01       	movw	r30, r16
 2b6:	92 85       	ldd	r25, Z+10	; 0x0a
 2b8:	83 85       	ldd	r24, Z+11	; 0x0b
			MPORT_enuSetPinDirection(Local_u8_LCd_D1 , MPORT_enuPINOUTPUT);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	f0 e1       	ldi	r31, 0x10	; 16
 2be:	9f 9f       	mul	r25, r31
 2c0:	80 0d       	add	r24, r0
 2c2:	11 24       	eor	r1, r1
 2c4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			Local_u8_LCd_D2 = ((HLCD_ArrLCDCongf[i].D2_Port<<4) + HLCD_ArrLCDCongf[i].D2_Pin);
 2c8:	f8 01       	movw	r30, r16
 2ca:	94 85       	ldd	r25, Z+12	; 0x0c
 2cc:	85 85       	ldd	r24, Z+13	; 0x0d
			MPORT_enuSetPinDirection(Local_u8_LCd_D2 , MPORT_enuPINOUTPUT);
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	f0 e1       	ldi	r31, 0x10	; 16
 2d2:	9f 9f       	mul	r25, r31
 2d4:	80 0d       	add	r24, r0
 2d6:	11 24       	eor	r1, r1
 2d8:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			Local_u8_LCd_D3 = ((HLCD_ArrLCDCongf[i].D3_Port<<4) + HLCD_ArrLCDCongf[i].D3_Pin);
 2dc:	f8 01       	movw	r30, r16
 2de:	96 85       	ldd	r25, Z+14	; 0x0e
 2e0:	87 85       	ldd	r24, Z+15	; 0x0f
			MPORT_enuSetPinDirection(Local_u8_LCd_D3 , MPORT_enuPINOUTPUT);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	f0 e1       	ldi	r31, 0x10	; 16
 2e6:	9f 9f       	mul	r25, r31
 2e8:	80 0d       	add	r24, r0
 2ea:	11 24       	eor	r1, r1
 2ec:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			Local_u8_LCd_D4 = ((HLCD_ArrLCDCongf[i].D4_Port<<4) + HLCD_ArrLCDCongf[i].D4_Pin);
 2f0:	f8 01       	movw	r30, r16
 2f2:	90 89       	ldd	r25, Z+16	; 0x10
 2f4:	81 89       	ldd	r24, Z+17	; 0x11
			MPORT_enuSetPinDirection(Local_u8_LCd_D4 , MPORT_enuPINOUTPUT);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	f0 e1       	ldi	r31, 0x10	; 16
 2fa:	9f 9f       	mul	r25, r31
 2fc:	80 0d       	add	r24, r0
 2fe:	11 24       	eor	r1, r1
 300:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			Local_u8_LCd_D5 = ((HLCD_ArrLCDCongf[i].D5_Port<<4) + HLCD_ArrLCDCongf[i].D5_Pin);
 304:	f8 01       	movw	r30, r16
 306:	92 89       	ldd	r25, Z+18	; 0x12
 308:	83 89       	ldd	r24, Z+19	; 0x13
			MPORT_enuSetPinDirection(Local_u8_LCd_D5 , MPORT_enuPINOUTPUT);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	f0 e1       	ldi	r31, 0x10	; 16
 30e:	9f 9f       	mul	r25, r31
 310:	80 0d       	add	r24, r0
 312:	11 24       	eor	r1, r1
 314:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			Local_u8_LCd_D6 = ((HLCD_ArrLCDCongf[i].D6_Port<<4) + HLCD_ArrLCDCongf[i].D6_Pin);
 318:	f8 01       	movw	r30, r16
 31a:	94 89       	ldd	r25, Z+20	; 0x14
 31c:	85 89       	ldd	r24, Z+21	; 0x15
			MPORT_enuSetPinDirection(Local_u8_LCd_D6 , MPORT_enuPINOUTPUT);
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	f0 e1       	ldi	r31, 0x10	; 16
 322:	9f 9f       	mul	r25, r31
 324:	80 0d       	add	r24, r0
 326:	11 24       	eor	r1, r1
 328:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			Local_u8_LCd_D7 = ((HLCD_ArrLCDCongf[i].D7_Port<<4) + HLCD_ArrLCDCongf[i].D7_Pin);
 32c:	f8 01       	movw	r30, r16
 32e:	96 89       	ldd	r25, Z+22	; 0x16
 330:	87 89       	ldd	r24, Z+23	; 0x17
			MPORT_enuSetPinDirection(Local_u8_LCd_D7 , MPORT_enuPINOUTPUT);
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	f0 e1       	ldi	r31, 0x10	; 16
 336:	9f 9f       	mul	r25, r31
 338:	80 0d       	add	r24, r0
 33a:	11 24       	eor	r1, r1
 33c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			Local_u8_LCd_RS = ((HLCD_ArrLCDCongf[i].RS_Port<<4) + HLCD_ArrLCDCongf[i].RS_Pin);
 340:	f8 01       	movw	r30, r16
 342:	90 8d       	ldd	r25, Z+24	; 0x18
 344:	81 8d       	ldd	r24, Z+25	; 0x19
			MPORT_enuSetPinDirection(Local_u8_LCd_RS , MPORT_enuPINOUTPUT);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	f0 e1       	ldi	r31, 0x10	; 16
 34a:	9f 9f       	mul	r25, r31
 34c:	80 0d       	add	r24, r0
 34e:	11 24       	eor	r1, r1
 350:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			Local_u8_LCd_RW = ((HLCD_ArrLCDCongf[i].RW_Port<<4) + HLCD_ArrLCDCongf[i].RW_Pin);
 354:	f8 01       	movw	r30, r16
 356:	92 8d       	ldd	r25, Z+26	; 0x1a
 358:	83 8d       	ldd	r24, Z+27	; 0x1b
			MPORT_enuSetPinDirection(Local_u8_LCd_RW , MPORT_enuPINOUTPUT);
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	f0 e1       	ldi	r31, 0x10	; 16
 35e:	9f 9f       	mul	r25, r31
 360:	80 0d       	add	r24, r0
 362:	11 24       	eor	r1, r1
 364:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			Local_u8_LCd_E = ((HLCD_ArrLCDCongf[i].E_Port<<4) + HLCD_ArrLCDCongf[i].E_Pin);
 368:	f8 01       	movw	r30, r16
 36a:	94 8d       	ldd	r25, Z+28	; 0x1c
 36c:	85 8d       	ldd	r24, Z+29	; 0x1d
			MPORT_enuSetPinDirection(Local_u8_LCd_E , MPORT_enuPINOUTPUT);
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	f0 e1       	ldi	r31, 0x10	; 16
 372:	9f 9f       	mul	r25, r31
 374:	80 0d       	add	r24, r0
 376:	11 24       	eor	r1, r1
 378:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			
			functionSetCmd |= 0x10; // Set DL to 1
 37c:	60 e3       	ldi	r22, 0x30	; 48
 37e:	57 c0       	rjmp	.+174    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>

		}
		else if(HLCD_ArrLCDCongf[i].DL == HLCD_enu_4Bits)
 380:	81 11       	cpse	r24, r1
 382:	54 c0       	rjmp	.+168    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		{
			Local_u8_LCd_D4 = ((HLCD_ArrLCDCongf[i].D4_Port<<4) + HLCD_ArrLCDCongf[i].D4_Pin);
 384:	8e e1       	ldi	r24, 0x1E	; 30
 386:	8c 9f       	mul	r24, r28
 388:	80 01       	movw	r16, r0
 38a:	8d 9f       	mul	r24, r29
 38c:	10 0d       	add	r17, r0
 38e:	11 24       	eor	r1, r1
 390:	00 5a       	subi	r16, 0xA0	; 160
 392:	1f 4f       	sbci	r17, 0xFF	; 255
 394:	f8 01       	movw	r30, r16
 396:	90 89       	ldd	r25, Z+16	; 0x10
 398:	81 89       	ldd	r24, Z+17	; 0x11
			MPORT_enuSetPinDirection(Local_u8_LCd_D4 , MPORT_enuPINOUTPUT);
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	f0 e1       	ldi	r31, 0x10	; 16
 39e:	9f 9f       	mul	r25, r31
 3a0:	80 0d       	add	r24, r0
 3a2:	11 24       	eor	r1, r1
 3a4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			Local_u8_LCd_D5 = ((HLCD_ArrLCDCongf[i].D5_Port<<4) + HLCD_ArrLCDCongf[i].D5_Pin);
 3a8:	f8 01       	movw	r30, r16
 3aa:	92 89       	ldd	r25, Z+18	; 0x12
 3ac:	83 89       	ldd	r24, Z+19	; 0x13
			MPORT_enuSetPinDirection(Local_u8_LCd_D5 , MPORT_enuPINOUTPUT);
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	f0 e1       	ldi	r31, 0x10	; 16
 3b2:	9f 9f       	mul	r25, r31
 3b4:	80 0d       	add	r24, r0
 3b6:	11 24       	eor	r1, r1
 3b8:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			Local_u8_LCd_D6 = ((HLCD_ArrLCDCongf[i].D6_Port<<4) + HLCD_ArrLCDCongf[i].D6_Pin);
 3bc:	f8 01       	movw	r30, r16
 3be:	94 89       	ldd	r25, Z+20	; 0x14
 3c0:	85 89       	ldd	r24, Z+21	; 0x15
			MPORT_enuSetPinDirection(Local_u8_LCd_D6 , MPORT_enuPINOUTPUT);
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	f0 e1       	ldi	r31, 0x10	; 16
 3c6:	9f 9f       	mul	r25, r31
 3c8:	80 0d       	add	r24, r0
 3ca:	11 24       	eor	r1, r1
 3cc:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			Local_u8_LCd_D7 = ((HLCD_ArrLCDCongf[i].D7_Port<<4) + HLCD_ArrLCDCongf[i].D7_Pin);
 3d0:	f8 01       	movw	r30, r16
 3d2:	96 89       	ldd	r25, Z+22	; 0x16
 3d4:	87 89       	ldd	r24, Z+23	; 0x17
			MPORT_enuSetPinDirection(Local_u8_LCd_D7 , MPORT_enuPINOUTPUT);
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	f0 e1       	ldi	r31, 0x10	; 16
 3da:	9f 9f       	mul	r25, r31
 3dc:	80 0d       	add	r24, r0
 3de:	11 24       	eor	r1, r1
 3e0:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			Local_u8_LCd_RS = ((HLCD_ArrLCDCongf[i].RS_Port<<4) + HLCD_ArrLCDCongf[i].RS_Pin);
 3e4:	f8 01       	movw	r30, r16
 3e6:	90 8d       	ldd	r25, Z+24	; 0x18
 3e8:	81 8d       	ldd	r24, Z+25	; 0x19
			MPORT_enuSetPinDirection(Local_u8_LCd_RS , MPORT_enuPINOUTPUT);
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	f0 e1       	ldi	r31, 0x10	; 16
 3ee:	9f 9f       	mul	r25, r31
 3f0:	80 0d       	add	r24, r0
 3f2:	11 24       	eor	r1, r1
 3f4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			Local_u8_LCd_RW = ((HLCD_ArrLCDCongf[i].RW_Port<<4) + HLCD_ArrLCDCongf[i].RW_Pin);
 3f8:	f8 01       	movw	r30, r16
 3fa:	92 8d       	ldd	r25, Z+26	; 0x1a
 3fc:	83 8d       	ldd	r24, Z+27	; 0x1b
			MPORT_enuSetPinDirection(Local_u8_LCd_RW , MPORT_enuPINOUTPUT);
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	f0 e1       	ldi	r31, 0x10	; 16
 402:	9f 9f       	mul	r25, r31
 404:	80 0d       	add	r24, r0
 406:	11 24       	eor	r1, r1
 408:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			Local_u8_LCd_E = ((HLCD_ArrLCDCongf[i].E_Port<<4) + HLCD_ArrLCDCongf[i].E_Pin);
 40c:	f8 01       	movw	r30, r16
 40e:	94 8d       	ldd	r25, Z+28	; 0x1c
 410:	85 8d       	ldd	r24, Z+29	; 0x1d
			MPORT_enuSetPinDirection(Local_u8_LCd_E , MPORT_enuPINOUTPUT);
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	f0 e1       	ldi	r31, 0x10	; 16
 416:	9f 9f       	mul	r25, r31
 418:	80 0d       	add	r24, r0
 41a:	11 24       	eor	r1, r1
 41c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MPORT_enuSetPinDirection>
			
			HLCD_enuLCD_WriteCommand(i, 0b00000010 );
 420:	62 e0       	ldi	r22, 0x02	; 2
 422:	8c 2f       	mov	r24, r28
 424:	0e 94 49 00 	call	0x92	; 0x92 <HLCD_enuLCD_WriteCommand>
	{

		
		/*1-Wait for more than 30msafter VDD rises to 4.5V.*/
		_delay_ms(35);
		u8 functionSetCmd = 0x20; // Base value: 0b00100000
 428:	60 e2       	ldi	r22, 0x20	; 32
 42a:	01 c0       	rjmp	.+2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42c:	60 e2       	ldi	r22, 0x20	; 32
			MPORT_enuSetPinDirection(Local_u8_LCd_E , MPORT_enuPINOUTPUT);
			
			HLCD_enuLCD_WriteCommand(i, 0b00000010 );
		}
		// Set N (Number of Display Lines)
		if (HLCD_ArrLCDCongf[i].N == HLCD_enu_2Lines) {
 42e:	8e e1       	ldi	r24, 0x1E	; 30
 430:	8c 9f       	mul	r24, r28
 432:	f0 01       	movw	r30, r0
 434:	8d 9f       	mul	r24, r29
 436:	f0 0d       	add	r31, r0
 438:	11 24       	eor	r1, r1
 43a:	e0 5a       	subi	r30, 0xA0	; 160
 43c:	ff 4f       	sbci	r31, 0xFF	; 255
 43e:	81 81       	ldd	r24, Z+1	; 0x01
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	09 f4       	brne	.+2      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
			functionSetCmd |= 0x08; // Set N to 1
 444:	68 60       	ori	r22, 0x08	; 8
		}
		// Set F (Font Type)
		if (HLCD_ArrLCDCongf[i].F == HLCD_enu_5x11) {
 446:	8e e1       	ldi	r24, 0x1E	; 30
 448:	8c 9f       	mul	r24, r28
 44a:	f0 01       	movw	r30, r0
 44c:	8d 9f       	mul	r24, r29
 44e:	f0 0d       	add	r31, r0
 450:	11 24       	eor	r1, r1
 452:	e0 5a       	subi	r30, 0xA0	; 160
 454:	ff 4f       	sbci	r31, 0xFF	; 255
 456:	82 81       	ldd	r24, Z+2	; 0x02
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	09 f4       	brne	.+2      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
			functionSetCmd |= 0x04; // Set F to 1
 45c:	64 60       	ori	r22, 0x04	; 4
		}
		HLCD_enuLCD_WriteCommand(i, functionSetCmd );
 45e:	1c 2f       	mov	r17, r28
 460:	8c 2f       	mov	r24, r28
 462:	0e 94 49 00 	call	0x92	; 0x92 <HLCD_enuLCD_WriteCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 466:	25 e8       	ldi	r18, 0x85	; 133
 468:	2a 95       	dec	r18
 46a:	f1 f7       	brne	.-4      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 46c:	00 00       	nop
		
		/*4-display on / off control */
		// Display ON/OFF Control Command
		u8 displayCtrlCmd = 0x08; // Base value: 0b00001000
		// Set D (Display ON/OFF)
		if (HLCD_ArrLCDCongf[i].D == HLCD_enu_LCD_on) {
 46e:	8e e1       	ldi	r24, 0x1E	; 30
 470:	8c 9f       	mul	r24, r28
 472:	f0 01       	movw	r30, r0
 474:	8d 9f       	mul	r24, r29
 476:	f0 0d       	add	r31, r0
 478:	11 24       	eor	r1, r1
 47a:	e0 5a       	subi	r30, 0xA0	; 160
 47c:	ff 4f       	sbci	r31, 0xFF	; 255
 47e:	83 81       	ldd	r24, Z+3	; 0x03
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	11 f0       	breq	.+4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
		_delay_us(50);
		
		
		/*4-display on / off control */
		// Display ON/OFF Control Command
		u8 displayCtrlCmd = 0x08; // Base value: 0b00001000
 484:	68 e0       	ldi	r22, 0x08	; 8
 486:	01 c0       	rjmp	.+2      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
		// Set D (Display ON/OFF)
		if (HLCD_ArrLCDCongf[i].D == HLCD_enu_LCD_on) {
			displayCtrlCmd |= 0x04; // Set D to 1
 488:	6c e0       	ldi	r22, 0x0C	; 12
		}
		// Set C (Cursor ON/OFF)
		if (HLCD_ArrLCDCongf[i].C == HLCD_enu_Cursor_on) {
 48a:	8e e1       	ldi	r24, 0x1E	; 30
 48c:	8c 9f       	mul	r24, r28
 48e:	f0 01       	movw	r30, r0
 490:	8d 9f       	mul	r24, r29
 492:	f0 0d       	add	r31, r0
 494:	11 24       	eor	r1, r1
 496:	e0 5a       	subi	r30, 0xA0	; 160
 498:	ff 4f       	sbci	r31, 0xFF	; 255
 49a:	84 81       	ldd	r24, Z+4	; 0x04
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	09 f4       	brne	.+2      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			displayCtrlCmd |= 0x02; // Set C to 1
 4a0:	62 60       	ori	r22, 0x02	; 2
		}
		// Set B (Blink ON/OFF)
		if (HLCD_ArrLCDCongf[i].B == HLCD_enu_Blink_on) {
 4a2:	8e e1       	ldi	r24, 0x1E	; 30
 4a4:	8c 9f       	mul	r24, r28
 4a6:	f0 01       	movw	r30, r0
 4a8:	8d 9f       	mul	r24, r29
 4aa:	f0 0d       	add	r31, r0
 4ac:	11 24       	eor	r1, r1
 4ae:	e0 5a       	subi	r30, 0xA0	; 160
 4b0:	ff 4f       	sbci	r31, 0xFF	; 255
 4b2:	85 81       	ldd	r24, Z+5	; 0x05
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	09 f4       	brne	.+2      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
			displayCtrlCmd |= 0x01; // Set B to 1
 4b8:	61 60       	ori	r22, 0x01	; 1
		}
		// Send the Display ON/OFF Control command to the LCD
		HLCD_enuLCD_WriteCommand(i, displayCtrlCmd);
 4ba:	81 2f       	mov	r24, r17
 4bc:	0e 94 49 00 	call	0x92	; 0x92 <HLCD_enuLCD_WriteCommand>
 4c0:	85 e8       	ldi	r24, 0x85	; 133
 4c2:	8a 95       	dec	r24
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4c6:	00 00       	nop
		
		/*5- delay more than 39 us*/
		_delay_us(50);
		
		/*6-display clear*/
		HLCD_vLCD_ClearDisplay(i);
 4c8:	81 2f       	mov	r24, r17
 4ca:	0e 94 30 01 	call	0x260	; 0x260 <HLCD_vLCD_ClearDisplay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ce:	ef e9       	ldi	r30, 0x9F	; 159
 4d0:	ff e0       	ldi	r31, 0x0F	; 15
 4d2:	31 97       	sbiw	r30, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4d8:	00 00       	nop
		_delay_ms(2);
		
		/*8-entry mode set*/
		u8 entryModeCmd = 0x04; // Base value: 0b00000100
		// Set I/D (Increment/Decrement)
		if (HLCD_ArrLCDCongf[i].I_D == HLCD_enu_INC) {
 4da:	8e e1       	ldi	r24, 0x1E	; 30
 4dc:	8c 9f       	mul	r24, r28
 4de:	f0 01       	movw	r30, r0
 4e0:	8d 9f       	mul	r24, r29
 4e2:	f0 0d       	add	r31, r0
 4e4:	11 24       	eor	r1, r1
 4e6:	e0 5a       	subi	r30, 0xA0	; 160
 4e8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ea:	86 81       	ldd	r24, Z+6	; 0x06
 4ec:	81 30       	cpi	r24, 0x01	; 1
 4ee:	11 f0       	breq	.+4      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
		
		/*7-delay more than 1.53ms*/
		_delay_ms(2);
		
		/*8-entry mode set*/
		u8 entryModeCmd = 0x04; // Base value: 0b00000100
 4f0:	64 e0       	ldi	r22, 0x04	; 4
 4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
		// Set I/D (Increment/Decrement)
		if (HLCD_ArrLCDCongf[i].I_D == HLCD_enu_INC) {
			entryModeCmd |= 0x02; // Set I/D to 1
 4f4:	66 e0       	ldi	r22, 0x06	; 6
		}
		// Set SH (Shift Entire Display)
		if (HLCD_ArrLCDCongf[i].S == HLCD_enu_EnableShift) {
 4f6:	8e e1       	ldi	r24, 0x1E	; 30
 4f8:	8c 9f       	mul	r24, r28
 4fa:	f0 01       	movw	r30, r0
 4fc:	8d 9f       	mul	r24, r29
 4fe:	f0 0d       	add	r31, r0
 500:	11 24       	eor	r1, r1
 502:	e0 5a       	subi	r30, 0xA0	; 160
 504:	ff 4f       	sbci	r31, 0xFF	; 255
 506:	87 81       	ldd	r24, Z+7	; 0x07
 508:	81 30       	cpi	r24, 0x01	; 1
 50a:	09 f4       	brne	.+2      	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
			entryModeCmd |= 0x01; // Set SH to 1
 50c:	61 60       	ori	r22, 0x01	; 1
		}
		// Send the Entry Mode Set command to the LCD
		HLCD_enuLCD_WriteCommand(i, entryModeCmd);
 50e:	81 2f       	mov	r24, r17
 510:	0e 94 49 00 	call	0x92	; 0x92 <HLCD_enuLCD_WriteCommand>
extern  HLCD_strLCDCONFG_8BIT_t HLCD_ArrLCDCongf[Num_of_LCD];

void HLCD_vLCD_init(void)
{
	u8 Local_u8_LCd_D0=0 , Local_u8_LCd_D1=0 , Local_u8_LCd_D2=0 , Local_u8_LCd_D3=0 , Local_u8_LCd_D4=0 , Local_u8_LCd_D5=0 , Local_u8_LCd_D6=0 , Local_u8_LCd_D7=0 , Local_u8_LCd_RS=0 , Local_u8_LCd_RW=0 , Local_u8_LCd_E=0;
	for (int i = 0; i < Num_of_LCD; i++)
 514:	21 96       	adiw	r28, 0x01	; 1
 516:	c2 30       	cpi	r28, 0x02	; 2
 518:	d1 05       	cpc	r29, r1
 51a:	0c f4       	brge	.+2      	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
 51c:	ac ce       	rjmp	.-680    	; 0x276 <HLCD_vLCD_init+0xe>
		// Send the Entry Mode Set command to the LCD
		HLCD_enuLCD_WriteCommand(i, entryModeCmd);
		
	}
	
}
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	08 95       	ret

00000528 <HLCD_enuLCD_WriteCharacter>:
		_delay_us(1);
	}
	return Ret_enuError ;
}
HLCD_enuErrorStatus_t HLCD_enuLCD_WriteCharacter(u8 Copy_enuLCDNum, u8 Copy_u8Data)
{
 528:	ff 92       	push	r15
 52a:	0f 93       	push	r16
 52c:	1f 93       	push	r17
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;
	if(IS_INVALID_LCD_NAME(Copy_enuLCDNum))
 532:	83 30       	cpi	r24, 0x03	; 3
 534:	08 f0       	brcs	.+2      	; 0x538 <HLCD_enuLCD_WriteCharacter+0x10>
 536:	d8 c0       	rjmp	.+432    	; 0x6e8 <HLCD_enuLCD_WriteCharacter+0x1c0>
 538:	f6 2e       	mov	r15, r22
	}
	else
	{
		Ret_enuError = HLCD_enuOK;
		/*1-rw->low for writing*/
		MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].RW_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].RW_Pin, MDIO_enuLOW);
 53a:	c8 2f       	mov	r28, r24
 53c:	d0 e0       	ldi	r29, 0x00	; 0
 53e:	8e e1       	ldi	r24, 0x1E	; 30
 540:	8c 9f       	mul	r24, r28
 542:	80 01       	movw	r16, r0
 544:	8d 9f       	mul	r24, r29
 546:	10 0d       	add	r17, r0
 548:	11 24       	eor	r1, r1
 54a:	00 5a       	subi	r16, 0xA0	; 160
 54c:	1f 4f       	sbci	r17, 0xFF	; 255
 54e:	f8 01       	movw	r30, r16
 550:	63 8d       	ldd	r22, Z+27	; 0x1b
 552:	40 e0       	ldi	r20, 0x00	; 0
 554:	82 8d       	ldd	r24, Z+26	; 0x1a
 556:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
		/*2-rs-> low for data*/
		MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].RS_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].RS_Pin, MDIO_enuHIGH);
 55a:	f8 01       	movw	r30, r16
 55c:	61 8d       	ldd	r22, Z+25	; 0x19
 55e:	41 e0       	ldi	r20, 0x01	; 1
 560:	80 8d       	ldd	r24, Z+24	; 0x18
 562:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
		if(HLCD_ArrLCDCongf[Copy_enuLCDNum].DL == HLCD_enu_8Bits)
 566:	f8 01       	movw	r30, r16
 568:	80 81       	ld	r24, Z
 56a:	81 30       	cpi	r24, 0x01	; 1
 56c:	09 f0       	breq	.+2      	; 0x570 <HLCD_enuLCD_WriteCharacter+0x48>
 56e:	41 c0       	rjmp	.+130    	; 0x5f2 <HLCD_enuLCD_WriteCharacter+0xca>
		{
			/*3-send data*/
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D0_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D0_Pin,(Copy_u8Data >> 0) & 0x01 );
 570:	8f 01       	movw	r16, r30
 572:	61 85       	ldd	r22, Z+9	; 0x09
 574:	4f 2d       	mov	r20, r15
 576:	41 70       	andi	r20, 0x01	; 1
 578:	80 85       	ldd	r24, Z+8	; 0x08
 57a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D1_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D1_Pin,(Copy_u8Data >> 1) & 0x01 );
 57e:	f8 01       	movw	r30, r16
 580:	63 85       	ldd	r22, Z+11	; 0x0b
 582:	f1 fa       	bst	r15, 1
 584:	44 27       	eor	r20, r20
 586:	40 f9       	bld	r20, 0
 588:	82 85       	ldd	r24, Z+10	; 0x0a
 58a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D2_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D2_Pin,(Copy_u8Data >> 2) & 0x01 );
 58e:	f8 01       	movw	r30, r16
 590:	65 85       	ldd	r22, Z+13	; 0x0d
 592:	f2 fa       	bst	r15, 2
 594:	44 27       	eor	r20, r20
 596:	40 f9       	bld	r20, 0
 598:	84 85       	ldd	r24, Z+12	; 0x0c
 59a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D3_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D3_Pin,(Copy_u8Data >> 3) & 0x01 );
 59e:	f8 01       	movw	r30, r16
 5a0:	67 85       	ldd	r22, Z+15	; 0x0f
 5a2:	f3 fa       	bst	r15, 3
 5a4:	44 27       	eor	r20, r20
 5a6:	40 f9       	bld	r20, 0
 5a8:	86 85       	ldd	r24, Z+14	; 0x0e
 5aa:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D4_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D4_Pin,(Copy_u8Data >> 4) & 0x01 );
 5ae:	f8 01       	movw	r30, r16
 5b0:	61 89       	ldd	r22, Z+17	; 0x11
 5b2:	f4 fa       	bst	r15, 4
 5b4:	44 27       	eor	r20, r20
 5b6:	40 f9       	bld	r20, 0
 5b8:	80 89       	ldd	r24, Z+16	; 0x10
 5ba:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D5_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D5_Pin,(Copy_u8Data >> 5) & 0x01 );
 5be:	f8 01       	movw	r30, r16
 5c0:	63 89       	ldd	r22, Z+19	; 0x13
 5c2:	f5 fa       	bst	r15, 5
 5c4:	44 27       	eor	r20, r20
 5c6:	40 f9       	bld	r20, 0
 5c8:	82 89       	ldd	r24, Z+18	; 0x12
 5ca:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D6_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D6_Pin,(Copy_u8Data >> 6) & 0x01 );
 5ce:	f8 01       	movw	r30, r16
 5d0:	65 89       	ldd	r22, Z+21	; 0x15
 5d2:	f6 fa       	bst	r15, 6
 5d4:	44 27       	eor	r20, r20
 5d6:	40 f9       	bld	r20, 0
 5d8:	84 89       	ldd	r24, Z+20	; 0x14
 5da:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D7_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D7_Pin,(Copy_u8Data >> 7) & 0x01 );
 5de:	f8 01       	movw	r30, r16
 5e0:	67 89       	ldd	r22, Z+23	; 0x17
 5e2:	4f 2d       	mov	r20, r15
 5e4:	44 1f       	adc	r20, r20
 5e6:	44 27       	eor	r20, r20
 5e8:	44 1f       	adc	r20, r20
 5ea:	86 89       	ldd	r24, Z+22	; 0x16
 5ec:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
 5f0:	5e c0       	rjmp	.+188    	; 0x6ae <HLCD_enuLCD_WriteCharacter+0x186>
		}
		else if(HLCD_ArrLCDCongf[Copy_enuLCDNum].DL == HLCD_enu_4Bits)
 5f2:	81 11       	cpse	r24, r1
 5f4:	5c c0       	rjmp	.+184    	; 0x6ae <HLCD_enuLCD_WriteCharacter+0x186>
		{
			/*3-send command*/
			
			/* 1. Send the higher nibble (bits 7-4) */
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D4_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D4_Pin, (Copy_u8Data >> 4) & 0x01);
 5f6:	8e e1       	ldi	r24, 0x1E	; 30
 5f8:	8c 9f       	mul	r24, r28
 5fa:	80 01       	movw	r16, r0
 5fc:	8d 9f       	mul	r24, r29
 5fe:	10 0d       	add	r17, r0
 600:	11 24       	eor	r1, r1
 602:	00 5a       	subi	r16, 0xA0	; 160
 604:	1f 4f       	sbci	r17, 0xFF	; 255
 606:	f8 01       	movw	r30, r16
 608:	61 89       	ldd	r22, Z+17	; 0x11
 60a:	f4 fa       	bst	r15, 4
 60c:	44 27       	eor	r20, r20
 60e:	40 f9       	bld	r20, 0
 610:	80 89       	ldd	r24, Z+16	; 0x10
 612:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D5_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D5_Pin, (Copy_u8Data >> 5) & 0x01);
 616:	f8 01       	movw	r30, r16
 618:	63 89       	ldd	r22, Z+19	; 0x13
 61a:	f5 fa       	bst	r15, 5
 61c:	44 27       	eor	r20, r20
 61e:	40 f9       	bld	r20, 0
 620:	82 89       	ldd	r24, Z+18	; 0x12
 622:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D6_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D6_Pin, (Copy_u8Data >> 6) & 0x01);
 626:	f8 01       	movw	r30, r16
 628:	65 89       	ldd	r22, Z+21	; 0x15
 62a:	f6 fa       	bst	r15, 6
 62c:	44 27       	eor	r20, r20
 62e:	40 f9       	bld	r20, 0
 630:	84 89       	ldd	r24, Z+20	; 0x14
 632:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D7_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D7_Pin, (Copy_u8Data >> 7) & 0x01);
 636:	f8 01       	movw	r30, r16
 638:	67 89       	ldd	r22, Z+23	; 0x17
 63a:	4f 2d       	mov	r20, r15
 63c:	44 1f       	adc	r20, r20
 63e:	44 27       	eor	r20, r20
 640:	44 1f       	adc	r20, r20
 642:	86 89       	ldd	r24, Z+22	; 0x16
 644:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>

			/* 2. Enable pulse (to latch the higher nibble) */
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Pin, MDIO_enuHIGH);
 648:	f8 01       	movw	r30, r16
 64a:	65 8d       	ldd	r22, Z+29	; 0x1d
 64c:	41 e0       	ldi	r20, 0x01	; 1
 64e:	84 8d       	ldd	r24, Z+28	; 0x1c
 650:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 654:	f2 e0       	ldi	r31, 0x02	; 2
 656:	fa 95       	dec	r31
 658:	f1 f7       	brne	.-4      	; 0x656 <HLCD_enuLCD_WriteCharacter+0x12e>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <HLCD_enuLCD_WriteCharacter+0x134>
			_delay_us(1);
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Pin, MDIO_enuLOW);
 65c:	f8 01       	movw	r30, r16
 65e:	65 8d       	ldd	r22, Z+29	; 0x1d
 660:	40 e0       	ldi	r20, 0x00	; 0
 662:	84 8d       	ldd	r24, Z+28	; 0x1c
 664:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
 668:	f2 e0       	ldi	r31, 0x02	; 2
 66a:	fa 95       	dec	r31
 66c:	f1 f7       	brne	.-4      	; 0x66a <HLCD_enuLCD_WriteCharacter+0x142>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <HLCD_enuLCD_WriteCharacter+0x148>
			_delay_us(1);

			/* 3. Send the lower nibble (bits 3-0) */
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D4_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D4_Pin, (Copy_u8Data >> 0) & 0x01);
 670:	f8 01       	movw	r30, r16
 672:	61 89       	ldd	r22, Z+17	; 0x11
 674:	4f 2d       	mov	r20, r15
 676:	41 70       	andi	r20, 0x01	; 1
 678:	80 89       	ldd	r24, Z+16	; 0x10
 67a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D5_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D5_Pin, (Copy_u8Data >> 1) & 0x01);
 67e:	f8 01       	movw	r30, r16
 680:	63 89       	ldd	r22, Z+19	; 0x13
 682:	f1 fa       	bst	r15, 1
 684:	44 27       	eor	r20, r20
 686:	40 f9       	bld	r20, 0
 688:	82 89       	ldd	r24, Z+18	; 0x12
 68a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D6_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D6_Pin, (Copy_u8Data >> 2) & 0x01);
 68e:	f8 01       	movw	r30, r16
 690:	65 89       	ldd	r22, Z+21	; 0x15
 692:	f2 fa       	bst	r15, 2
 694:	44 27       	eor	r20, r20
 696:	40 f9       	bld	r20, 0
 698:	84 89       	ldd	r24, Z+20	; 0x14
 69a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
			MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].D7_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].D7_Pin, (Copy_u8Data >> 3) & 0x01);
 69e:	f8 01       	movw	r30, r16
 6a0:	67 89       	ldd	r22, Z+23	; 0x17
 6a2:	f3 fa       	bst	r15, 3
 6a4:	44 27       	eor	r20, r20
 6a6:	40 f9       	bld	r20, 0
 6a8:	86 89       	ldd	r24, Z+22	; 0x16
 6aa:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
		}
		/*4-enable */
		MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Pin, MDIO_enuHIGH);
 6ae:	2e e1       	ldi	r18, 0x1E	; 30
 6b0:	2c 9f       	mul	r18, r28
 6b2:	c0 01       	movw	r24, r0
 6b4:	2d 9f       	mul	r18, r29
 6b6:	90 0d       	add	r25, r0
 6b8:	11 24       	eor	r1, r1
 6ba:	ec 01       	movw	r28, r24
 6bc:	c0 5a       	subi	r28, 0xA0	; 160
 6be:	df 4f       	sbci	r29, 0xFF	; 255
 6c0:	6d 8d       	ldd	r22, Y+29	; 0x1d
 6c2:	41 e0       	ldi	r20, 0x01	; 1
 6c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
 6c6:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
 6ca:	f2 e0       	ldi	r31, 0x02	; 2
 6cc:	fa 95       	dec	r31
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <HLCD_enuLCD_WriteCharacter+0x1a4>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <HLCD_enuLCD_WriteCharacter+0x1aa>
		_delay_us(1);
		MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Pin, MDIO_enuLOW);
 6d2:	6d 8d       	ldd	r22, Y+29	; 0x1d
 6d4:	40 e0       	ldi	r20, 0x00	; 0
 6d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
 6d8:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MDIO_enuSetPinValue>
 6dc:	82 e0       	ldi	r24, 0x02	; 2
 6de:	8a 95       	dec	r24
 6e0:	f1 f7       	brne	.-4      	; 0x6de <HLCD_enuLCD_WriteCharacter+0x1b6>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <HLCD_enuLCD_WriteCharacter+0x1bc>
		Ret_enuError =HLCD_enuINVALIDLCDNAME ;
		
	}
	else
	{
		Ret_enuError = HLCD_enuOK;
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	01 c0       	rjmp	.+2      	; 0x6ea <HLCD_enuLCD_WriteCharacter+0x1c2>
HLCD_enuErrorStatus_t HLCD_enuLCD_WriteCharacter(u8 Copy_enuLCDNum, u8 Copy_u8Data)
{
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;
	if(IS_INVALID_LCD_NAME(Copy_enuLCDNum))
	{
		Ret_enuError =HLCD_enuINVALIDLCDNAME ;
 6e8:	82 e0       	ldi	r24, 0x02	; 2
		MDIO_enuSetPinValue(HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Port , HLCD_ArrLCDCongf[Copy_enuLCDNum].E_Pin, MDIO_enuLOW);
		_delay_us(1);
	}
	return Ret_enuError ;
	
}
 6ea:	df 91       	pop	r29
 6ec:	cf 91       	pop	r28
 6ee:	1f 91       	pop	r17
 6f0:	0f 91       	pop	r16
 6f2:	ff 90       	pop	r15
 6f4:	08 95       	ret

000006f6 <HLCD_enuLCD_GotoXY>:

HLCD_enuErrorStatus_t HLCD_enuLCD_GotoXY(u8 Copy_enuLCDNum,u8 Copy_u8X , u8 Copy_u8Y )
{
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;
	if(IS_INVALID_LCD_NAME(Copy_enuLCDNum))
 6f6:	83 30       	cpi	r24, 0x03	; 3
 6f8:	90 f4       	brcc	.+36     	; 0x71e <HLCD_enuLCD_GotoXY+0x28>
	{
		Ret_enuError =HLCD_enuINVALIDLCDNAME ;
		
	}
	else if(IS_INVALID_LCD_Y(Copy_u8Y))
 6fa:	40 31       	cpi	r20, 0x10	; 16
 6fc:	90 f4       	brcc	.+36     	; 0x722 <HLCD_enuLCD_GotoXY+0x2c>
	{
		Ret_enuError =HLCD_enuINVALIDLCDY;
		
	}
	else if(IS_INVALID_LCD_X(Copy_u8X))
 6fe:	62 30       	cpi	r22, 0x02	; 2
 700:	90 f4       	brcc	.+36     	; 0x726 <HLCD_enuLCD_GotoXY+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 702:	ef e9       	ldi	r30, 0x9F	; 159
 704:	ff e0       	ldi	r31, 0x0F	; 15
 706:	31 97       	sbiw	r30, 0x01	; 1
 708:	f1 f7       	brne	.-4      	; 0x706 <HLCD_enuLCD_GotoXY+0x10>
 70a:	00 c0       	rjmp	.+0      	; 0x70c <HLCD_enuLCD_GotoXY+0x16>
 70c:	00 00       	nop
	else
	{
		Ret_enuError = HLCD_enuOK;
		u8 location=0;
		_delay_ms(2);
		if(Copy_u8X == 0)
 70e:	61 11       	cpse	r22, r1
		{
			location=Copy_u8Y;
		}
		else
		{
			location=Copy_u8Y + 0x40; //the second row
 710:	40 5c       	subi	r20, 0xC0	; 192
		}
		HLCD_enuLCD_WriteCommand(Copy_enuLCDNum , 128+location); /*1xxxxxxx*/
 712:	60 e8       	ldi	r22, 0x80	; 128
 714:	64 0f       	add	r22, r20
 716:	0e 94 49 00 	call	0x92	; 0x92 <HLCD_enuLCD_WriteCommand>
	{
		Ret_enuError =HLCD_enuINVALIDLCDX;
	}
	else
	{
		Ret_enuError = HLCD_enuOK;
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	08 95       	ret
HLCD_enuErrorStatus_t HLCD_enuLCD_GotoXY(u8 Copy_enuLCDNum,u8 Copy_u8X , u8 Copy_u8Y )
{
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;
	if(IS_INVALID_LCD_NAME(Copy_enuLCDNum))
	{
		Ret_enuError =HLCD_enuINVALIDLCDNAME ;
 71e:	82 e0       	ldi	r24, 0x02	; 2
 720:	08 95       	ret
		
	}
	else if(IS_INVALID_LCD_Y(Copy_u8Y))
	{
		Ret_enuError =HLCD_enuINVALIDLCDY;
 722:	84 e0       	ldi	r24, 0x04	; 4
 724:	08 95       	ret
		
	}
	else if(IS_INVALID_LCD_X(Copy_u8X))
	{
		Ret_enuError =HLCD_enuINVALIDLCDX;
 726:	83 e0       	ldi	r24, 0x03	; 3
		HLCD_enuLCD_WriteCommand(Copy_enuLCDNum , 128+location); /*1xxxxxxx*/
		
	}
	return Ret_enuError ;
	
}
 728:	08 95       	ret

0000072a <HLCD_enuLCD_GotoXY_CGRAM>:

HLCD_enuErrorStatus_t HLCD_enuLCD_GotoXY_CGRAM(u8 Copy_enuLCDNum, u8 Copy_u8BlockNumber , u8 Copy_u8bit )
{
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;

	if (IS_INVALID_LCD_NAME(Copy_enuLCDNum))
 72a:	83 30       	cpi	r24, 0x03	; 3
 72c:	88 f4       	brcc	.+34     	; 0x750 <HLCD_enuLCD_GotoXY_CGRAM+0x26>
	{
		Ret_enuError = HLCD_enuINVALIDLCDNAME;
	}
	else if (IS_INVALID_LCD_BLOCK(Copy_u8BlockNumber))
 72e:	69 30       	cpi	r22, 0x09	; 9
 730:	88 f4       	brcc	.+34     	; 0x754 <HLCD_enuLCD_GotoXY_CGRAM+0x2a>
	{
		Ret_enuError = HLCD_enuINVALIDBLOCK;
	}
	else if(IS_INVALID_LCD_BLOCK_BIT(Copy_u8bit))
 732:	49 30       	cpi	r20, 0x09	; 9
 734:	88 f4       	brcc	.+34     	; 0x758 <HLCD_enuLCD_GotoXY_CGRAM+0x2e>
	{
		u8 location = 0;
		Ret_enuError = HLCD_enuOK;

		// Calculate CGRAM address
		location = Copy_u8BlockNumber * 8 + Copy_u8bit;
 736:	66 0f       	add	r22, r22
 738:	66 0f       	add	r22, r22
 73a:	66 0f       	add	r22, r22
 73c:	64 0f       	add	r22, r20

		// Write the CGRAM address command
		HLCD_enuLCD_WriteCommand(Copy_enuLCDNum, 64 + location); /* 01xxxxxx */
 73e:	60 5c       	subi	r22, 0xC0	; 192
 740:	0e 94 49 00 	call	0x92	; 0x92 <HLCD_enuLCD_WriteCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 744:	8a e6       	ldi	r24, 0x6A	; 106
 746:	8a 95       	dec	r24
 748:	f1 f7       	brne	.-4      	; 0x746 <HLCD_enuLCD_GotoXY_CGRAM+0x1c>
 74a:	00 c0       	rjmp	.+0      	; 0x74c <HLCD_enuLCD_GotoXY_CGRAM+0x22>
		Ret_enuError = HLCD_enuINVALIDBLOCK_BIT;
	}
	else
	{
		u8 location = 0;
		Ret_enuError = HLCD_enuOK;
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	08 95       	ret
{
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;

	if (IS_INVALID_LCD_NAME(Copy_enuLCDNum))
	{
		Ret_enuError = HLCD_enuINVALIDLCDNAME;
 750:	82 e0       	ldi	r24, 0x02	; 2
 752:	08 95       	ret
	}
	else if (IS_INVALID_LCD_BLOCK(Copy_u8BlockNumber))
	{
		Ret_enuError = HLCD_enuINVALIDBLOCK;
 754:	85 e0       	ldi	r24, 0x05	; 5
 756:	08 95       	ret
	}
	else if(IS_INVALID_LCD_BLOCK_BIT(Copy_u8bit))
	{
		Ret_enuError = HLCD_enuINVALIDBLOCK_BIT;
 758:	87 e0       	ldi	r24, 0x07	; 7
		// Add delay for the command to process
		_delay_us(40);
	}

	return Ret_enuError;
}
 75a:	08 95       	ret

0000075c <HLCD_enuLCD_StoreSpecialChar>:


HLCD_enuErrorStatus_t HLCD_enuLCD_StoreSpecialChar(u8 Copy_enuLCDNum, u8 Copy_u8BlockNumber, u8* pattern)
{
 75c:	ef 92       	push	r14
 75e:	ff 92       	push	r15
 760:	1f 93       	push	r17
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;

	if (IS_INVALID_LCD_NAME(Copy_enuLCDNum))
 766:	83 30       	cpi	r24, 0x03	; 3
 768:	d8 f4       	brcc	.+54     	; 0x7a0 <HLCD_enuLCD_StoreSpecialChar+0x44>
	{
		Ret_enuError = HLCD_enuINVALIDLCDNAME;
	}
	else if (IS_INVALID_LCD_BLOCK(Copy_u8BlockNumber))
 76a:	69 30       	cpi	r22, 0x09	; 9
 76c:	d8 f4       	brcc	.+54     	; 0x7a4 <HLCD_enuLCD_StoreSpecialChar+0x48>
	{
		Ret_enuError = HLCD_enuINVALIDBLOCK;
	}
	else if (IS_INVALID_LCD_PATTERN(pattern))
 76e:	41 15       	cp	r20, r1
 770:	51 05       	cpc	r21, r1
 772:	d1 f0       	breq	.+52     	; 0x7a8 <HLCD_enuLCD_StoreSpecialChar+0x4c>
 774:	7a 01       	movw	r14, r20
 776:	16 2f       	mov	r17, r22
 778:	c8 2f       	mov	r28, r24
 77a:	d0 e0       	ldi	r29, 0x00	; 0
 77c:	0d c0       	rjmp	.+26     	; 0x798 <HLCD_enuLCD_StoreSpecialChar+0x3c>

		// Write the pattern to CGRAM
		for (u8 i = 0; i < 8; i++)
		{
			// Move to CGRAM location
			HLCD_enuLCD_GotoXY_CGRAM(Copy_enuLCDNum, Copy_u8BlockNumber , i );
 77e:	4d 2f       	mov	r20, r29
 780:	61 2f       	mov	r22, r17
 782:	8c 2f       	mov	r24, r28
 784:	0e 94 95 03 	call	0x72a	; 0x72a <HLCD_enuLCD_GotoXY_CGRAM>
			HLCD_enuLCD_WriteCharacter(Copy_enuLCDNum, pattern[i]);
 788:	f7 01       	movw	r30, r14
 78a:	ed 0f       	add	r30, r29
 78c:	f1 1d       	adc	r31, r1
 78e:	60 81       	ld	r22, Z
 790:	8c 2f       	mov	r24, r28
 792:	0e 94 94 02 	call	0x528	; 0x528 <HLCD_enuLCD_WriteCharacter>
	{
		Ret_enuError = HLCD_enuOK;


		// Write the pattern to CGRAM
		for (u8 i = 0; i < 8; i++)
 796:	df 5f       	subi	r29, 0xFF	; 255
 798:	d8 30       	cpi	r29, 0x08	; 8
 79a:	88 f3       	brcs	.-30     	; 0x77e <HLCD_enuLCD_StoreSpecialChar+0x22>
	{
		Ret_enuError = HLCD_enuINVALIDPTR;
	}
	else
	{
		Ret_enuError = HLCD_enuOK;
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	05 c0       	rjmp	.+10     	; 0x7aa <HLCD_enuLCD_StoreSpecialChar+0x4e>
{
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;

	if (IS_INVALID_LCD_NAME(Copy_enuLCDNum))
	{
		Ret_enuError = HLCD_enuINVALIDLCDNAME;
 7a0:	82 e0       	ldi	r24, 0x02	; 2
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <HLCD_enuLCD_StoreSpecialChar+0x4e>
	}
	else if (IS_INVALID_LCD_BLOCK(Copy_u8BlockNumber))
	{
		Ret_enuError = HLCD_enuINVALIDBLOCK;
 7a4:	85 e0       	ldi	r24, 0x05	; 5
 7a6:	01 c0       	rjmp	.+2      	; 0x7aa <HLCD_enuLCD_StoreSpecialChar+0x4e>
	}
	else if (IS_INVALID_LCD_PATTERN(pattern))
	{
		Ret_enuError = HLCD_enuINVALIDPTR;
 7a8:	86 e0       	ldi	r24, 0x06	; 6
			HLCD_enuLCD_WriteCharacter(Copy_enuLCDNum, pattern[i]);
		}
	}

	return Ret_enuError;
}
 7aa:	df 91       	pop	r29
 7ac:	cf 91       	pop	r28
 7ae:	1f 91       	pop	r17
 7b0:	ff 90       	pop	r15
 7b2:	ef 90       	pop	r14
 7b4:	08 95       	ret

000007b6 <HLCD_enuLCD_WriteSpecialChar>:

HLCD_enuErrorStatus_t HLCD_enuLCD_WriteSpecialChar(u8 Copy_enuLCDNum , u8 Copy_u8BlockNumber , u8* pattern ,u8 Copy_u8X , u8 Copy_u8Y)
{
 7b6:	0f 93       	push	r16
 7b8:	1f 93       	push	r17
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;
	if(IS_INVALID_LCD_NAME(Copy_enuLCDNum))
 7be:	83 30       	cpi	r24, 0x03	; 3
 7c0:	c8 f4       	brcc	.+50     	; 0x7f4 <HLCD_enuLCD_WriteSpecialChar+0x3e>
	{
		Ret_enuError =HLCD_enuINVALIDLCDNAME;
		
	}
	else if(IS_INVALID_LCD_BLOCK(Copy_u8BlockNumber))
 7c2:	69 30       	cpi	r22, 0x09	; 9
 7c4:	c8 f4       	brcc	.+50     	; 0x7f8 <HLCD_enuLCD_WriteSpecialChar+0x42>
	{
		Ret_enuError =HLCD_enuINVALIDBLOCK;
	}
	else if(IS_INVALID_LCD_PATTERN(pattern))
 7c6:	41 15       	cp	r20, r1
 7c8:	51 05       	cpc	r21, r1
 7ca:	c1 f0       	breq	.+48     	; 0x7fc <HLCD_enuLCD_WriteSpecialChar+0x46>
	{
		Ret_enuError =HLCD_enuINVALIDPTR;
	}
	else if(IS_INVALID_LCD_Y(Copy_u8Y))
 7cc:	00 31       	cpi	r16, 0x10	; 16
 7ce:	c0 f4       	brcc	.+48     	; 0x800 <__DATA_REGION_LENGTH__>
	{
		Ret_enuError =HLCD_enuINVALIDLCDY;
		
	}
	else if(IS_INVALID_LCD_X(Copy_u8X))
 7d0:	22 30       	cpi	r18, 0x02	; 2
 7d2:	c0 f4       	brcc	.+48     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7d4:	12 2f       	mov	r17, r18
 7d6:	d6 2f       	mov	r29, r22
 7d8:	c8 2f       	mov	r28, r24
		Ret_enuError =HLCD_enuINVALIDLCDX;
	}
	else
	{
		Ret_enuError = HLCD_enuOK;
		HLCD_enuLCD_StoreSpecialChar(Copy_enuLCDNum ,Copy_u8BlockNumber , pattern );
 7da:	0e 94 ae 03 	call	0x75c	; 0x75c <HLCD_enuLCD_StoreSpecialChar>
		HLCD_enuLCD_GotoXY(Copy_enuLCDNum , Copy_u8X , Copy_u8Y);
 7de:	40 2f       	mov	r20, r16
 7e0:	61 2f       	mov	r22, r17
 7e2:	8c 2f       	mov	r24, r28
 7e4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <HLCD_enuLCD_GotoXY>
		HLCD_enuLCD_WriteCharacter(Copy_enuLCDNum , Copy_u8BlockNumber );
 7e8:	6d 2f       	mov	r22, r29
 7ea:	8c 2f       	mov	r24, r28
 7ec:	0e 94 94 02 	call	0x528	; 0x528 <HLCD_enuLCD_WriteCharacter>
	{
		Ret_enuError =HLCD_enuINVALIDLCDX;
	}
	else
	{
		Ret_enuError = HLCD_enuOK;
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	09 c0       	rjmp	.+18     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
HLCD_enuErrorStatus_t HLCD_enuLCD_WriteSpecialChar(u8 Copy_enuLCDNum , u8 Copy_u8BlockNumber , u8* pattern ,u8 Copy_u8X , u8 Copy_u8Y)
{
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;
	if(IS_INVALID_LCD_NAME(Copy_enuLCDNum))
	{
		Ret_enuError =HLCD_enuINVALIDLCDNAME;
 7f4:	82 e0       	ldi	r24, 0x02	; 2
 7f6:	07 c0       	rjmp	.+14     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
		
	}
	else if(IS_INVALID_LCD_BLOCK(Copy_u8BlockNumber))
	{
		Ret_enuError =HLCD_enuINVALIDBLOCK;
 7f8:	85 e0       	ldi	r24, 0x05	; 5
 7fa:	05 c0       	rjmp	.+10     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	}
	else if(IS_INVALID_LCD_PATTERN(pattern))
	{
		Ret_enuError =HLCD_enuINVALIDPTR;
 7fc:	86 e0       	ldi	r24, 0x06	; 6
 7fe:	03 c0       	rjmp	.+6      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	}
	else if(IS_INVALID_LCD_Y(Copy_u8Y))
	{
		Ret_enuError =HLCD_enuINVALIDLCDY;
 800:	84 e0       	ldi	r24, 0x04	; 4
 802:	01 c0       	rjmp	.+2      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
		
	}
	else if(IS_INVALID_LCD_X(Copy_u8X))
	{
		Ret_enuError =HLCD_enuINVALIDLCDX;
 804:	83 e0       	ldi	r24, 0x03	; 3
		HLCD_enuLCD_GotoXY(Copy_enuLCDNum , Copy_u8X , Copy_u8Y);
		HLCD_enuLCD_WriteCharacter(Copy_enuLCDNum , Copy_u8BlockNumber );
		
	}
	return Ret_enuError ;
}
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	1f 91       	pop	r17
 80c:	0f 91       	pop	r16
 80e:	08 95       	ret

00000810 <HLCD_enuLCD_WriteString>:
HLCD_enuErrorStatus_t HLCD_enuLCD_WriteString(u8 Copy_enuLCDNum , u8* string)
{
 810:	1f 93       	push	r17
 812:	cf 93       	push	r28
 814:	df 93       	push	r29
 816:	18 2f       	mov	r17, r24
 818:	eb 01       	movw	r28, r22
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;
	if(IS_INVALID_LCD_NAME(Copy_enuLCDNum))
 81a:	83 30       	cpi	r24, 0x03	; 3
 81c:	60 f4       	brcc	.+24     	; 0x836 <HLCD_enuLCD_WriteString+0x26>
	{
		Ret_enuError =HLCD_enuINVALIDLCDNAME;
		
	}
	else if(IS_INVALID_LCD_PATTERN(string))
 81e:	20 97       	sbiw	r28, 0x00	; 0
 820:	29 f4       	brne	.+10     	; 0x82c <HLCD_enuLCD_WriteString+0x1c>
 822:	0b c0       	rjmp	.+22     	; 0x83a <HLCD_enuLCD_WriteString+0x2a>
	else
	{
		Ret_enuError = HLCD_enuOK;
		while(*string != '\0' ) // \0 is the last element in the array
		{
			HLCD_enuLCD_WriteCharacter(Copy_enuLCDNum,*string);
 824:	81 2f       	mov	r24, r17
 826:	0e 94 94 02 	call	0x528	; 0x528 <HLCD_enuLCD_WriteCharacter>
			string++;
 82a:	21 96       	adiw	r28, 0x01	; 1
		Ret_enuError =HLCD_enuINVALIDPTR;
	}
	else
	{
		Ret_enuError = HLCD_enuOK;
		while(*string != '\0' ) // \0 is the last element in the array
 82c:	68 81       	ld	r22, Y
 82e:	61 11       	cpse	r22, r1
 830:	f9 cf       	rjmp	.-14     	; 0x824 <HLCD_enuLCD_WriteString+0x14>
	{
		Ret_enuError =HLCD_enuINVALIDPTR;
	}
	else
	{
		Ret_enuError = HLCD_enuOK;
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	03 c0       	rjmp	.+6      	; 0x83c <HLCD_enuLCD_WriteString+0x2c>
HLCD_enuErrorStatus_t HLCD_enuLCD_WriteString(u8 Copy_enuLCDNum , u8* string)
{
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;
	if(IS_INVALID_LCD_NAME(Copy_enuLCDNum))
	{
		Ret_enuError =HLCD_enuINVALIDLCDNAME;
 836:	82 e0       	ldi	r24, 0x02	; 2
 838:	01 c0       	rjmp	.+2      	; 0x83c <HLCD_enuLCD_WriteString+0x2c>
		
	}
	else if(IS_INVALID_LCD_PATTERN(string))
	{
		Ret_enuError =HLCD_enuINVALIDPTR;
 83a:	86 e0       	ldi	r24, 0x06	; 6
		}
	}
	return Ret_enuError ;


}
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	1f 91       	pop	r17
 842:	08 95       	ret

00000844 <HLCD_enuLCD_WriteNumber>:


HLCD_enuErrorStatus_t HLCD_enuLCD_WriteNumber(u8 Copy_enuLCDNum ,u32 Copy_U32Number)
{
 844:	0f 93       	push	r16
 846:	1f 93       	push	r17
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	cd b7       	in	r28, 0x3d	; 61
 84e:	de b7       	in	r29, 0x3e	; 62
 850:	2a 97       	sbiw	r28, 0x0a	; 10
 852:	0f b6       	in	r0, 0x3f	; 63
 854:	f8 94       	cli
 856:	de bf       	out	0x3e, r29	; 62
 858:	0f be       	out	0x3f, r0	; 63
 85a:	cd bf       	out	0x3d, r28	; 61
 85c:	08 2f       	mov	r16, r24
 85e:	cb 01       	movw	r24, r22
 860:	ba 01       	movw	r22, r20
	
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;
	if(IS_INVALID_LCD_NAME(Copy_enuLCDNum))
 862:	03 30       	cpi	r16, 0x03	; 3
 864:	c8 f5       	brcc	.+114    	; 0x8d8 <__stack+0x79>
	}
	else
	{
		Ret_enuError = HLCD_enuOK;
		// Handle special case for 0
		if (Copy_U32Number == 0)
 866:	61 15       	cp	r22, r1
 868:	71 05       	cpc	r23, r1
 86a:	81 05       	cpc	r24, r1
 86c:	91 05       	cpc	r25, r1
 86e:	c9 f4       	brne	.+50     	; 0x8a2 <__stack+0x43>
		{
			HLCD_enuLCD_WriteCharacter(Copy_enuLCDNum,'0');
 870:	60 e3       	ldi	r22, 0x30	; 48
 872:	80 2f       	mov	r24, r16
 874:	0e 94 94 02 	call	0x528	; 0x528 <HLCD_enuLCD_WriteCharacter>
		Ret_enuError =HLCD_enuINVALIDLCDNAME;
		
	}
	else
	{
		Ret_enuError = HLCD_enuOK;
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	2f c0       	rjmp	.+94     	; 0x8da <__stack+0x7b>
			u8 digits[10];  // Array to hold the digits (u32 has at most 10 digits)
			u8 count = 0;   // Counter for the number of digits
			// Extract digits and store them in the array
			while (Copy_U32Number != 0)
			{
				digits[count++] = Copy_U32Number % 10;  // Store the last digit
 87c:	2a e0       	ldi	r18, 0x0A	; 10
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	40 e0       	ldi	r20, 0x00	; 0
 882:	50 e0       	ldi	r21, 0x00	; 0
 884:	0e 94 96 05 	call	0xb2c	; 0xb2c <__udivmodsi4>
 888:	e1 e0       	ldi	r30, 0x01	; 1
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	ec 0f       	add	r30, r28
 88e:	fd 1f       	adc	r31, r29
 890:	e1 0f       	add	r30, r17
 892:	f1 1d       	adc	r31, r1
 894:	60 83       	st	Z, r22
				Copy_U32Number /= 10;                   // Remove the last digit
 896:	62 2f       	mov	r22, r18
 898:	73 2f       	mov	r23, r19
 89a:	84 2f       	mov	r24, r20
 89c:	95 2f       	mov	r25, r21
			u8 digits[10];  // Array to hold the digits (u32 has at most 10 digits)
			u8 count = 0;   // Counter for the number of digits
			// Extract digits and store them in the array
			while (Copy_U32Number != 0)
			{
				digits[count++] = Copy_U32Number % 10;  // Store the last digit
 89e:	1f 5f       	subi	r17, 0xFF	; 255
 8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <__stack+0x45>
 8a2:	10 e0       	ldi	r17, 0x00	; 0
		else
		{
			u8 digits[10];  // Array to hold the digits (u32 has at most 10 digits)
			u8 count = 0;   // Counter for the number of digits
			// Extract digits and store them in the array
			while (Copy_U32Number != 0)
 8a4:	61 15       	cp	r22, r1
 8a6:	71 05       	cpc	r23, r1
 8a8:	81 05       	cpc	r24, r1
 8aa:	91 05       	cpc	r25, r1
 8ac:	39 f7       	brne	.-50     	; 0x87c <__stack+0x1d>
			{
				digits[count++] = Copy_U32Number % 10;  // Store the last digit
				Copy_U32Number /= 10;                   // Remove the last digit
			}
			if(count > 10)
 8ae:	1b 30       	cpi	r17, 0x0B	; 11
 8b0:	88 f4       	brcc	.+34     	; 0x8d4 <__stack+0x75>
 8b2:	0c c0       	rjmp	.+24     	; 0x8cc <__stack+0x6d>
			else
			{
				// Print the digits in reverse order (from the array)
				while (count > 0)
				{
					HLCD_enuLCD_WriteCharacter(Copy_enuLCDNum , digits[--count] + '0');  // Convert digit to ASCII and print
 8b4:	11 50       	subi	r17, 0x01	; 1
 8b6:	e1 e0       	ldi	r30, 0x01	; 1
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	ec 0f       	add	r30, r28
 8bc:	fd 1f       	adc	r31, r29
 8be:	e1 0f       	add	r30, r17
 8c0:	f1 1d       	adc	r31, r1
 8c2:	60 81       	ld	r22, Z
 8c4:	60 5d       	subi	r22, 0xD0	; 208
 8c6:	80 2f       	mov	r24, r16
 8c8:	0e 94 94 02 	call	0x528	; 0x528 <HLCD_enuLCD_WriteCharacter>
				
			}
			else
			{
				// Print the digits in reverse order (from the array)
				while (count > 0)
 8cc:	11 11       	cpse	r17, r1
 8ce:	f2 cf       	rjmp	.-28     	; 0x8b4 <__stack+0x55>
		Ret_enuError =HLCD_enuINVALIDLCDNAME;
		
	}
	else
	{
		Ret_enuError = HLCD_enuOK;
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	03 c0       	rjmp	.+6      	; 0x8da <__stack+0x7b>
				digits[count++] = Copy_U32Number % 10;  // Store the last digit
				Copy_U32Number /= 10;                   // Remove the last digit
			}
			if(count > 10)
			{
				Ret_enuError =HLCD_enuINVALIDNUMBER;
 8d4:	88 e0       	ldi	r24, 0x08	; 8
 8d6:	01 c0       	rjmp	.+2      	; 0x8da <__stack+0x7b>
{
	
	HLCD_enuErrorStatus_t Ret_enuError = HLCD_enuNOK;
	if(IS_INVALID_LCD_NAME(Copy_enuLCDNum))
	{
		Ret_enuError =HLCD_enuINVALIDLCDNAME;
 8d8:	82 e0       	ldi	r24, 0x02	; 2
		}

	}
	return Ret_enuError ;
	
 8da:	2a 96       	adiw	r28, 0x0a	; 10
 8dc:	0f b6       	in	r0, 0x3f	; 63
 8de:	f8 94       	cli
 8e0:	de bf       	out	0x3e, r29	; 62
 8e2:	0f be       	out	0x3f, r0	; 63
 8e4:	cd bf       	out	0x3d, r28	; 61
 8e6:	df 91       	pop	r29
 8e8:	cf 91       	pop	r28
 8ea:	1f 91       	pop	r17
 8ec:	0f 91       	pop	r16
 8ee:	08 95       	ret

000008f0 <main>:
#define F_CPU 8000000UL
#include <util/delay.h>


int main(void)
{
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	cd b7       	in	r28, 0x3d	; 61
 8f6:	de b7       	in	r29, 0x3e	; 62
 8f8:	28 97       	sbiw	r28, 0x08	; 8
 8fa:	0f b6       	in	r0, 0x3f	; 63
 8fc:	f8 94       	cli
 8fe:	de bf       	out	0x3e, r29	; 62
 900:	0f be       	out	0x3f, r0	; 63
 902:	cd bf       	out	0x3d, r28	; 61
    HLCD_vLCD_init();
 904:	0e 94 34 01 	call	0x268	; 0x268 <HLCD_vLCD_init>
	u8 customChar[] = {
 908:	88 e0       	ldi	r24, 0x08	; 8
 90a:	ec e9       	ldi	r30, 0x9C	; 156
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	de 01       	movw	r26, r28
 910:	11 96       	adiw	r26, 0x01	; 1
 912:	01 90       	ld	r0, Z+
 914:	0d 92       	st	X+, r0
 916:	8a 95       	dec	r24
 918:	e1 f7       	brne	.-8      	; 0x912 <main+0x22>
		0x0E,
		0x00
	};
    while (1) 
    {
		HLCD_enuLCD_WriteCharacter(LCD1 , 'Y');
 91a:	69 e5       	ldi	r22, 0x59	; 89
 91c:	80 e0       	ldi	r24, 0x00	; 0
 91e:	0e 94 94 02 	call	0x528	; 0x528 <HLCD_enuLCD_WriteCharacter>
		HLCD_enuLCD_WriteCharacter(LCD2 , 'Y');
 922:	69 e5       	ldi	r22, 0x59	; 89
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	0e 94 94 02 	call	0x528	; 0x528 <HLCD_enuLCD_WriteCharacter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 92a:	2f ef       	ldi	r18, 0xFF	; 255
 92c:	89 e6       	ldi	r24, 0x69	; 105
 92e:	98 e1       	ldi	r25, 0x18	; 24
 930:	21 50       	subi	r18, 0x01	; 1
 932:	80 40       	sbci	r24, 0x00	; 0
 934:	90 40       	sbci	r25, 0x00	; 0
 936:	e1 f7       	brne	.-8      	; 0x930 <main+0x40>
 938:	00 c0       	rjmp	.+0      	; 0x93a <main+0x4a>
 93a:	00 00       	nop
		_delay_ms(1000);
		HLCD_enuLCD_WriteNumber(LCD1 ,666);
 93c:	4a e9       	ldi	r20, 0x9A	; 154
 93e:	52 e0       	ldi	r21, 0x02	; 2
 940:	60 e0       	ldi	r22, 0x00	; 0
 942:	70 e0       	ldi	r23, 0x00	; 0
 944:	80 e0       	ldi	r24, 0x00	; 0
 946:	0e 94 22 04 	call	0x844	; 0x844 <HLCD_enuLCD_WriteNumber>
		HLCD_enuLCD_WriteNumber(LCD2 ,666);
 94a:	4a e9       	ldi	r20, 0x9A	; 154
 94c:	52 e0       	ldi	r21, 0x02	; 2
 94e:	60 e0       	ldi	r22, 0x00	; 0
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	0e 94 22 04 	call	0x844	; 0x844 <HLCD_enuLCD_WriteNumber>
 958:	2f ef       	ldi	r18, 0xFF	; 255
 95a:	89 e6       	ldi	r24, 0x69	; 105
 95c:	98 e1       	ldi	r25, 0x18	; 24
 95e:	21 50       	subi	r18, 0x01	; 1
 960:	80 40       	sbci	r24, 0x00	; 0
 962:	90 40       	sbci	r25, 0x00	; 0
 964:	e1 f7       	brne	.-8      	; 0x95e <main+0x6e>
 966:	00 c0       	rjmp	.+0      	; 0x968 <main+0x78>
 968:	00 00       	nop
		_delay_ms(1000);
		HLCD_enuLCD_WriteString(LCD1 , "you");
 96a:	64 ea       	ldi	r22, 0xA4	; 164
 96c:	70 e0       	ldi	r23, 0x00	; 0
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	0e 94 08 04 	call	0x810	; 0x810 <HLCD_enuLCD_WriteString>
		HLCD_enuLCD_WriteString(LCD2 , "you");
 974:	64 ea       	ldi	r22, 0xA4	; 164
 976:	70 e0       	ldi	r23, 0x00	; 0
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	0e 94 08 04 	call	0x810	; 0x810 <HLCD_enuLCD_WriteString>
 97e:	2f ef       	ldi	r18, 0xFF	; 255
 980:	89 e6       	ldi	r24, 0x69	; 105
 982:	98 e1       	ldi	r25, 0x18	; 24
 984:	21 50       	subi	r18, 0x01	; 1
 986:	80 40       	sbci	r24, 0x00	; 0
 988:	90 40       	sbci	r25, 0x00	; 0
 98a:	e1 f7       	brne	.-8      	; 0x984 <main+0x94>
 98c:	00 c0       	rjmp	.+0      	; 0x98e <main+0x9e>
 98e:	00 00       	nop
		_delay_ms(1000);
		HLCD_enuLCD_WriteCharacter(LCD1 , 'Y');
 990:	69 e5       	ldi	r22, 0x59	; 89
 992:	80 e0       	ldi	r24, 0x00	; 0
 994:	0e 94 94 02 	call	0x528	; 0x528 <HLCD_enuLCD_WriteCharacter>
		HLCD_enuLCD_WriteCharacter(LCD2 , 'Y');
 998:	69 e5       	ldi	r22, 0x59	; 89
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	0e 94 94 02 	call	0x528	; 0x528 <HLCD_enuLCD_WriteCharacter>
 9a0:	2f ef       	ldi	r18, 0xFF	; 255
 9a2:	89 e6       	ldi	r24, 0x69	; 105
 9a4:	98 e1       	ldi	r25, 0x18	; 24
 9a6:	21 50       	subi	r18, 0x01	; 1
 9a8:	80 40       	sbci	r24, 0x00	; 0
 9aa:	90 40       	sbci	r25, 0x00	; 0
 9ac:	e1 f7       	brne	.-8      	; 0x9a6 <main+0xb6>
 9ae:	00 c0       	rjmp	.+0      	; 0x9b0 <main+0xc0>
 9b0:	00 00       	nop
		_delay_ms(1000);
		HLCD_enuLCD_WriteCharacter(LCD1 , 'A');
 9b2:	61 e4       	ldi	r22, 0x41	; 65
 9b4:	80 e0       	ldi	r24, 0x00	; 0
 9b6:	0e 94 94 02 	call	0x528	; 0x528 <HLCD_enuLCD_WriteCharacter>
		HLCD_enuLCD_WriteCharacter(LCD2 , 'A');
 9ba:	61 e4       	ldi	r22, 0x41	; 65
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	0e 94 94 02 	call	0x528	; 0x528 <HLCD_enuLCD_WriteCharacter>
 9c2:	2f ef       	ldi	r18, 0xFF	; 255
 9c4:	89 e6       	ldi	r24, 0x69	; 105
 9c6:	98 e1       	ldi	r25, 0x18	; 24
 9c8:	21 50       	subi	r18, 0x01	; 1
 9ca:	80 40       	sbci	r24, 0x00	; 0
 9cc:	90 40       	sbci	r25, 0x00	; 0
 9ce:	e1 f7       	brne	.-8      	; 0x9c8 <main+0xd8>
 9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <main+0xe2>
 9d2:	00 00       	nop
		_delay_ms(1000);
		
		HLCD_enuLCD_WriteSpecialChar(LCD1 , 0 , customChar , 1 , 2);
 9d4:	02 e0       	ldi	r16, 0x02	; 2
 9d6:	21 e0       	ldi	r18, 0x01	; 1
 9d8:	ae 01       	movw	r20, r28
 9da:	4f 5f       	subi	r20, 0xFF	; 255
 9dc:	5f 4f       	sbci	r21, 0xFF	; 255
 9de:	60 e0       	ldi	r22, 0x00	; 0
 9e0:	80 e0       	ldi	r24, 0x00	; 0
 9e2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <HLCD_enuLCD_WriteSpecialChar>
		HLCD_enuLCD_WriteSpecialChar(LCD2 , 0 , customChar , 1 , 2);
 9e6:	21 e0       	ldi	r18, 0x01	; 1
 9e8:	ae 01       	movw	r20, r28
 9ea:	4f 5f       	subi	r20, 0xFF	; 255
 9ec:	5f 4f       	sbci	r21, 0xFF	; 255
 9ee:	60 e0       	ldi	r22, 0x00	; 0
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <HLCD_enuLCD_WriteSpecialChar>
 9f6:	2f ef       	ldi	r18, 0xFF	; 255
 9f8:	89 e6       	ldi	r24, 0x69	; 105
 9fa:	98 e1       	ldi	r25, 0x18	; 24
 9fc:	21 50       	subi	r18, 0x01	; 1
 9fe:	80 40       	sbci	r24, 0x00	; 0
 a00:	90 40       	sbci	r25, 0x00	; 0
 a02:	e1 f7       	brne	.-8      	; 0x9fc <main+0x10c>
 a04:	00 c0       	rjmp	.+0      	; 0xa06 <main+0x116>
 a06:	00 00       	nop
		_delay_ms(1000);
		HLCD_vLCD_ClearDisplay(LCD1);
 a08:	80 e0       	ldi	r24, 0x00	; 0
 a0a:	0e 94 30 01 	call	0x260	; 0x260 <HLCD_vLCD_ClearDisplay>
		HLCD_vLCD_ClearDisplay(LCD2);
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	0e 94 30 01 	call	0x260	; 0x260 <HLCD_vLCD_ClearDisplay>
 a14:	2f ef       	ldi	r18, 0xFF	; 255
 a16:	89 e6       	ldi	r24, 0x69	; 105
 a18:	98 e1       	ldi	r25, 0x18	; 24
 a1a:	21 50       	subi	r18, 0x01	; 1
 a1c:	80 40       	sbci	r24, 0x00	; 0
 a1e:	90 40       	sbci	r25, 0x00	; 0
 a20:	e1 f7       	brne	.-8      	; 0xa1a <main+0x12a>
 a22:	00 c0       	rjmp	.+0      	; 0xa24 <main+0x134>
 a24:	00 00       	nop
		_delay_ms(1000);
		HLCD_enuLCD_GotoXY(LCD1 , 0 , 3);
 a26:	43 e0       	ldi	r20, 0x03	; 3
 a28:	60 e0       	ldi	r22, 0x00	; 0
 a2a:	80 e0       	ldi	r24, 0x00	; 0
 a2c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <HLCD_enuLCD_GotoXY>
		HLCD_enuLCD_GotoXY(LCD2 , 0 , 3);
 a30:	43 e0       	ldi	r20, 0x03	; 3
 a32:	60 e0       	ldi	r22, 0x00	; 0
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <HLCD_enuLCD_GotoXY>
 a3a:	6f cf       	rjmp	.-290    	; 0x91a <main+0x2a>

00000a3c <MDIO_enuSetPinValue>:
{
	
	MDIO_enuErrorStatus_t Ret_enuError = MDIO_enuNOK;
	
	 // Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
 a3c:	85 30       	cpi	r24, 0x05	; 5
 a3e:	60 f5       	brcc	.+88     	; 0xa98 <MDIO_enuSetPinValue+0x5c>
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
 a40:	69 30       	cpi	r22, 0x09	; 9
 a42:	60 f5       	brcc	.+88     	; 0xa9c <MDIO_enuSetPinValue+0x60>
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PIN_STATE(Copy_enuState))
 a44:	42 30       	cpi	r20, 0x02	; 2
 a46:	60 f5       	brcc	.+88     	; 0xaa0 <MDIO_enuSetPinValue+0x64>
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
		// Get the address of the port registers
		MDIO_strPortRegElement_t* Local_strPtrCurrPort =(((MDIO_PORT_REG_BASE_ADD) - (((u8)Copy_enuPortNum) * 3)));
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	fc 01       	movw	r30, r24
 a4c:	ee 0f       	add	r30, r30
 a4e:	ff 1f       	adc	r31, r31
 a50:	8e 0f       	add	r24, r30
 a52:	9f 1f       	adc	r25, r31
 a54:	ee 27       	eor	r30, r30
 a56:	ff 27       	eor	r31, r31
 a58:	e8 1b       	sub	r30, r24
 a5a:	f9 0b       	sbc	r31, r25
 a5c:	f9 96       	adiw	r30, 0x39	; 57
		// Set the pin value (HIGH or LOW)
		if(Copy_enuState == MDIO_enuLOW) // Set pin to LOW
 a5e:	41 11       	cpse	r20, r1
 a60:	0d c0       	rjmp	.+26     	; 0xa7c <MDIO_enuSetPinValue+0x40>
		{
				CLR_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
 a62:	22 81       	ldd	r18, Z+2	; 0x02
 a64:	81 e0       	ldi	r24, 0x01	; 1
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <MDIO_enuSetPinValue+0x32>
 a6a:	88 0f       	add	r24, r24
 a6c:	99 1f       	adc	r25, r25
 a6e:	6a 95       	dec	r22
 a70:	e2 f7       	brpl	.-8      	; 0xa6a <MDIO_enuSetPinValue+0x2e>
 a72:	80 95       	com	r24
 a74:	82 23       	and	r24, r18
 a76:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 a78:	80 e0       	ldi	r24, 0x00	; 0
 a7a:	08 95       	ret
		// Set the pin value (HIGH or LOW)
		if(Copy_enuState == MDIO_enuLOW) // Set pin to LOW
		{
				CLR_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
		}
		else if(Copy_enuState == MDIO_enuHIGH)// Set pin to HIGH
 a7c:	41 30       	cpi	r20, 0x01	; 1
 a7e:	91 f4       	brne	.+36     	; 0xaa4 <MDIO_enuSetPinValue+0x68>
		{
				
				SET_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
 a80:	22 81       	ldd	r18, Z+2	; 0x02
 a82:	81 e0       	ldi	r24, 0x01	; 1
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <MDIO_enuSetPinValue+0x50>
 a88:	88 0f       	add	r24, r24
 a8a:	99 1f       	adc	r25, r25
 a8c:	6a 95       	dec	r22
 a8e:	e2 f7       	brpl	.-8      	; 0xa88 <MDIO_enuSetPinValue+0x4c>
 a90:	82 2b       	or	r24, r18
 a92:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 a94:	80 e0       	ldi	r24, 0x00	; 0
 a96:	08 95       	ret
	MDIO_enuErrorStatus_t Ret_enuError = MDIO_enuNOK;
	
	 // Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
 a98:	82 e0       	ldi	r24, 0x02	; 2
 a9a:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
 a9c:	83 e0       	ldi	r24, 0x03	; 3
 a9e:	08 95       	ret
	}
	else if (IS_INVALID_PIN_STATE(Copy_enuState))
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
 aa0:	84 e0       	ldi	r24, 0x04	; 4
 aa2:	08 95       	ret
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 aa4:	80 e0       	ldi	r24, 0x00	; 0
		}

	}
	return Ret_enuError;
	
}
 aa6:	08 95       	ret

00000aa8 <MPORT_enuSetPinDirection>:
// Function: MPORT_enuSetPinDirection
// Sets the direction of any pin after the initialization.
MPORT_enuErrorStatus_t MPORT_enuSetPinDirection( MPORT_enuPinNums_t Copy_enuPinNum  ,  MPORT_enuPinDirection_t  Copy_enuPinDirection  )
{
	MPORT_enuErrorStatus_t Ret_enuError= MPORT_enuOK;
	u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
 aa8:	28 2f       	mov	r18, r24
 aaa:	22 95       	swap	r18
 aac:	2f 70       	andi	r18, 0x0F	; 15
	u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
 aae:	8f 70       	andi	r24, 0x0F	; 15
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
 ab0:	24 30       	cpi	r18, 0x04	; 4
 ab2:	a0 f5       	brcc	.+104    	; 0xb1c <MPORT_enuSetPinDirection+0x74>
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
 ab4:	88 30       	cpi	r24, 0x08	; 8
 ab6:	a0 f5       	brcc	.+104    	; 0xb20 <MPORT_enuSetPinDirection+0x78>
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PIN_Direction(Copy_enuPinDirection))
 ab8:	62 30       	cpi	r22, 0x02	; 2
 aba:	a0 f5       	brcc	.+104    	; 0xb24 <MPORT_enuSetPinDirection+0x7c>
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
		// Get the address of the port registers
		MPORT_strPortRegElement_t* Local_strPtrCurrPort =(((MPORT_PORT_REG_BASE_ADD) - (((u8)LOC_u8portNumber) * 3)));
 abc:	30 e0       	ldi	r19, 0x00	; 0
 abe:	f9 01       	movw	r30, r18
 ac0:	ee 0f       	add	r30, r30
 ac2:	ff 1f       	adc	r31, r31
 ac4:	2e 0f       	add	r18, r30
 ac6:	3f 1f       	adc	r19, r31
 ac8:	ee 27       	eor	r30, r30
 aca:	ff 27       	eor	r31, r31
 acc:	e2 1b       	sub	r30, r18
 ace:	f3 0b       	sbc	r31, r19
 ad0:	f9 96       	adiw	r30, 0x39	; 57
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuPinDirection == MPORT_enuPINOUTPUT)// Output 
 ad2:	61 11       	cpse	r22, r1
 ad4:	0e c0       	rjmp	.+28     	; 0xaf2 <MPORT_enuSetPinDirection+0x4a>
		{
			SET_BIT(Local_strPtrCurrPort->DDR,LOC_u8pinNumber);
 ad6:	41 81       	ldd	r20, Z+1	; 0x01
 ad8:	21 e0       	ldi	r18, 0x01	; 1
 ada:	30 e0       	ldi	r19, 0x00	; 0
 adc:	b9 01       	movw	r22, r18
 ade:	02 c0       	rjmp	.+4      	; 0xae4 <MPORT_enuSetPinDirection+0x3c>
 ae0:	66 0f       	add	r22, r22
 ae2:	77 1f       	adc	r23, r23
 ae4:	8a 95       	dec	r24
 ae6:	e2 f7       	brpl	.-8      	; 0xae0 <MPORT_enuSetPinDirection+0x38>
 ae8:	cb 01       	movw	r24, r22
 aea:	84 2b       	or	r24, r20
 aec:	81 83       	std	Z+1, r24	; 0x01
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 aee:	80 e0       	ldi	r24, 0x00	; 0
 af0:	08 95       	ret
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuPinDirection == MPORT_enuPINOUTPUT)// Output 
		{
			SET_BIT(Local_strPtrCurrPort->DDR,LOC_u8pinNumber);
		}
		else if(Copy_enuPinDirection == MPORT_enuPININPUT) // Input 
 af2:	61 30       	cpi	r22, 0x01	; 1
 af4:	c9 f4       	brne	.+50     	; 0xb28 <MPORT_enuSetPinDirection+0x80>
		{
			CLR_BIT(Local_strPtrCurrPort->DDR ,LOC_u8pinNumber );
 af6:	41 81       	ldd	r20, Z+1	; 0x01
 af8:	21 e0       	ldi	r18, 0x01	; 1
 afa:	30 e0       	ldi	r19, 0x00	; 0
 afc:	b9 01       	movw	r22, r18
 afe:	02 c0       	rjmp	.+4      	; 0xb04 <MPORT_enuSetPinDirection+0x5c>
 b00:	66 0f       	add	r22, r22
 b02:	77 1f       	adc	r23, r23
 b04:	8a 95       	dec	r24
 b06:	e2 f7       	brpl	.-8      	; 0xb00 <MPORT_enuSetPinDirection+0x58>
 b08:	cb 01       	movw	r24, r22
 b0a:	80 95       	com	r24
 b0c:	94 2f       	mov	r25, r20
 b0e:	98 23       	and	r25, r24
 b10:	91 83       	std	Z+1, r25	; 0x01
			CLR_BIT(Local_strPtrCurrPort->PORT,LOC_u8pinNumber);
 b12:	92 81       	ldd	r25, Z+2	; 0x02
 b14:	89 23       	and	r24, r25
 b16:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 b18:	80 e0       	ldi	r24, 0x00	; 0
 b1a:	08 95       	ret
	u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
	u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
 b1c:	82 e0       	ldi	r24, 0x02	; 2
 b1e:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
 b20:	83 e0       	ldi	r24, 0x03	; 3
 b22:	08 95       	ret
	}
	else if (IS_INVALID_PIN_Direction(Copy_enuPinDirection))
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
 b24:	84 e0       	ldi	r24, 0x04	; 4
 b26:	08 95       	ret
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 b28:	80 e0       	ldi	r24, 0x00	; 0
	
	}
	return Ret_enuError;
		
		
}
 b2a:	08 95       	ret

00000b2c <__udivmodsi4>:
 b2c:	a1 e2       	ldi	r26, 0x21	; 33
 b2e:	1a 2e       	mov	r1, r26
 b30:	aa 1b       	sub	r26, r26
 b32:	bb 1b       	sub	r27, r27
 b34:	fd 01       	movw	r30, r26
 b36:	0d c0       	rjmp	.+26     	; 0xb52 <__udivmodsi4_ep>

00000b38 <__udivmodsi4_loop>:
 b38:	aa 1f       	adc	r26, r26
 b3a:	bb 1f       	adc	r27, r27
 b3c:	ee 1f       	adc	r30, r30
 b3e:	ff 1f       	adc	r31, r31
 b40:	a2 17       	cp	r26, r18
 b42:	b3 07       	cpc	r27, r19
 b44:	e4 07       	cpc	r30, r20
 b46:	f5 07       	cpc	r31, r21
 b48:	20 f0       	brcs	.+8      	; 0xb52 <__udivmodsi4_ep>
 b4a:	a2 1b       	sub	r26, r18
 b4c:	b3 0b       	sbc	r27, r19
 b4e:	e4 0b       	sbc	r30, r20
 b50:	f5 0b       	sbc	r31, r21

00000b52 <__udivmodsi4_ep>:
 b52:	66 1f       	adc	r22, r22
 b54:	77 1f       	adc	r23, r23
 b56:	88 1f       	adc	r24, r24
 b58:	99 1f       	adc	r25, r25
 b5a:	1a 94       	dec	r1
 b5c:	69 f7       	brne	.-38     	; 0xb38 <__udivmodsi4_loop>
 b5e:	60 95       	com	r22
 b60:	70 95       	com	r23
 b62:	80 95       	com	r24
 b64:	90 95       	com	r25
 b66:	9b 01       	movw	r18, r22
 b68:	ac 01       	movw	r20, r24
 b6a:	bd 01       	movw	r22, r26
 b6c:	cf 01       	movw	r24, r30
 b6e:	08 95       	ret

00000b70 <_exit>:
 b70:	f8 94       	cli

00000b72 <__stop_program>:
 b72:	ff cf       	rjmp	.-2      	; 0xb72 <__stop_program>
