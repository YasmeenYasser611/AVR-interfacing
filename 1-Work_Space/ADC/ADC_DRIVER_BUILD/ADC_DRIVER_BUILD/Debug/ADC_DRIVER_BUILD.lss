
ADC_DRIVER_BUILD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000004d4  00000568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080008a  0080008a  00000592  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000592  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001712  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b13  00000000  00000000  00001e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008db  00000000  00000000  00002985  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00003260  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f1f  00000000  00000000  00003470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a74  00000000  00000000  0000438f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004e03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <main>
  8a:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:
	//CLEAR FLAG
	SET_BIT(ADCSRA_Register , ADIF);
	
	//return digital value 
	return ADC_Register;
}
  92:	87 b1       	in	r24, 0x07	; 7
  94:	8f 73       	andi	r24, 0x3F	; 63
  96:	87 b9       	out	0x07, r24	; 7
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	87 b9       	out	0x07, r24	; 7
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8f 7d       	andi	r24, 0xDF	; 223
  a2:	87 b9       	out	0x07, r24	; 7
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	88 7f       	andi	r24, 0xF8	; 248
  a8:	86 b9       	out	0x06, r24	; 6
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	86 b9       	out	0x06, r24	; 6
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	86 b9       	out	0x06, r24	; 6
  b6:	08 95       	ret

000000b8 <ADC_u16ADCStartConversion>:
  b8:	97 b1       	in	r25, 0x07	; 7
  ba:	90 7e       	andi	r25, 0xE0	; 224
  bc:	97 b9       	out	0x07, r25	; 7
  be:	97 b1       	in	r25, 0x07	; 7
  c0:	89 2b       	or	r24, r25
  c2:	87 b9       	out	0x07, r24	; 7
  c4:	86 b1       	in	r24, 0x06	; 6
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	86 b9       	out	0x06, r24	; 6
  ca:	08 95       	ret

000000cc <ADC_voidInterruptEnable>:

void ADC_voidInterruptEnable(void)
{
	SET_BIT(ADCSRA_Register , ADIE);
  cc:	86 b1       	in	r24, 0x06	; 6
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	86 b9       	out	0x06, r24	; 6
  d2:	08 95       	ret

000000d4 <ADC_voidCallBack>:
}

void ADC_voidCallBack(void(*ptr)(void))
{
	GLOBAL_PTR= ptr;
  d4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__data_end+0x1>
  d8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__data_end>
  dc:	08 95       	ret

000000de <ADC_u16Read_Interrupt>:
	
}

u16 ADC_u16Read_Interrupt()
{
	return ADC_Register;
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	95 b1       	in	r25, 0x05	; 5
	
}
  e2:	08 95       	ret

000000e4 <__vector_16>:

void __vector_16(void) __attribute__((signal)); //adc 17 so we do it 16
void __vector_16(void)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	if (GLOBAL_PTR != NULL)
 106:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <__data_end>
 10a:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <__data_end+0x1>
 10e:	30 97       	sbiw	r30, 0x00	; 0
 110:	09 f0       	breq	.+2      	; 0x114 <__vector_16+0x30>
	{
		GLOBAL_PTR();
 112:	09 95       	icall
	}
}
 114:	ff 91       	pop	r31
 116:	ef 91       	pop	r30
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	7f 91       	pop	r23
 122:	6f 91       	pop	r22
 124:	5f 91       	pop	r21
 126:	4f 91       	pop	r20
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <GIE_VoidEnable>:
#include "GIE_private.h"
#include "GIE.h"

void GIE_VoidEnable(void)
{
	SET_BIT(SREG , I_bit);
 136:	8f b7       	in	r24, 0x3f	; 63
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	8f bf       	out	0x3f, r24	; 63
 13c:	08 95       	ret

0000013e <HLED_vLED_init>:

extern HLED_strLedCONFG_t HLED_enuArrLedCongf[Num_of_Led];


void HLED_vLED_init(void)
{
 13e:	cf 93       	push	r28
	u8 Local_u8_currentPinPort=0;
	u8 Local_u8_i=0;
	for(Local_u8_i =0 ; Local_u8_i < Num_of_Led ; Local_u8_i++)
 140:	c0 e0       	ldi	r28, 0x00	; 0
 142:	13 c0       	rjmp	.+38     	; 0x16a <HLED_vLED_init+0x2c>
	{
		Local_u8_currentPinPort = ((HLED_enuArrLedCongf[Local_u8_i].PORT<<4) + HLED_enuArrLedCongf[Local_u8_i].PIN);
 144:	ec 2f       	mov	r30, r28
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	cf 01       	movw	r24, r30
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	e8 0f       	add	r30, r24
 150:	f9 1f       	adc	r31, r25
 152:	e0 5a       	subi	r30, 0xA0	; 160
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	90 81       	ld	r25, Z
 158:	81 81       	ldd	r24, Z+1	; 0x01
		MPORT_enuSetPinDirection(Local_u8_currentPinPort , MPORT_enuPINOUTPUT);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	20 e1       	ldi	r18, 0x10	; 16
 15e:	92 9f       	mul	r25, r18
 160:	80 0d       	add	r24, r0
 162:	11 24       	eor	r1, r1
 164:	0e 94 17 02 	call	0x42e	; 0x42e <MPORT_enuSetPinDirection>

void HLED_vLED_init(void)
{
	u8 Local_u8_currentPinPort=0;
	u8 Local_u8_i=0;
	for(Local_u8_i =0 ; Local_u8_i < Num_of_Led ; Local_u8_i++)
 168:	cf 5f       	subi	r28, 0xFF	; 255
 16a:	c3 30       	cpi	r28, 0x03	; 3
 16c:	58 f3       	brcs	.-42     	; 0x144 <HLED_vLED_init+0x6>
		Local_u8_currentPinPort = ((HLED_enuArrLedCongf[Local_u8_i].PORT<<4) + HLED_enuArrLedCongf[Local_u8_i].PIN);
		MPORT_enuSetPinDirection(Local_u8_currentPinPort , MPORT_enuPINOUTPUT);
		
		
	}
}
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <HLED_enuSetLedState>:
HLED_enuErrorStatus_t HLED_enuSetLedState( u8 Copy_u8LedName, HLED_enuState_t Copy_enuState)
{
	MDIO_enuErrorStatus_t Ret_enuError = HLED_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_LED_NAME(Copy_u8LedName))
 172:	84 30       	cpi	r24, 0x04	; 4
 174:	08 f0       	brcs	.+2      	; 0x178 <HLED_enuSetLedState+0x6>
 176:	50 c0       	rjmp	.+160    	; 0x218 <HLED_enuSetLedState+0xa6>
	{
		Ret_enuError =HLED_enuINVALID_LEDName ;
		
	}
	else if (IS_INVALID_LED_VALUE(Copy_enuState))
 178:	62 30       	cpi	r22, 0x02	; 2
 17a:	08 f0       	brcs	.+2      	; 0x17e <HLED_enuSetLedState+0xc>
 17c:	4f c0       	rjmp	.+158    	; 0x21c <HLED_enuSetLedState+0xaa>
		Ret_enuError = HLED_enuINVALID_LEDValue;
	}
	else
	{
		Ret_enuError = HLED_enuOK;
		if(HLED_enuArrLedCongf[Copy_u8LedName].CONNECTION == HLED_enuForward)
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	fc 01       	movw	r30, r24
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	e8 0f       	add	r30, r24
 188:	f9 1f       	adc	r31, r25
 18a:	e0 5a       	subi	r30, 0xA0	; 160
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	21 11       	cpse	r18, r1
 192:	20 c0       	rjmp	.+64     	; 0x1d4 <HLED_enuSetLedState+0x62>
		{
			if(Copy_enuState == HLED_enuON)
 194:	61 11       	cpse	r22, r1
 196:	0e c0       	rjmp	.+28     	; 0x1b4 <HLED_enuSetLedState+0x42>
			{
				 Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuHIGH);
 198:	fc 01       	movw	r30, r24
 19a:	ee 0f       	add	r30, r30
 19c:	ff 1f       	adc	r31, r31
 19e:	8e 0f       	add	r24, r30
 1a0:	9f 1f       	adc	r25, r31
 1a2:	fc 01       	movw	r30, r24
 1a4:	e0 5a       	subi	r30, 0xA0	; 160
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	61 81       	ldd	r22, Z+1	; 0x01
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	80 81       	ld	r24, Z
 1ae:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <MDIO_enuSetPinValue>
 1b2:	08 95       	ret
			}
			else if(Copy_enuState == HLED_enuOFF)
 1b4:	61 30       	cpi	r22, 0x01	; 1
 1b6:	a1 f5       	brne	.+104    	; 0x220 <HLED_enuSetLedState+0xae>
			{
				Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuLOW);
 1b8:	fc 01       	movw	r30, r24
 1ba:	ee 0f       	add	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	8e 0f       	add	r24, r30
 1c0:	9f 1f       	adc	r25, r31
 1c2:	fc 01       	movw	r30, r24
 1c4:	e0 5a       	subi	r30, 0xA0	; 160
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	61 81       	ldd	r22, Z+1	; 0x01
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <MDIO_enuSetPinValue>
 1d2:	08 95       	ret
			}
		}
		else if(HLED_enuArrLedCongf[Copy_u8LedName].CONNECTION == HLED_enuReverse)
 1d4:	21 30       	cpi	r18, 0x01	; 1
 1d6:	31 f5       	brne	.+76     	; 0x224 <HLED_enuSetLedState+0xb2>
		{
			if(Copy_enuState == HLED_enuON)
 1d8:	61 11       	cpse	r22, r1
 1da:	0e c0       	rjmp	.+28     	; 0x1f8 <HLED_enuSetLedState+0x86>
			{
				Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuLOW);
 1dc:	fc 01       	movw	r30, r24
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	8e 0f       	add	r24, r30
 1e4:	9f 1f       	adc	r25, r31
 1e6:	fc 01       	movw	r30, r24
 1e8:	e0 5a       	subi	r30, 0xA0	; 160
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	61 81       	ldd	r22, Z+1	; 0x01
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <MDIO_enuSetPinValue>
 1f6:	08 95       	ret
			}
			else if(Copy_enuState == HLED_enuOFF)
 1f8:	61 30       	cpi	r22, 0x01	; 1
 1fa:	b1 f4       	brne	.+44     	; 0x228 <HLED_enuSetLedState+0xb6>
			{
				Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuHIGH);
 1fc:	fc 01       	movw	r30, r24
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	8e 0f       	add	r24, r30
 204:	9f 1f       	adc	r25, r31
 206:	fc 01       	movw	r30, r24
 208:	e0 5a       	subi	r30, 0xA0	; 160
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	61 81       	ldd	r22, Z+1	; 0x01
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	80 81       	ld	r24, Z
 212:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <MDIO_enuSetPinValue>
 216:	08 95       	ret
	MDIO_enuErrorStatus_t Ret_enuError = HLED_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_LED_NAME(Copy_u8LedName))
	{
		Ret_enuError =HLED_enuINVALID_LEDName ;
 218:	85 e0       	ldi	r24, 0x05	; 5
 21a:	08 95       	ret
		
	}
	else if (IS_INVALID_LED_VALUE(Copy_enuState))
	{
		Ret_enuError = HLED_enuINVALID_LEDValue;
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	08 95       	ret
	}
	else
	{
		Ret_enuError = HLED_enuOK;
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	08 95       	ret
				Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuHIGH);
			}
		}
		else
		{
			Ret_enuError = HLED_enuINVALID_LEDConnection;
 224:	87 e0       	ldi	r24, 0x07	; 7
 226:	08 95       	ret
	{
		Ret_enuError = HLED_enuINVALID_LEDValue;
	}
	else
	{
		Ret_enuError = HLED_enuOK;
 228:	80 e0       	ldi	r24, 0x00	; 0
		
	   

	}
	return Ret_enuError;
 22a:	08 95       	ret

0000022c <func>:
	u16 reading =0;
	u32 millivolt =0;

void func(void)
{
	reading=ADC_u16Read_Interrupt();
 22c:	0e 94 6f 00 	call	0xde	; 0xde <ADC_u16Read_Interrupt>
 230:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <reading+0x1>
 234:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <reading>
	millivolt=((u32) reading * 5000 / 1024);
 238:	9c 01       	movw	r18, r24
 23a:	a8 e8       	ldi	r26, 0x88	; 136
 23c:	b3 e1       	ldi	r27, 0x13	; 19
 23e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__umulhisi3>
 242:	dc 01       	movw	r26, r24
 244:	cb 01       	movw	r24, r22
 246:	07 2e       	mov	r0, r23
 248:	7a e0       	ldi	r23, 0x0A	; 10
 24a:	b6 95       	lsr	r27
 24c:	a7 95       	ror	r26
 24e:	97 95       	ror	r25
 250:	87 95       	ror	r24
 252:	7a 95       	dec	r23
 254:	d1 f7       	brne	.-12     	; 0x24a <func+0x1e>
 256:	70 2d       	mov	r23, r0
 258:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <millivolt>
 25c:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <millivolt+0x1>
 260:	a0 93 8e 00 	sts	0x008E, r26	; 0x80008e <millivolt+0x2>
 264:	b0 93 8f 00 	sts	0x008F, r27	; 0x80008f <millivolt+0x3>
	
		if(millivolt >=0 && millivolt < 1500)
 268:	8c 3d       	cpi	r24, 0xDC	; 220
 26a:	25 e0       	ldi	r18, 0x05	; 5
 26c:	92 07       	cpc	r25, r18
 26e:	a1 05       	cpc	r26, r1
 270:	b1 05       	cpc	r27, r1
 272:	68 f4       	brcc	.+26     	; 0x28e <func+0x62>
		{
			HLED_enuSetLedState(Led1 , HLED_enuON);
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 b9 00 	call	0x172	; 0x172 <HLED_enuSetLedState>
			HLED_enuSetLedState(Led2 , HLED_enuOFF);
 27c:	61 e0       	ldi	r22, 0x01	; 1
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 b9 00 	call	0x172	; 0x172 <HLED_enuSetLedState>
			HLED_enuSetLedState(Led3 , HLED_enuOFF);
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	0e 94 b9 00 	call	0x172	; 0x172 <HLED_enuSetLedState>
 28c:	08 95       	ret
		}
		else if(millivolt >=1500 && millivolt <3000)
 28e:	8c 5d       	subi	r24, 0xDC	; 220
 290:	95 40       	sbci	r25, 0x05	; 5
 292:	a1 09       	sbc	r26, r1
 294:	b1 09       	sbc	r27, r1
 296:	8c 3d       	cpi	r24, 0xDC	; 220
 298:	95 40       	sbci	r25, 0x05	; 5
 29a:	a1 05       	cpc	r26, r1
 29c:	b1 05       	cpc	r27, r1
 29e:	68 f4       	brcc	.+26     	; 0x2ba <func+0x8e>
		{
			HLED_enuSetLedState(Led2 , HLED_enuON);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 b9 00 	call	0x172	; 0x172 <HLED_enuSetLedState>
			HLED_enuSetLedState(Led1 , HLED_enuOFF);
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 b9 00 	call	0x172	; 0x172 <HLED_enuSetLedState>
			HLED_enuSetLedState(Led3 , HLED_enuOFF);
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 b9 00 	call	0x172	; 0x172 <HLED_enuSetLedState>
 2b8:	08 95       	ret
		}
		else
		{
			HLED_enuSetLedState(Led3 , HLED_enuON);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	0e 94 b9 00 	call	0x172	; 0x172 <HLED_enuSetLedState>
			HLED_enuSetLedState(Led1 , HLED_enuOFF);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 b9 00 	call	0x172	; 0x172 <HLED_enuSetLedState>
			HLED_enuSetLedState(Led2 , HLED_enuOFF);
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 b9 00 	call	0x172	; 0x172 <HLED_enuSetLedState>
 2d2:	08 95       	ret

000002d4 <main>:
}
int main(void)
{
	//u16 reading =0;
	//u32 millivolt =0;
	HLED_vLED_init();
 2d4:	0e 94 9f 00 	call	0x13e	; 0x13e <HLED_vLED_init>
	
    //SELECT ADC PIN INPUT (not input pull up)
	MPORT_vPortInit();
 2d8:	0e 94 02 02 	call	0x404	; 0x404 <MPORT_vPortInit>
	
	//ADC INIT 
	ADC_voidInit();
 2dc:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
	//fot interrupt
	GIE_VoidEnable();
 2e0:	0e 94 9b 00 	call	0x136	; 0x136 <GIE_VoidEnable>
	ADC_voidInterruptEnable();
 2e4:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_voidInterruptEnable>
	ADC_voidCallBack(func);
 2e8:	86 e1       	ldi	r24, 0x16	; 22
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 6a 00 	call	0xd4	; 0xd4 <ADC_voidCallBack>
	
	
    while (1) 
    {
		ADC_u16ADCStartConversion(channel_0);
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 5c 00 	call	0xb8	; 0xb8 <ADC_u16ADCStartConversion>
 2f6:	fc cf       	rjmp	.-8      	; 0x2f0 <main+0x1c>

000002f8 <MDIO_enuSetPinValue>:
{
	
	MDIO_enuErrorStatus_t Ret_enuError = MDIO_enuNOK;
	
	 // Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
 2f8:	85 30       	cpi	r24, 0x05	; 5
 2fa:	60 f5       	brcc	.+88     	; 0x354 <MDIO_enuSetPinValue+0x5c>
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
 2fc:	69 30       	cpi	r22, 0x09	; 9
 2fe:	60 f5       	brcc	.+88     	; 0x358 <MDIO_enuSetPinValue+0x60>
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PIN_STATE(Copy_enuState))
 300:	42 30       	cpi	r20, 0x02	; 2
 302:	60 f5       	brcc	.+88     	; 0x35c <MDIO_enuSetPinValue+0x64>
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
		// Get the address of the port registers
		MDIO_strPortRegElement_t* Local_strPtrCurrPort =(((MDIO_PORT_REG_BASE_ADD) - (((u8)Copy_enuPortNum) * 3)));
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	fc 01       	movw	r30, r24
 308:	ee 0f       	add	r30, r30
 30a:	ff 1f       	adc	r31, r31
 30c:	8e 0f       	add	r24, r30
 30e:	9f 1f       	adc	r25, r31
 310:	ee 27       	eor	r30, r30
 312:	ff 27       	eor	r31, r31
 314:	e8 1b       	sub	r30, r24
 316:	f9 0b       	sbc	r31, r25
 318:	f9 96       	adiw	r30, 0x39	; 57
		// Set the pin value (HIGH or LOW)
		if(Copy_enuState == MDIO_enuLOW) // Set pin to LOW
 31a:	41 11       	cpse	r20, r1
 31c:	0d c0       	rjmp	.+26     	; 0x338 <MDIO_enuSetPinValue+0x40>
		{
				CLR_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
 31e:	22 81       	ldd	r18, Z+2	; 0x02
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <MDIO_enuSetPinValue+0x32>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <MDIO_enuSetPinValue+0x2e>
 32e:	80 95       	com	r24
 330:	82 23       	and	r24, r18
 332:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	08 95       	ret
		// Set the pin value (HIGH or LOW)
		if(Copy_enuState == MDIO_enuLOW) // Set pin to LOW
		{
				CLR_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
		}
		else if(Copy_enuState == MDIO_enuHIGH)// Set pin to HIGH
 338:	41 30       	cpi	r20, 0x01	; 1
 33a:	91 f4       	brne	.+36     	; 0x360 <MDIO_enuSetPinValue+0x68>
		{
				
				SET_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
 33c:	22 81       	ldd	r18, Z+2	; 0x02
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <MDIO_enuSetPinValue+0x50>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <MDIO_enuSetPinValue+0x4c>
 34c:	82 2b       	or	r24, r18
 34e:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	08 95       	ret
	MDIO_enuErrorStatus_t Ret_enuError = MDIO_enuNOK;
	
	 // Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	08 95       	ret
	}
	else if (IS_INVALID_PIN_STATE(Copy_enuState))
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
 35c:	84 e0       	ldi	r24, 0x04	; 4
 35e:	08 95       	ret
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 360:	80 e0       	ldi	r24, 0x00	; 0
		}

	}
	return Ret_enuError;
	
}
 362:	08 95       	ret

00000364 <MPORT_enuSetPinConfigrationHelp>:
MPORT_enuErrorStatus_t MPORT_enuSetPinConfigrationHelp(MPORT_enuPortNum_t Copy_enuPortNum,MPORT_enuPinNum_t Copy_enuPinNum,MPORT_enuConfigration_t Copy_enuConfigration)
{
	
	MPORT_enuErrorStatus_t Ret_enuError= MPORT_enuOK;
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
 364:	84 30       	cpi	r24, 0x04	; 4
 366:	08 f0       	brcs	.+2      	; 0x36a <MPORT_enuSetPinConfigrationHelp+0x6>
 368:	45 c0       	rjmp	.+138    	; 0x3f4 <MPORT_enuSetPinConfigrationHelp+0x90>
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
 36a:	68 30       	cpi	r22, 0x08	; 8
 36c:	08 f0       	brcs	.+2      	; 0x370 <MPORT_enuSetPinConfigrationHelp+0xc>
 36e:	44 c0       	rjmp	.+136    	; 0x3f8 <MPORT_enuSetPinConfigrationHelp+0x94>
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PIN_CONFIG(Copy_enuConfigration))
 370:	43 30       	cpi	r20, 0x03	; 3
 372:	08 f0       	brcs	.+2      	; 0x376 <MPORT_enuSetPinConfigrationHelp+0x12>
 374:	43 c0       	rjmp	.+134    	; 0x3fc <MPORT_enuSetPinConfigrationHelp+0x98>
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
		// Get the address of the port registers
		MPORT_strPortRegElement_t* Local_strPtrCurrPort =(((MPORT_PORT_REG_BASE_ADD) - (((u8)Copy_enuPortNum) * 3)));
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	fc 01       	movw	r30, r24
 37a:	ee 0f       	add	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	8e 0f       	add	r24, r30
 380:	9f 1f       	adc	r25, r31
 382:	ee 27       	eor	r30, r30
 384:	ff 27       	eor	r31, r31
 386:	e8 1b       	sub	r30, r24
 388:	f9 0b       	sbc	r31, r25
 38a:	f9 96       	adiw	r30, 0x39	; 57
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuConfigration == MPORT_enuOUTPUT)// Output mode
 38c:	41 11       	cpse	r20, r1
 38e:	0c c0       	rjmp	.+24     	; 0x3a8 <MPORT_enuSetPinConfigrationHelp+0x44>
		{
			SET_BIT(Local_strPtrCurrPort->DDR,Copy_enuPinNum);
 390:	21 81       	ldd	r18, Z+1	; 0x01
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <MPORT_enuSetPinConfigrationHelp+0x38>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <MPORT_enuSetPinConfigrationHelp+0x34>
 3a0:	82 2b       	or	r24, r18
 3a2:	81 83       	std	Z+1, r24	; 0x01
	{
		Ret_enuError = MPORT_enuINVALID_PinConf;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	08 95       	ret
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuConfigration == MPORT_enuOUTPUT)// Output mode
		{
			SET_BIT(Local_strPtrCurrPort->DDR,Copy_enuPinNum);
		}
		else if(Copy_enuConfigration == MPORT_enuINPUT_PULLUP) // Input with pull-up
 3a8:	41 30       	cpi	r20, 0x01	; 1
 3aa:	89 f4       	brne	.+34     	; 0x3ce <MPORT_enuSetPinConfigrationHelp+0x6a>
		{
			CLR_BIT(Local_strPtrCurrPort->DDR ,Copy_enuPinNum );
 3ac:	21 81       	ldd	r18, Z+1	; 0x01
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <MPORT_enuSetPinConfigrationHelp+0x54>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <MPORT_enuSetPinConfigrationHelp+0x50>
 3bc:	98 2f       	mov	r25, r24
 3be:	90 95       	com	r25
 3c0:	92 23       	and	r25, r18
 3c2:	91 83       	std	Z+1, r25	; 0x01
			SET_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
 3c4:	92 81       	ldd	r25, Z+2	; 0x02
 3c6:	89 2b       	or	r24, r25
 3c8:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MPORT_enuINVALID_PinConf;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret
		{
			CLR_BIT(Local_strPtrCurrPort->DDR ,Copy_enuPinNum );
			SET_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
			
		}
		else if(Copy_enuConfigration == MPORT_enuINPUT_PULLDOWN) // Input with pull-down
 3ce:	42 30       	cpi	r20, 0x02	; 2
 3d0:	b9 f4       	brne	.+46     	; 0x400 <__EEPROM_REGION_LENGTH__>
		{
			CLR_BIT(Local_strPtrCurrPort->DDR ,Copy_enuPinNum );
 3d2:	21 81       	ldd	r18, Z+1	; 0x01
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <MPORT_enuSetPinConfigrationHelp+0x7a>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <MPORT_enuSetPinConfigrationHelp+0x76>
 3e2:	80 95       	com	r24
 3e4:	92 2f       	mov	r25, r18
 3e6:	98 23       	and	r25, r24
 3e8:	91 83       	std	Z+1, r25	; 0x01
			CLR_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum );
 3ea:	92 81       	ldd	r25, Z+2	; 0x02
 3ec:	89 23       	and	r24, r25
 3ee:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MPORT_enuINVALID_PinConf;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	08 95       	ret
	
	MPORT_enuErrorStatus_t Ret_enuError= MPORT_enuOK;
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
 3f8:	83 e0       	ldi	r24, 0x03	; 3
 3fa:	08 95       	ret
	}
	else if (IS_INVALID_PIN_CONFIG(Copy_enuConfigration))
	{
		Ret_enuError = MPORT_enuINVALID_PinConf;
 3fc:	86 e0       	ldi	r24, 0x06	; 6
 3fe:	08 95       	ret
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 400:	80 e0       	ldi	r24, 0x00	; 0
		}

	}
	return Ret_enuError;
	
}
 402:	08 95       	ret

00000404 <MPORT_vPortInit>:


// Function: MPORT_vPortInit
// Initializes all pins in all ports with their configuration based on MPORT_enuArrPinConfig array.
void MPORT_vPortInit(void)
{
 404:	cf 93       	push	r28
	u8 Local_u8_i=0;
	MPORT_enuPortNum_t Local_enuCurrentPort = MPORT_enuPORTA ;
	MPORT_enuPinNum_t Local_enuCurrentPin = MPORT_enuPIN0;

	// Loop through all pins in all ports and set their configurations
	for (Local_u8_i = 0; Local_u8_i < (MPORT_NUM_OF_PORTS * MPORT_NUM_OF_PINS); Local_u8_i++)
 406:	c0 e0       	ldi	r28, 0x00	; 0
 408:	0e c0       	rjmp	.+28     	; 0x426 <MPORT_vPortInit+0x22>
	{
		Local_enuCurrentPort = Local_u8_i / MPORT_NUM_OF_PINS ;  // Determine port number
		Local_enuCurrentPin = Local_u8_i % MPORT_NUM_OF_PINS; // Determine pin number
 40a:	6c 2f       	mov	r22, r28
 40c:	67 70       	andi	r22, 0x07	; 7
		MPORT_enuSetPinConfigrationHelp(Local_enuCurrentPort ,Local_enuCurrentPin , MPORT_enuArrPinConfig[Local_u8_i] );
 40e:	ec 2f       	mov	r30, r28
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	e7 59       	subi	r30, 0x97	; 151
 414:	ff 4f       	sbci	r31, 0xFF	; 255
 416:	40 81       	ld	r20, Z
 418:	8c 2f       	mov	r24, r28
 41a:	86 95       	lsr	r24
 41c:	86 95       	lsr	r24
 41e:	86 95       	lsr	r24
 420:	0e 94 b2 01 	call	0x364	; 0x364 <MPORT_enuSetPinConfigrationHelp>
	u8 Local_u8_i=0;
	MPORT_enuPortNum_t Local_enuCurrentPort = MPORT_enuPORTA ;
	MPORT_enuPinNum_t Local_enuCurrentPin = MPORT_enuPIN0;

	// Loop through all pins in all ports and set their configurations
	for (Local_u8_i = 0; Local_u8_i < (MPORT_NUM_OF_PORTS * MPORT_NUM_OF_PINS); Local_u8_i++)
 424:	cf 5f       	subi	r28, 0xFF	; 255
 426:	c0 32       	cpi	r28, 0x20	; 32
 428:	80 f3       	brcs	.-32     	; 0x40a <MPORT_vPortInit+0x6>
		Local_enuCurrentPin = Local_u8_i % MPORT_NUM_OF_PINS; // Determine pin number
		MPORT_enuSetPinConfigrationHelp(Local_enuCurrentPort ,Local_enuCurrentPin , MPORT_enuArrPinConfig[Local_u8_i] );
		
	}

}
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <MPORT_enuSetPinDirection>:
// Function: MPORT_enuSetPinDirection
// Sets the direction of any pin after the initialization.
MPORT_enuErrorStatus_t MPORT_enuSetPinDirection( MPORT_enuPinNums_t Copy_enuPinNum  ,  MPORT_enuPinDirection_t  Copy_enuPinDirection  )
{
	MPORT_enuErrorStatus_t Ret_enuError= MPORT_enuOK;
	u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
 42e:	28 2f       	mov	r18, r24
 430:	22 95       	swap	r18
 432:	2f 70       	andi	r18, 0x0F	; 15
	u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
 434:	8f 70       	andi	r24, 0x0F	; 15
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
 436:	24 30       	cpi	r18, 0x04	; 4
 438:	a0 f5       	brcc	.+104    	; 0x4a2 <MPORT_enuSetPinDirection+0x74>
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
 43a:	88 30       	cpi	r24, 0x08	; 8
 43c:	a0 f5       	brcc	.+104    	; 0x4a6 <MPORT_enuSetPinDirection+0x78>
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PIN_Direction(Copy_enuPinDirection))
 43e:	62 30       	cpi	r22, 0x02	; 2
 440:	a0 f5       	brcc	.+104    	; 0x4aa <MPORT_enuSetPinDirection+0x7c>
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
		// Get the address of the port registers
		MPORT_strPortRegElement_t* Local_strPtrCurrPort =(((MPORT_PORT_REG_BASE_ADD) - (((u8)LOC_u8portNumber) * 3)));
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	f9 01       	movw	r30, r18
 446:	ee 0f       	add	r30, r30
 448:	ff 1f       	adc	r31, r31
 44a:	2e 0f       	add	r18, r30
 44c:	3f 1f       	adc	r19, r31
 44e:	ee 27       	eor	r30, r30
 450:	ff 27       	eor	r31, r31
 452:	e2 1b       	sub	r30, r18
 454:	f3 0b       	sbc	r31, r19
 456:	f9 96       	adiw	r30, 0x39	; 57
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuPinDirection == MPORT_enuPINOUTPUT)// Output 
 458:	61 11       	cpse	r22, r1
 45a:	0e c0       	rjmp	.+28     	; 0x478 <MPORT_enuSetPinDirection+0x4a>
		{
			SET_BIT(Local_strPtrCurrPort->DDR,LOC_u8pinNumber);
 45c:	41 81       	ldd	r20, Z+1	; 0x01
 45e:	21 e0       	ldi	r18, 0x01	; 1
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	b9 01       	movw	r22, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <MPORT_enuSetPinDirection+0x3c>
 466:	66 0f       	add	r22, r22
 468:	77 1f       	adc	r23, r23
 46a:	8a 95       	dec	r24
 46c:	e2 f7       	brpl	.-8      	; 0x466 <MPORT_enuSetPinDirection+0x38>
 46e:	cb 01       	movw	r24, r22
 470:	84 2b       	or	r24, r20
 472:	81 83       	std	Z+1, r24	; 0x01
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	08 95       	ret
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuPinDirection == MPORT_enuPINOUTPUT)// Output 
		{
			SET_BIT(Local_strPtrCurrPort->DDR,LOC_u8pinNumber);
		}
		else if(Copy_enuPinDirection == MPORT_enuPININPUT) // Input 
 478:	61 30       	cpi	r22, 0x01	; 1
 47a:	c9 f4       	brne	.+50     	; 0x4ae <MPORT_enuSetPinDirection+0x80>
		{
			CLR_BIT(Local_strPtrCurrPort->DDR ,LOC_u8pinNumber );
 47c:	41 81       	ldd	r20, Z+1	; 0x01
 47e:	21 e0       	ldi	r18, 0x01	; 1
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	b9 01       	movw	r22, r18
 484:	02 c0       	rjmp	.+4      	; 0x48a <MPORT_enuSetPinDirection+0x5c>
 486:	66 0f       	add	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	8a 95       	dec	r24
 48c:	e2 f7       	brpl	.-8      	; 0x486 <MPORT_enuSetPinDirection+0x58>
 48e:	cb 01       	movw	r24, r22
 490:	80 95       	com	r24
 492:	94 2f       	mov	r25, r20
 494:	98 23       	and	r25, r24
 496:	91 83       	std	Z+1, r25	; 0x01
			CLR_BIT(Local_strPtrCurrPort->PORT,LOC_u8pinNumber);
 498:	92 81       	ldd	r25, Z+2	; 0x02
 49a:	89 23       	and	r24, r25
 49c:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	08 95       	ret
	u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
	u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
 4a6:	83 e0       	ldi	r24, 0x03	; 3
 4a8:	08 95       	ret
	}
	else if (IS_INVALID_PIN_Direction(Copy_enuPinDirection))
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
 4aa:	84 e0       	ldi	r24, 0x04	; 4
 4ac:	08 95       	ret
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 4ae:	80 e0       	ldi	r24, 0x00	; 0
	
	}
	return Ret_enuError;
		
		
}
 4b0:	08 95       	ret

000004b2 <__umulhisi3>:
 4b2:	a2 9f       	mul	r26, r18
 4b4:	b0 01       	movw	r22, r0
 4b6:	b3 9f       	mul	r27, r19
 4b8:	c0 01       	movw	r24, r0
 4ba:	a3 9f       	mul	r26, r19
 4bc:	70 0d       	add	r23, r0
 4be:	81 1d       	adc	r24, r1
 4c0:	11 24       	eor	r1, r1
 4c2:	91 1d       	adc	r25, r1
 4c4:	b2 9f       	mul	r27, r18
 4c6:	70 0d       	add	r23, r0
 4c8:	81 1d       	adc	r24, r1
 4ca:	11 24       	eor	r1, r1
 4cc:	91 1d       	adc	r25, r1
 4ce:	08 95       	ret

000004d0 <_exit>:
 4d0:	f8 94       	cli

000004d2 <__stop_program>:
 4d2:	ff cf       	rjmp	.-2      	; 0x4d2 <__stop_program>
