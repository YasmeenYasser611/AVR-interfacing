
portdriverbuild.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800060  00800060  00000268  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f7f  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085c  00000000  00000000  000012f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d5  00000000  00000000  00001b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00002124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bb3  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000688  00000000  00000000  00002d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003423  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 38       	cpi	r26, 0x80	; 128
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <util/delay.h>


int main(void)
{
    MPORT_vPortInit();
  7c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <MPORT_vPortInit>
    while (1) 
    {
		MDIO_enuSetPinValue(MDIO_enuPORTA , MDIO_enuPIN1 , MDIO_enuHIGH);	
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	61 e0       	ldi	r22, 0x01	; 1
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	0e 94 5d 00 	call	0xba	; 0xba <MDIO_enuSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f ef       	ldi	r18, 0xFF	; 255
  8c:	80 e7       	ldi	r24, 0x70	; 112
  8e:	92 e0       	ldi	r25, 0x02	; 2
  90:	21 50       	subi	r18, 0x01	; 1
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x14>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x1e>
  9a:	00 00       	nop
		_delay_ms(100);
		MDIO_enuSetPinValue(MDIO_enuPORTA , MDIO_enuPIN1 , MDIO_enuLOW);
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 5d 00 	call	0xba	; 0xba <MDIO_enuSetPinValue>
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	80 e7       	ldi	r24, 0x70	; 112
  aa:	92 e0       	ldi	r25, 0x02	; 2
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x30>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x3a>
  b6:	00 00       	nop
  b8:	e3 cf       	rjmp	.-58     	; 0x80 <main+0x4>

000000ba <MDIO_enuSetPinValue>:
{
	
	MDIO_enuErrorStatus_t Ret_enuError = MDIO_enuNOK;
	
	 // Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
  ba:	85 30       	cpi	r24, 0x05	; 5
  bc:	60 f5       	brcc	.+88     	; 0x116 <MDIO_enuSetPinValue+0x5c>
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
  be:	69 30       	cpi	r22, 0x09	; 9
  c0:	60 f5       	brcc	.+88     	; 0x11a <MDIO_enuSetPinValue+0x60>
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PIN_STATE(Copy_enuState))
  c2:	42 30       	cpi	r20, 0x02	; 2
  c4:	60 f5       	brcc	.+88     	; 0x11e <MDIO_enuSetPinValue+0x64>
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
		// Get the address of the port registers
		MDIO_strPortRegElement_t* Local_strPtrCurrPort =(((MDIO_PORT_REG_BASE_ADD) - (((u8)Copy_enuPortNum) * 3)));
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	ee 0f       	add	r30, r30
  cc:	ff 1f       	adc	r31, r31
  ce:	8e 0f       	add	r24, r30
  d0:	9f 1f       	adc	r25, r31
  d2:	ee 27       	eor	r30, r30
  d4:	ff 27       	eor	r31, r31
  d6:	e8 1b       	sub	r30, r24
  d8:	f9 0b       	sbc	r31, r25
  da:	f9 96       	adiw	r30, 0x39	; 57
		// Set the pin value (HIGH or LOW)
		if(Copy_enuState == MDIO_enuLOW) // Set pin to LOW
  dc:	41 11       	cpse	r20, r1
  de:	0d c0       	rjmp	.+26     	; 0xfa <MDIO_enuSetPinValue+0x40>
		{
				CLR_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
  e0:	22 81       	ldd	r18, Z+2	; 0x02
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <MDIO_enuSetPinValue+0x32>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <MDIO_enuSetPinValue+0x2e>
  f0:	80 95       	com	r24
  f2:	82 23       	and	r24, r18
  f4:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	08 95       	ret
		// Set the pin value (HIGH or LOW)
		if(Copy_enuState == MDIO_enuLOW) // Set pin to LOW
		{
				CLR_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
		}
		else if(Copy_enuState == MDIO_enuHIGH)// Set pin to HIGH
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	91 f4       	brne	.+36     	; 0x122 <MDIO_enuSetPinValue+0x68>
		{
				
				SET_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
  fe:	22 81       	ldd	r18, Z+2	; 0x02
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <MDIO_enuSetPinValue+0x50>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <MDIO_enuSetPinValue+0x4c>
 10e:	82 2b       	or	r24, r18
 110:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	08 95       	ret
	MDIO_enuErrorStatus_t Ret_enuError = MDIO_enuNOK;
	
	 // Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	08 95       	ret
	}
	else if (IS_INVALID_PIN_STATE(Copy_enuState))
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	08 95       	ret
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 122:	80 e0       	ldi	r24, 0x00	; 0
		}

	}
	return Ret_enuError;
	
}
 124:	08 95       	ret

00000126 <MPORT_enuSetPinConfigrationHelp>:
MPORT_enuErrorStatus_t MPORT_enuSetPinConfigrationHelp(MPORT_enuPortNum_t Copy_enuPortNum,MPORT_enuPinNum_t Copy_enuPinNum,MPORT_enuConfigration_t Copy_enuConfigration)
{
	
	MPORT_enuErrorStatus_t Ret_enuError= MPORT_enuOK;
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
 126:	84 30       	cpi	r24, 0x04	; 4
 128:	08 f0       	brcs	.+2      	; 0x12c <MPORT_enuSetPinConfigrationHelp+0x6>
 12a:	45 c0       	rjmp	.+138    	; 0x1b6 <MPORT_enuSetPinConfigrationHelp+0x90>
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
 12c:	68 30       	cpi	r22, 0x08	; 8
 12e:	08 f0       	brcs	.+2      	; 0x132 <MPORT_enuSetPinConfigrationHelp+0xc>
 130:	44 c0       	rjmp	.+136    	; 0x1ba <MPORT_enuSetPinConfigrationHelp+0x94>
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PIN_CONFIG(Copy_enuConfigration))
 132:	43 30       	cpi	r20, 0x03	; 3
 134:	08 f0       	brcs	.+2      	; 0x138 <MPORT_enuSetPinConfigrationHelp+0x12>
 136:	43 c0       	rjmp	.+134    	; 0x1be <MPORT_enuSetPinConfigrationHelp+0x98>
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
		// Get the address of the port registers
		MPORT_strPortRegElement_t* Local_strPtrCurrPort =(((MPORT_PORT_REG_BASE_ADD) - (((u8)Copy_enuPortNum) * 3)));
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fc 01       	movw	r30, r24
 13c:	ee 0f       	add	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	8e 0f       	add	r24, r30
 142:	9f 1f       	adc	r25, r31
 144:	ee 27       	eor	r30, r30
 146:	ff 27       	eor	r31, r31
 148:	e8 1b       	sub	r30, r24
 14a:	f9 0b       	sbc	r31, r25
 14c:	f9 96       	adiw	r30, 0x39	; 57
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuConfigration == MPORT_enuOUTPUT)// Output mode
 14e:	41 11       	cpse	r20, r1
 150:	0c c0       	rjmp	.+24     	; 0x16a <MPORT_enuSetPinConfigrationHelp+0x44>
		{
			SET_BIT(Local_strPtrCurrPort->DDR,Copy_enuPinNum);
 152:	21 81       	ldd	r18, Z+1	; 0x01
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <MPORT_enuSetPinConfigrationHelp+0x38>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <MPORT_enuSetPinConfigrationHelp+0x34>
 162:	82 2b       	or	r24, r18
 164:	81 83       	std	Z+1, r24	; 0x01
	{
		Ret_enuError = MPORT_enuINVALID_PinConf;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	08 95       	ret
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuConfigration == MPORT_enuOUTPUT)// Output mode
		{
			SET_BIT(Local_strPtrCurrPort->DDR,Copy_enuPinNum);
		}
		else if(Copy_enuConfigration == MPORT_enuINPUT_PULLUP) // Input with pull-up
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	89 f4       	brne	.+34     	; 0x190 <MPORT_enuSetPinConfigrationHelp+0x6a>
		{
			CLR_BIT(Local_strPtrCurrPort->DDR ,Copy_enuPinNum );
 16e:	21 81       	ldd	r18, Z+1	; 0x01
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <MPORT_enuSetPinConfigrationHelp+0x54>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <MPORT_enuSetPinConfigrationHelp+0x50>
 17e:	98 2f       	mov	r25, r24
 180:	90 95       	com	r25
 182:	92 23       	and	r25, r18
 184:	91 83       	std	Z+1, r25	; 0x01
			SET_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
 186:	92 81       	ldd	r25, Z+2	; 0x02
 188:	89 2b       	or	r24, r25
 18a:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MPORT_enuINVALID_PinConf;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	08 95       	ret
		{
			CLR_BIT(Local_strPtrCurrPort->DDR ,Copy_enuPinNum );
			SET_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
			
		}
		else if(Copy_enuConfigration == MPORT_enuINPUT_PULLDOWN) // Input with pull-down
 190:	42 30       	cpi	r20, 0x02	; 2
 192:	b9 f4       	brne	.+46     	; 0x1c2 <MPORT_enuSetPinConfigrationHelp+0x9c>
		{
			CLR_BIT(Local_strPtrCurrPort->DDR ,Copy_enuPinNum );
 194:	21 81       	ldd	r18, Z+1	; 0x01
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <MPORT_enuSetPinConfigrationHelp+0x7a>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <MPORT_enuSetPinConfigrationHelp+0x76>
 1a4:	80 95       	com	r24
 1a6:	92 2f       	mov	r25, r18
 1a8:	98 23       	and	r25, r24
 1aa:	91 83       	std	Z+1, r25	; 0x01
			CLR_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum );
 1ac:	92 81       	ldd	r25, Z+2	; 0x02
 1ae:	89 23       	and	r24, r25
 1b0:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MPORT_enuINVALID_PinConf;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	08 95       	ret
	
	MPORT_enuErrorStatus_t Ret_enuError= MPORT_enuOK;
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	08 95       	ret
	}
	else if (IS_INVALID_PIN_CONFIG(Copy_enuConfigration))
	{
		Ret_enuError = MPORT_enuINVALID_PinConf;
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	08 95       	ret
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
		}

	}
	return Ret_enuError;
	
}
 1c4:	08 95       	ret

000001c6 <MPORT_vPortInit>:


// Function: MPORT_vPortInit
// Initializes all pins in all ports with their configuration based on MPORT_enuArrPinConfig array.
void MPORT_vPortInit(void)
{
 1c6:	cf 93       	push	r28
	u8 Local_u8_i;
	MPORT_enuPortNum_t Local_enuCurrentPort;
	MPORT_enuPinNum_t Local_enuCurrentPin;

	// Loop through all pins in all ports and set their configurations
	for (Local_u8_i = 0; Local_u8_i < (MPORT_NUM_OF_PORTS * MPORT_NUM_OF_PINS); Local_u8_i++)
 1c8:	c0 e0       	ldi	r28, 0x00	; 0
 1ca:	0e c0       	rjmp	.+28     	; 0x1e8 <MPORT_vPortInit+0x22>
	{
		Local_enuCurrentPort = Local_u8_i / MPORT_NUM_OF_PINS ;  // Determine port number
		Local_enuCurrentPin = Local_u8_i % MPORT_NUM_OF_PINS; // Determine pin number
 1cc:	6c 2f       	mov	r22, r28
 1ce:	67 70       	andi	r22, 0x07	; 7
		MPORT_enuSetPinConfigrationHelp(Local_enuCurrentPort ,Local_enuCurrentPin , MPORT_enuArrPinConfig[Local_u8_i] );
 1d0:	ec 2f       	mov	r30, r28
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	e0 5a       	subi	r30, 0xA0	; 160
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	40 81       	ld	r20, Z
 1da:	8c 2f       	mov	r24, r28
 1dc:	86 95       	lsr	r24
 1de:	86 95       	lsr	r24
 1e0:	86 95       	lsr	r24
 1e2:	0e 94 93 00 	call	0x126	; 0x126 <MPORT_enuSetPinConfigrationHelp>
	u8 Local_u8_i;
	MPORT_enuPortNum_t Local_enuCurrentPort;
	MPORT_enuPinNum_t Local_enuCurrentPin;

	// Loop through all pins in all ports and set their configurations
	for (Local_u8_i = 0; Local_u8_i < (MPORT_NUM_OF_PORTS * MPORT_NUM_OF_PINS); Local_u8_i++)
 1e6:	cf 5f       	subi	r28, 0xFF	; 255
 1e8:	c0 32       	cpi	r28, 0x20	; 32
 1ea:	80 f3       	brcs	.-32     	; 0x1cc <MPORT_vPortInit+0x6>
		Local_enuCurrentPin = Local_u8_i % MPORT_NUM_OF_PINS; // Determine pin number
		MPORT_enuSetPinConfigrationHelp(Local_enuCurrentPort ,Local_enuCurrentPin , MPORT_enuArrPinConfig[Local_u8_i] );
		
	}

}
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
