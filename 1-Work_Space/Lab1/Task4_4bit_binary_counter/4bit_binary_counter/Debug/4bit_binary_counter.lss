
4bit_binary_counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000639  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059a  00000000  00000000  000007f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028d  00000000  00000000  00000d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001018  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000315  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  00001351  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define GET_BIT(var , bit) ((var>>bit)&1)


int main(void)
{
	SET_BIT(DDRA,0); // portd pin0 as output for led0
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,1); // portd pin1 as output for led1
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	82 60       	ori	r24, 0x02	; 2
  76:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,2); // portd pin2 as output for led2
  78:	8a b3       	in	r24, 0x1a	; 26
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,3); // portd pin3 as output for led3
  7e:	8a b3       	in	r24, 0x1a	; 26
  80:	88 60       	ori	r24, 0x08	; 8
  82:	8a bb       	out	0x1a, r24	; 26
	
	CLR_BIT(DDRC,0); //portc pin0 as input for button
  84:	84 b3       	in	r24, 0x14	; 20
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	84 bb       	out	0x14, r24	; 20
	SET_BIT(PORTC,0); // using pull up resistance for the button
  8a:	85 b3       	in	r24, 0x15	; 21
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	85 bb       	out	0x15, r24	; 21
	int counter=0; //counter to count the number
	PORTA= counter; //first print 
  90:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f e3       	ldi	r18, 0x3F	; 63
  94:	8d e0       	ldi	r24, 0x0D	; 13
  96:	93 e0       	ldi	r25, 0x03	; 3
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x2c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x36>
  a2:	00 00       	nop
	SET_BIT(DDRA,2); // portd pin2 as output for led2
	SET_BIT(DDRA,3); // portd pin3 as output for led3
	
	CLR_BIT(DDRC,0); //portc pin0 as input for button
	SET_BIT(PORTC,0); // using pull up resistance for the button
	int counter=0; //counter to count the number
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(1000);
	while (1)
	{
		
		//check if the button pressed
		if(GET_BIT(PINC,0)==0)
  a8:	98 99       	sbic	0x13, 0	; 19
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <main+0x3c>
		{
			//increment the counter
			counter++;
  ac:	01 96       	adiw	r24, 0x01	; 1
			//display the counter value
			PORTA= counter;
  ae:	8b bb       	out	0x1b, r24	; 27
			
			if(counter==16)//check if counter reach 115 2^4 -1
  b0:	80 31       	cpi	r24, 0x10	; 16
  b2:	91 05       	cpc	r25, r1
  b4:	61 f4       	brne	.+24     	; 0xce <main+0x62>
			{
				//reset the counter and display the value
				counter=0;
				PORTA= counter;
  b6:	1b ba       	out	0x1b, r1	; 27
  b8:	2f e3       	ldi	r18, 0x3F	; 63
  ba:	8d e0       	ldi	r24, 0x0D	; 13
  bc:	93 e0       	ldi	r25, 0x03	; 3
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x52>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x5c>
  c8:	00 00       	nop
			PORTA= counter;
			
			if(counter==16)//check if counter reach 115 2^4 -1
			{
				//reset the counter and display the value
				counter=0;
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
				PORTA= counter;
				_delay_ms(1000);
			}
			while(GET_BIT(PINC,0)==0); //wait till the switch is not pressed 
  ce:	98 9b       	sbis	0x13, 0	; 19
  d0:	fe cf       	rjmp	.-4      	; 0xce <main+0x62>
  d2:	ea cf       	rjmp	.-44     	; 0xa8 <main+0x3c>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
