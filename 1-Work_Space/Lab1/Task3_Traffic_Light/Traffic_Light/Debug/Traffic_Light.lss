
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070e  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  00000902  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c2  00000000  00000000  00000e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001150  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000301  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  00001475  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	
	SET_BIT(DDRA,0); //led red
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,1); // led yello
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	82 60       	ori	r24, 0x02	; 2
  76:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,2); //led green
  78:	8a b3       	in	r24, 0x1a	; 26
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	8a bb       	out	0x1a, r24	; 26
	
	//loop forever
	while (1)
	{
		//led red on
		SET_BIT(PORTA , 0);
  7e:	8b b3       	in	r24, 0x1b	; 27
  80:	81 60       	ori	r24, 0x01	; 1
  82:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f e7       	ldi	r18, 0x7F	; 127
  86:	84 e8       	ldi	r24, 0x84	; 132
  88:	9e e1       	ldi	r25, 0x1E	; 30
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0x1e>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x28>
  94:	00 00       	nop
		_delay_ms(10000);
		//led red off
		CLR_BIT(PORTA , 0);
  96:	8b b3       	in	r24, 0x1b	; 27
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	8b bb       	out	0x1b, r24	; 27
  9c:	2f e3       	ldi	r18, 0x3F	; 63
  9e:	8d e0       	ldi	r24, 0x0D	; 13
  a0:	93 e0       	ldi	r25, 0x03	; 3
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x36>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
		_delay_ms(1000);
		
		//led yello on
		SET_BIT(PORTA , 1);
  ae:	8b b3       	in	r24, 0x1b	; 27
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	8b bb       	out	0x1b, r24	; 27
  b4:	2f e7       	ldi	r18, 0x7F	; 127
  b6:	84 e8       	ldi	r24, 0x84	; 132
  b8:	9e e1       	ldi	r25, 0x1E	; 30
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x4e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x58>
  c4:	00 00       	nop
		_delay_ms(10000);
		//led off
		CLR_BIT(PORTA , 1);
  c6:	8b b3       	in	r24, 0x1b	; 27
  c8:	8d 7f       	andi	r24, 0xFD	; 253
  ca:	8b bb       	out	0x1b, r24	; 27
  cc:	2f e3       	ldi	r18, 0x3F	; 63
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x66>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x70>
  dc:	00 00       	nop
		_delay_ms(1000);
		
		//led green on
		SET_BIT(PORTA , 2);
  de:	8b b3       	in	r24, 0x1b	; 27
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	8b bb       	out	0x1b, r24	; 27
  e4:	2f e7       	ldi	r18, 0x7F	; 127
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	9e e1       	ldi	r25, 0x1E	; 30
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x7e>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x88>
  f4:	00 00       	nop
		_delay_ms(10000);
		//led green  off
		CLR_BIT(PORTA , 2);
  f6:	8b b3       	in	r24, 0x1b	; 27
  f8:	8b 7f       	andi	r24, 0xFB	; 251
  fa:	8b bb       	out	0x1b, r24	; 27
  fc:	2f e3       	ldi	r18, 0x3F	; 63
  fe:	8d e0       	ldi	r24, 0x0D	; 13
 100:	93 e0       	ldi	r25, 0x03	; 3
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x96>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0xa0>
 10c:	00 00       	nop
 10e:	b7 cf       	rjmp	.-146    	; 0x7e <main+0x12>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
