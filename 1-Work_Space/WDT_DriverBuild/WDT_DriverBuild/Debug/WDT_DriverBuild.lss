
WDT_DriverBuild.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000002b8  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013a0  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009f9  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007db  00000000  00000000  00002231  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  00002a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e35  00000000  00000000  00002b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009d0  00000000  00000000  00003985  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00004355  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  7a:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <HLED_vLED_init>:

extern HLED_strLedCONFG_t HLED_enuArrLedCongf[Num_of_Led];


void HLED_vLED_init(void)
{
  82:	cf 93       	push	r28
	u8 Local_u8_currentPinPort=0;
	u8 Local_u8_i=0;
	for(Local_u8_i =0 ; Local_u8_i < Num_of_Led ; Local_u8_i++)
  84:	c0 e0       	ldi	r28, 0x00	; 0
  86:	13 c0       	rjmp	.+38     	; 0xae <HLED_vLED_init+0x2c>
	{
		Local_u8_currentPinPort = ((HLED_enuArrLedCongf[Local_u8_i].PORT<<4) + HLED_enuArrLedCongf[Local_u8_i].PIN);
  88:	ec 2f       	mov	r30, r28
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	cf 01       	movw	r24, r30
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	e8 0f       	add	r30, r24
  94:	f9 1f       	adc	r31, r25
  96:	e0 5a       	subi	r30, 0xA0	; 160
  98:	ff 4f       	sbci	r31, 0xFF	; 255
  9a:	90 81       	ld	r25, Z
  9c:	81 81       	ldd	r24, Z+1	; 0x01
		MPORT_enuSetPinDirection(Local_u8_currentPinPort , MPORT_enuPINOUTPUT);
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	20 e1       	ldi	r18, 0x10	; 16
  a2:	92 9f       	mul	r25, r18
  a4:	80 0d       	add	r24, r0
  a6:	11 24       	eor	r1, r1
  a8:	0e 94 09 01 	call	0x212	; 0x212 <MPORT_enuSetPinDirection>

void HLED_vLED_init(void)
{
	u8 Local_u8_currentPinPort=0;
	u8 Local_u8_i=0;
	for(Local_u8_i =0 ; Local_u8_i < Num_of_Led ; Local_u8_i++)
  ac:	cf 5f       	subi	r28, 0xFF	; 255
  ae:	c2 30       	cpi	r28, 0x02	; 2
  b0:	58 f3       	brcs	.-42     	; 0x88 <HLED_vLED_init+0x6>
		Local_u8_currentPinPort = ((HLED_enuArrLedCongf[Local_u8_i].PORT<<4) + HLED_enuArrLedCongf[Local_u8_i].PIN);
		MPORT_enuSetPinDirection(Local_u8_currentPinPort , MPORT_enuPINOUTPUT);
		
		
	}
}
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <HLED_enuSetLedState>:
HLED_enuErrorStatus_t HLED_enuSetLedState( u8 Copy_u8LedName, HLED_enuState_t Copy_enuState)
{
	MDIO_enuErrorStatus_t Ret_enuError = HLED_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_LED_NAME(Copy_u8LedName))
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	08 f0       	brcs	.+2      	; 0xbc <HLED_enuSetLedState+0x6>
  ba:	50 c0       	rjmp	.+160    	; 0x15c <HLED_enuSetLedState+0xa6>
	{
		Ret_enuError =HLED_enuINVALID_LEDName ;
		
	}
	else if (IS_INVALID_LED_VALUE(Copy_enuState))
  bc:	62 30       	cpi	r22, 0x02	; 2
  be:	08 f0       	brcs	.+2      	; 0xc2 <HLED_enuSetLedState+0xc>
  c0:	4f c0       	rjmp	.+158    	; 0x160 <HLED_enuSetLedState+0xaa>
		Ret_enuError = HLED_enuINVALID_LEDValue;
	}
	else
	{
		Ret_enuError = HLED_enuOK;
		if(HLED_enuArrLedCongf[Copy_u8LedName].CONNECTION == HLED_enuForward)
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	fc 01       	movw	r30, r24
  c6:	ee 0f       	add	r30, r30
  c8:	ff 1f       	adc	r31, r31
  ca:	e8 0f       	add	r30, r24
  cc:	f9 1f       	adc	r31, r25
  ce:	e0 5a       	subi	r30, 0xA0	; 160
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	22 81       	ldd	r18, Z+2	; 0x02
  d4:	21 11       	cpse	r18, r1
  d6:	20 c0       	rjmp	.+64     	; 0x118 <HLED_enuSetLedState+0x62>
		{
			if(Copy_enuState == HLED_enuON)
  d8:	61 11       	cpse	r22, r1
  da:	0e c0       	rjmp	.+28     	; 0xf8 <HLED_enuSetLedState+0x42>
			{
				 Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuHIGH);
  dc:	fc 01       	movw	r30, r24
  de:	ee 0f       	add	r30, r30
  e0:	ff 1f       	adc	r31, r31
  e2:	8e 0f       	add	r24, r30
  e4:	9f 1f       	adc	r25, r31
  e6:	fc 01       	movw	r30, r24
  e8:	e0 5a       	subi	r30, 0xA0	; 160
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	61 81       	ldd	r22, Z+1	; 0x01
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	80 81       	ld	r24, Z
  f2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MDIO_enuSetPinValue>
  f6:	08 95       	ret
			}
			else if(Copy_enuState == HLED_enuOFF)
  f8:	61 30       	cpi	r22, 0x01	; 1
  fa:	a1 f5       	brne	.+104    	; 0x164 <HLED_enuSetLedState+0xae>
			{
				Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuLOW);
  fc:	fc 01       	movw	r30, r24
  fe:	ee 0f       	add	r30, r30
 100:	ff 1f       	adc	r31, r31
 102:	8e 0f       	add	r24, r30
 104:	9f 1f       	adc	r25, r31
 106:	fc 01       	movw	r30, r24
 108:	e0 5a       	subi	r30, 0xA0	; 160
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	61 81       	ldd	r22, Z+1	; 0x01
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MDIO_enuSetPinValue>
 116:	08 95       	ret
			}
		}
		else if(HLED_enuArrLedCongf[Copy_u8LedName].CONNECTION == HLED_enuReverse)
 118:	21 30       	cpi	r18, 0x01	; 1
 11a:	31 f5       	brne	.+76     	; 0x168 <HLED_enuSetLedState+0xb2>
		{
			if(Copy_enuState == HLED_enuON)
 11c:	61 11       	cpse	r22, r1
 11e:	0e c0       	rjmp	.+28     	; 0x13c <HLED_enuSetLedState+0x86>
			{
				Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuLOW);
 120:	fc 01       	movw	r30, r24
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	8e 0f       	add	r24, r30
 128:	9f 1f       	adc	r25, r31
 12a:	fc 01       	movw	r30, r24
 12c:	e0 5a       	subi	r30, 0xA0	; 160
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	61 81       	ldd	r22, Z+1	; 0x01
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MDIO_enuSetPinValue>
 13a:	08 95       	ret
			}
			else if(Copy_enuState == HLED_enuOFF)
 13c:	61 30       	cpi	r22, 0x01	; 1
 13e:	b1 f4       	brne	.+44     	; 0x16c <HLED_enuSetLedState+0xb6>
			{
				Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuHIGH);
 140:	fc 01       	movw	r30, r24
 142:	ee 0f       	add	r30, r30
 144:	ff 1f       	adc	r31, r31
 146:	8e 0f       	add	r24, r30
 148:	9f 1f       	adc	r25, r31
 14a:	fc 01       	movw	r30, r24
 14c:	e0 5a       	subi	r30, 0xA0	; 160
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	61 81       	ldd	r22, Z+1	; 0x01
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	80 81       	ld	r24, Z
 156:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MDIO_enuSetPinValue>
 15a:	08 95       	ret
	MDIO_enuErrorStatus_t Ret_enuError = HLED_enuNOK;
	
	// Validate input parameters
	if (IS_INVALID_LED_NAME(Copy_u8LedName))
	{
		Ret_enuError =HLED_enuINVALID_LEDName ;
 15c:	85 e0       	ldi	r24, 0x05	; 5
 15e:	08 95       	ret
		
	}
	else if (IS_INVALID_LED_VALUE(Copy_enuState))
	{
		Ret_enuError = HLED_enuINVALID_LEDValue;
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	08 95       	ret
	}
	else
	{
		Ret_enuError = HLED_enuOK;
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	08 95       	ret
				Ret_enuError = MDIO_enuSetPinValue(HLED_enuArrLedCongf[Copy_u8LedName].PORT ,HLED_enuArrLedCongf[Copy_u8LedName].PIN , MDIO_enuHIGH);
			}
		}
		else
		{
			Ret_enuError = HLED_enuINVALID_LEDConnection;
 168:	87 e0       	ldi	r24, 0x07	; 7
 16a:	08 95       	ret
	{
		Ret_enuError = HLED_enuINVALID_LEDValue;
	}
	else
	{
		Ret_enuError = HLED_enuOK;
 16c:	80 e0       	ldi	r24, 0x00	; 0
		
	   

	}
	return Ret_enuError;
 16e:	08 95       	ret

00000170 <main>:
#include "HLED.h"
#include "avr/delay.h"

int main(void)
{
	HLED_vLED_init();
 170:	0e 94 41 00 	call	0x82	; 0x82 <HLED_vLED_init>
	
	HLED_enuSetLedState(Led_start , HLED_enuON);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 5b 00 	call	0xb6	; 0xb6 <HLED_enuSetLedState>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	2f e3       	ldi	r18, 0x3F	; 63
 17e:	8d e0       	ldi	r24, 0x0D	; 13
 180:	93 e0       	ldi	r25, 0x03	; 3
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x12>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x1c>
 18c:	00 00       	nop
	
	_delay_ms(1000);
	HLED_enuSetLedState(Led_start , HLED_enuOFF);
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 5b 00 	call	0xb6	; 0xb6 <HLED_enuSetLedState>

	WDG_Sleep(WDT_TIMEOUT_2S);
 196:	87 e0       	ldi	r24, 0x07	; 7
 198:	0e 94 54 01 	call	0x2a8	; 0x2a8 <WDG_Sleep>
	WDG_TurnON(); //without turn off so the led will on again 
 19c:	0e 94 4b 01 	call	0x296	; 0x296 <WDG_TurnON>

	WDG_TurnOff(); //the led will not on again no rest will happen
 1a0:	0e 94 4f 01 	call	0x29e	; 0x29e <WDG_TurnOff>
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <main+0x34>

000001a6 <MDIO_enuSetPinValue>:
{
	
	MDIO_enuErrorStatus_t Ret_enuError = MDIO_enuNOK;
	
	 // Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
 1a6:	85 30       	cpi	r24, 0x05	; 5
 1a8:	60 f5       	brcc	.+88     	; 0x202 <MDIO_enuSetPinValue+0x5c>
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
 1aa:	69 30       	cpi	r22, 0x09	; 9
 1ac:	60 f5       	brcc	.+88     	; 0x206 <MDIO_enuSetPinValue+0x60>
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PIN_STATE(Copy_enuState))
 1ae:	42 30       	cpi	r20, 0x02	; 2
 1b0:	60 f5       	brcc	.+88     	; 0x20a <MDIO_enuSetPinValue+0x64>
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
		// Get the address of the port registers
		MDIO_strPortRegElement_t* Local_strPtrCurrPort =(((MDIO_PORT_REG_BASE_ADD) - (((u8)Copy_enuPortNum) * 3)));
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	fc 01       	movw	r30, r24
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	8e 0f       	add	r24, r30
 1bc:	9f 1f       	adc	r25, r31
 1be:	ee 27       	eor	r30, r30
 1c0:	ff 27       	eor	r31, r31
 1c2:	e8 1b       	sub	r30, r24
 1c4:	f9 0b       	sbc	r31, r25
 1c6:	f9 96       	adiw	r30, 0x39	; 57
		// Set the pin value (HIGH or LOW)
		if(Copy_enuState == MDIO_enuLOW) // Set pin to LOW
 1c8:	41 11       	cpse	r20, r1
 1ca:	0d c0       	rjmp	.+26     	; 0x1e6 <MDIO_enuSetPinValue+0x40>
		{
				CLR_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
 1cc:	22 81       	ldd	r18, Z+2	; 0x02
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <MDIO_enuSetPinValue+0x32>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <MDIO_enuSetPinValue+0x2e>
 1dc:	80 95       	com	r24
 1de:	82 23       	and	r24, r18
 1e0:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	08 95       	ret
		// Set the pin value (HIGH or LOW)
		if(Copy_enuState == MDIO_enuLOW) // Set pin to LOW
		{
				CLR_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
		}
		else if(Copy_enuState == MDIO_enuHIGH)// Set pin to HIGH
 1e6:	41 30       	cpi	r20, 0x01	; 1
 1e8:	91 f4       	brne	.+36     	; 0x20e <MDIO_enuSetPinValue+0x68>
		{
				
				SET_BIT(Local_strPtrCurrPort->PORT,Copy_enuPinNum);
 1ea:	22 81       	ldd	r18, Z+2	; 0x02
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <MDIO_enuSetPinValue+0x50>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <MDIO_enuSetPinValue+0x4c>
 1fa:	82 2b       	or	r24, r18
 1fc:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret
	MDIO_enuErrorStatus_t Ret_enuError = MDIO_enuNOK;
	
	 // Validate input parameters
	if (IS_INVALID_PORT_NUM(Copy_enuPortNum))
	{
		Ret_enuError = MDIO_enuINVALID_PortNum;
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(Copy_enuPinNum))
	{
		Ret_enuError = MDIO_enuINVALID_PinNum;
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	08 95       	ret
	}
	else if (IS_INVALID_PIN_STATE(Copy_enuState))
	{
		Ret_enuError = MDIO_enuINVALID_PinStatus;
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	08 95       	ret
	}
	else
	{
		Ret_enuError = MDIO_enuOK;
 20e:	80 e0       	ldi	r24, 0x00	; 0
		}

	}
	return Ret_enuError;
	
}
 210:	08 95       	ret

00000212 <MPORT_enuSetPinDirection>:
// Function: MPORT_enuSetPinDirection
// Sets the direction of any pin after the initialization.
MPORT_enuErrorStatus_t MPORT_enuSetPinDirection( MPORT_enuPinNums_t Copy_enuPinNum  ,  MPORT_enuPinDirection_t  Copy_enuPinDirection  )
{
	MPORT_enuErrorStatus_t Ret_enuError= MPORT_enuOK;
	u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
 212:	28 2f       	mov	r18, r24
 214:	22 95       	swap	r18
 216:	2f 70       	andi	r18, 0x0F	; 15
	u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
 218:	8f 70       	andi	r24, 0x0F	; 15
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
 21a:	24 30       	cpi	r18, 0x04	; 4
 21c:	a0 f5       	brcc	.+104    	; 0x286 <MPORT_enuSetPinDirection+0x74>
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
		
	}
	else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
 21e:	88 30       	cpi	r24, 0x08	; 8
 220:	a0 f5       	brcc	.+104    	; 0x28a <MPORT_enuSetPinDirection+0x78>
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
	}
	else if (IS_INVALID_PIN_Direction(Copy_enuPinDirection))
 222:	62 30       	cpi	r22, 0x02	; 2
 224:	a0 f5       	brcc	.+104    	; 0x28e <MPORT_enuSetPinDirection+0x7c>
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
		// Get the address of the port registers
		MPORT_strPortRegElement_t* Local_strPtrCurrPort =(((MPORT_PORT_REG_BASE_ADD) - (((u8)LOC_u8portNumber) * 3)));
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	f9 01       	movw	r30, r18
 22a:	ee 0f       	add	r30, r30
 22c:	ff 1f       	adc	r31, r31
 22e:	2e 0f       	add	r18, r30
 230:	3f 1f       	adc	r19, r31
 232:	ee 27       	eor	r30, r30
 234:	ff 27       	eor	r31, r31
 236:	e2 1b       	sub	r30, r18
 238:	f3 0b       	sbc	r31, r19
 23a:	f9 96       	adiw	r30, 0x39	; 57
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuPinDirection == MPORT_enuPINOUTPUT)// Output 
 23c:	61 11       	cpse	r22, r1
 23e:	0e c0       	rjmp	.+28     	; 0x25c <MPORT_enuSetPinDirection+0x4a>
		{
			SET_BIT(Local_strPtrCurrPort->DDR,LOC_u8pinNumber);
 240:	41 81       	ldd	r20, Z+1	; 0x01
 242:	21 e0       	ldi	r18, 0x01	; 1
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	b9 01       	movw	r22, r18
 248:	02 c0       	rjmp	.+4      	; 0x24e <MPORT_enuSetPinDirection+0x3c>
 24a:	66 0f       	add	r22, r22
 24c:	77 1f       	adc	r23, r23
 24e:	8a 95       	dec	r24
 250:	e2 f7       	brpl	.-8      	; 0x24a <MPORT_enuSetPinDirection+0x38>
 252:	cb 01       	movw	r24, r22
 254:	84 2b       	or	r24, r20
 256:	81 83       	std	Z+1, r24	; 0x01
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	08 95       	ret
		// Configure pin direction and state based on the requested configuration
		if(Copy_enuPinDirection == MPORT_enuPINOUTPUT)// Output 
		{
			SET_BIT(Local_strPtrCurrPort->DDR,LOC_u8pinNumber);
		}
		else if(Copy_enuPinDirection == MPORT_enuPININPUT) // Input 
 25c:	61 30       	cpi	r22, 0x01	; 1
 25e:	c9 f4       	brne	.+50     	; 0x292 <MPORT_enuSetPinDirection+0x80>
		{
			CLR_BIT(Local_strPtrCurrPort->DDR ,LOC_u8pinNumber );
 260:	41 81       	ldd	r20, Z+1	; 0x01
 262:	21 e0       	ldi	r18, 0x01	; 1
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	b9 01       	movw	r22, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <MPORT_enuSetPinDirection+0x5c>
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	8a 95       	dec	r24
 270:	e2 f7       	brpl	.-8      	; 0x26a <MPORT_enuSetPinDirection+0x58>
 272:	cb 01       	movw	r24, r22
 274:	80 95       	com	r24
 276:	94 2f       	mov	r25, r20
 278:	98 23       	and	r25, r24
 27a:	91 83       	std	Z+1, r25	; 0x01
			CLR_BIT(Local_strPtrCurrPort->PORT,LOC_u8pinNumber);
 27c:	92 81       	ldd	r25, Z+2	; 0x02
 27e:	89 23       	and	r24, r25
 280:	82 83       	std	Z+2, r24	; 0x02
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	08 95       	ret
	u8 LOC_u8portNumber = (Copy_enuPinNum >> 4) & 0x0F;
	u8 LOC_u8pinNumber = Copy_enuPinNum & 0x0F;
	// Validate input parameters
	if (IS_INVALID_PORT_NUM(LOC_u8portNumber))
	{
		Ret_enuError = MPORT_enuINVALID_PortNum;
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	08 95       	ret
		
	}
	else if (IS_INVALID_PIN_NUM(LOC_u8pinNumber))
	{
		Ret_enuError = MPORT_enuINVALID_PinNum;
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	08 95       	ret
	}
	else if (IS_INVALID_PIN_Direction(Copy_enuPinDirection))
	{
		Ret_enuError = MPORT_enuINVALID_PinDirection;
 28e:	84 e0       	ldi	r24, 0x04	; 4
 290:	08 95       	ret
	}
	else
	{
		Ret_enuError = MPORT_enuOK;
 292:	80 e0       	ldi	r24, 0x00	; 0
	
	}
	return Ret_enuError;
		
		
}
 294:	08 95       	ret

00000296 <WDG_TurnON>:


/* Enable Watchdog Timer (without modifying timeout) */
void WDG_TurnON(void)
{
	WDTCR |= (1 << WDE); 
 296:	81 b5       	in	r24, 0x21	; 33
 298:	88 60       	ori	r24, 0x08	; 8
 29a:	81 bd       	out	0x21, r24	; 33
 29c:	08 95       	ret

0000029e <WDG_TurnOff>:
}

/* Disable Watchdog Timer */
void WDG_TurnOff(void)
{
	WDTCR |= (1 << WDTOE) | (1 << WDE);  // Step 1: Set WDTOE & WDE
 29e:	81 b5       	in	r24, 0x21	; 33
 2a0:	88 61       	ori	r24, 0x18	; 24
 2a2:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0x00;  // Step 2: Clear WDE within 4 clock cycles
 2a4:	11 bc       	out	0x21, r1	; 33
 2a6:	08 95       	ret

000002a8 <WDG_Sleep>:
}

/* Set Watchdog Timer timeout (does NOT enable the WDT) */
void WDG_Sleep(u8 timeout)
{
	WDTCR = (WDTCR & WDT_MASK) | (timeout & 0x07);  // Clear WDP bits & Set new timeout
 2a8:	91 b5       	in	r25, 0x21	; 33
 2aa:	98 7f       	andi	r25, 0xF8	; 248
 2ac:	87 70       	andi	r24, 0x07	; 7
 2ae:	89 2b       	or	r24, r25
 2b0:	81 bd       	out	0x21, r24	; 33
 2b2:	08 95       	ret

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
